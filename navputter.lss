
navputter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000007ba  00800100  00006a04  00006a98  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006a04  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000be  008008ba  008008ba  00007252  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00007252  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00007264  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000007f0  00000000  00000000  000072a8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001289d  00000000  00000000  00007a98  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003236  00000000  00000000  0001a335  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00010c67  00000000  00000000  0001d56b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002470  00000000  00000000  0002e1d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00007d86  00000000  00000000  00030644  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000f3ae  00000000  00000000  000383ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000d60  00000000  00000000  00047778  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	e3 c2       	rjmp	.+1478   	; 0x5c8 <__ctors_end>
       2:	00 00       	nop
       4:	09 c3       	rjmp	.+1554   	; 0x618 <__bad_interrupt>
       6:	00 00       	nop
       8:	07 c3       	rjmp	.+1550   	; 0x618 <__bad_interrupt>
       a:	00 00       	nop
       c:	05 c3       	rjmp	.+1546   	; 0x618 <__bad_interrupt>
       e:	00 00       	nop
      10:	03 c3       	rjmp	.+1542   	; 0x618 <__bad_interrupt>
      12:	00 00       	nop
      14:	01 c3       	rjmp	.+1538   	; 0x618 <__bad_interrupt>
      16:	00 00       	nop
      18:	ff c2       	rjmp	.+1534   	; 0x618 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	fd c2       	rjmp	.+1530   	; 0x618 <__bad_interrupt>
      1e:	00 00       	nop
      20:	fb c2       	rjmp	.+1526   	; 0x618 <__bad_interrupt>
      22:	00 00       	nop
      24:	f9 c2       	rjmp	.+1522   	; 0x618 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 fc 28 	jmp	0x51f8	; 0x51f8 <__vector_10>
      2c:	0c 94 c5 29 	jmp	0x538a	; 0x538a <__vector_11>
      30:	f3 c2       	rjmp	.+1510   	; 0x618 <__bad_interrupt>
      32:	00 00       	nop
      34:	f1 c2       	rjmp	.+1506   	; 0x618 <__bad_interrupt>
      36:	00 00       	nop
      38:	ef c2       	rjmp	.+1502   	; 0x618 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	ed c2       	rjmp	.+1498   	; 0x618 <__bad_interrupt>
      3e:	00 00       	nop
      40:	eb c2       	rjmp	.+1494   	; 0x618 <__bad_interrupt>
      42:	00 00       	nop
      44:	0c 94 63 0a 	jmp	0x14c6	; 0x14c6 <__vector_17>
      48:	e7 c2       	rjmp	.+1486   	; 0x618 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	e5 c2       	rjmp	.+1482   	; 0x618 <__bad_interrupt>
      4e:	00 00       	nop
      50:	e3 c2       	rjmp	.+1478   	; 0x618 <__bad_interrupt>
      52:	00 00       	nop
      54:	e1 c2       	rjmp	.+1474   	; 0x618 <__bad_interrupt>
      56:	00 00       	nop
      58:	df c2       	rjmp	.+1470   	; 0x618 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	dd c2       	rjmp	.+1466   	; 0x618 <__bad_interrupt>
      5e:	00 00       	nop
      60:	db c2       	rjmp	.+1462   	; 0x618 <__bad_interrupt>
      62:	00 00       	nop
      64:	d9 c2       	rjmp	.+1458   	; 0x618 <__bad_interrupt>
      66:	00 00       	nop
      68:	d7 c2       	rjmp	.+1454   	; 0x618 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	d5 c2       	rjmp	.+1450   	; 0x618 <__bad_interrupt>
      6e:	00 00       	nop
      70:	d3 c2       	rjmp	.+1446   	; 0x618 <__bad_interrupt>
      72:	00 00       	nop
      74:	d1 c2       	rjmp	.+1442   	; 0x618 <__bad_interrupt>
      76:	00 00       	nop
      78:	cf c2       	rjmp	.+1438   	; 0x618 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	cd c2       	rjmp	.+1434   	; 0x618 <__bad_interrupt>
      7e:	00 00       	nop
      80:	cb c2       	rjmp	.+1430   	; 0x618 <__bad_interrupt>
      82:	00 00       	nop
      84:	c9 c2       	rjmp	.+1426   	; 0x618 <__bad_interrupt>
      86:	00 00       	nop
      88:	c7 c2       	rjmp	.+1422   	; 0x618 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	c5 c2       	rjmp	.+1418   	; 0x618 <__bad_interrupt>
      8e:	00 00       	nop
      90:	c3 c2       	rjmp	.+1414   	; 0x618 <__bad_interrupt>
      92:	00 00       	nop
      94:	c1 c2       	rjmp	.+1410   	; 0x618 <__bad_interrupt>
      96:	00 00       	nop
      98:	bf c2       	rjmp	.+1406   	; 0x618 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	bd c2       	rjmp	.+1402   	; 0x618 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	bb c2       	rjmp	.+1398   	; 0x618 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	b9 c2       	rjmp	.+1394   	; 0x618 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	b7 c2       	rjmp	.+1390   	; 0x618 <__bad_interrupt>
      aa:	00 00       	nop

000000ac <__trampolines_end>:
      ac:	52 6f       	ori	r21, 0xF2	; 242
      ae:	77 20       	and	r7, r7
      b0:	25 32       	cpi	r18, 0x25	; 37
      b2:	2e 32       	cpi	r18, 0x2E	; 46
      b4:	64 3a       	cpi	r22, 0xA4	; 164
      b6:	20 00       	.word	0x0020	; ????

000000b8 <_ZL27global_dump_keymap_string_4>:
      b8:	43 6f 6c 3a 20 20 20 20 30 30 20 20 30 31 20 20     Col:    00  01  
      c8:	30 32 20 20 30 33 20 20 30 34 20 20 30 35 25 73     02  03  04  05%s
      d8:	00                                                  .

000000d9 <_ZL27global_save_keymap_string_2>:
      d9:	50 72 65 73 73 20 25 64 20 74 6f 20 61 64 64 20     Press %d to add 
      e9:	61 20 6e 65 77 20 6b 65 79 6d 61 70 20 61 74 20     a new keymap at 
      f9:	69 6e 64 65 78 20 25 64 3a 00                       index %d:.

00000103 <_ZL27global_save_keymap_string_1>:
     103:	25 73 50 72 65 73 73 20 61 6e 20 69 6e 74 65 67     %sPress an integ
     113:	65 72 20 75 70 20 74 6f 20 25 64 20 74 6f 20 6f     er up to %d to o
     123:	76 65 72 77 72 69 74 65 20 74 68 61 74 20 73 6c     verwrite that sl
     133:	6f 74 2c 20 6f 72 25 73 00                          ot, or%s.

0000013c <_ZL8eoln_str>:
     13c:	0a 0d 0a 0d 00                                      .....

00000141 <_ZL18keycode_menu_str_1>:
     141:	50 72 65 73 73 20 6b 65 79 20 6e 75 6d 62 65 72     Press key number
     151:	20 6f 72 20 6c 65 74 74 65 72 20 74 6f 20 65 64      or letter to ed
     161:	69 74 2c 20 27 77 27 20 74 6f 20 77 72 69 74 65     it, 'w' to write
     171:	2c 20 27 71 27 20 74 6f 20 71 75 69 74 3a 00        , 'q' to quit:.

00000180 <_ZL45global_progmem_keycode_editmenu_format_string>:
     180:	25 73 25 63 20 20 00                                %s%c  .

00000187 <_ZL47global_progmem_keycode_editmenu_format_string_2>:
     187:	52 65 66 65 72 20 74 6f 20 6b 65 79 73 20 77 69     Refer to keys wi
     197:	74 68 20 6e 75 6d 62 65 72 73 20 61 6e 64 20 6c     th numbers and l
     1a7:	65 74 74 65 72 73 20 62 65 6c 6f 77 3a 0a 0d 0a     etters below:...
     1b7:	0d 00                                               ..

000001b9 <_ZL35global_keycode_error_no_keymaps_str>:
     1b9:	25 73 4e 6f 20 6b 65 79 6d 61 70 73 20 74 6f 20     %sNo keymaps to 
     1c9:	6c 6f 61 64 2e 25 73 25 73 00                       load.%s%s.

000001d3 <_ZL23global_keycode_load_str>:
     1d3:	45 6e 74 65 72 20 30 2d 25 64 20 74 6f 20 6c 6f     Enter 0-%d to lo
     1e3:	61 64 20 6b 65 79 6d 61 70 20 66 72 6f 6d 20 65     ad keymap from e
     1f3:	65 70 72 6f 6d 2e 25 73 00                          eprom.%s.

000001fc <_ZL31keycode_menu_specialSA_SHOW_KEY>:
     1fc:	53 68 6f 77 20 4b 65 79 00                          Show Key.

00000205 <_ZL40keycode_menu_specialSA_TOGGLE_KEY_ARROWS>:
     205:	43 79 63 6c 65 20 6b 65 79 20 61 72 72 6f 77 73     Cycle key arrows
     215:	00                                                  .

00000216 <_ZL34keycode_menu_specialSA_POWER_CYCLE>:
     216:	50 6f 77 65 72 20 6f 66 66 00                       Power off.

00000220 <_ZL30keycode_menu_descKA_REPORT_KEY>:
     220:	52 65 70 6f 72 74 20 6b 65 79 70 72 65 73 73 20     Report keypress 
     230:	6f 6e 6c 79 2e 00                                   only..

00000236 <_ZL32keycode_menu_actionKA_REPORT_KEY>:
     236:	53 68 6f 77 20 4b 65 79 00                          Show Key.

0000023f <_ZL30keycode_menu_descKA_MOUSE_STEP>:
     23f:	54 6f 67 67 6c 65 20 6d 6f 75 73 65 20 73 70 65     Toggle mouse spe
     24f:	65 64 2e 00                                         ed..

00000253 <_ZL32keycode_menu_actionKA_MOUSE_STEP>:
     253:	4d 20 53 70 65 65 64 00                             M Speed.

0000025b <_ZL39keycode_menu_descKA_MOUSE_MID_DBL_CLICK>:
     25b:	4d 6f 75 73 65 20 6d 69 64 64 6c 65 20 64 6f 75     Mouse middle dou
     26b:	62 6c 65 20 63 6c 69 63 6b 2e 00                    ble click..

00000276 <_ZL41keycode_menu_actionKA_MOUSE_MID_DBL_CLICK>:
     276:	4d 6f 75 73 65 2d 4d 44 4b 00                       Mouse-MDK.

00000280 <_ZL35keycode_menu_descKA_MOUSE_MID_CLICK>:
     280:	4d 6f 75 73 65 20 6d 69 64 64 6c 65 20 63 6c 69     Mouse middle cli
     290:	63 6b 2e 00                                         ck..

00000294 <_ZL37keycode_menu_actionKA_MOUSE_MID_CLICK>:
     294:	4d 6f 75 73 65 2d 4d 4b 00                          Mouse-MK.

0000029d <_ZL38keycode_menu_descKA_MOUSE_LT_DBL_CLICK>:
     29d:	4d 6f 75 73 65 20 6c 65 66 74 20 64 6f 75 62 6c     Mouse left doubl
     2ad:	65 20 63 6c 69 63 6b 2e 00                          e click..

000002b6 <_ZL40keycode_menu_actionKA_MOUSE_LT_DBL_CLICK>:
     2b6:	4d 6f 75 73 65 2d 4c 44 4b 00                       Mouse-LDK.

000002c0 <_ZL38keycode_menu_descKA_MOUSE_RT_DBL_CLICK>:
     2c0:	4d 6f 75 73 65 20 72 69 67 68 74 20 64 6f 75 62     Mouse right doub
     2d0:	6c 65 20 63 6c 69 63 6b 2e 00                       le click..

000002da <_ZL40keycode_menu_actionKA_MOUSE_RT_DBL_CLICK>:
     2da:	4d 6f 75 73 65 2d 52 44 4b 00                       Mouse-RDK.

000002e4 <_ZL34keycode_menu_descKA_MOUSE_RT_CLICK>:
     2e4:	4d 6f 75 73 65 20 72 69 67 68 74 20 63 6c 69 63     Mouse right clic
     2f4:	6b 2e 00                                            k..

000002f7 <_ZL36keycode_menu_actionKA_MOUSE_RT_CLICK>:
     2f7:	4d 6f 75 73 65 2d 52 4b 00                          Mouse-RK.

00000300 <_ZL34keycode_menu_descKA_MOUSE_LT_CLICK>:
     300:	4d 6f 75 73 65 20 6c 65 66 74 20 63 6c 69 63 6b     Mouse left click
     310:	2e 00                                               ..

00000312 <_ZL36keycode_menu_actionKA_MOUSE_LT_CLICK>:
     312:	4d 6f 75 73 65 2d 4c 4b 00                          Mouse-LK.

0000031b <_ZL31keycode_menu_descKA_MOUSE_RIGHT>:
     31b:	4d 6f 75 73 65 20 72 69 67 68 74 2e 00              Mouse right..

00000328 <_ZL33keycode_menu_actionKA_MOUSE_RIGHT>:
     328:	4d 6f 75 73 65 2d 52 54 00                          Mouse-RT.

00000331 <_ZL30keycode_menu_descKA_MOUSE_LEFT>:
     331:	4d 6f 75 73 65 20 6c 65 66 74 2e 00                 Mouse left..

0000033d <_ZL32keycode_menu_actionKA_MOUSE_LEFT>:
     33d:	4d 6f 75 73 65 2d 4c 54 00                          Mouse-LT.

00000346 <_ZL30keycode_menu_descKA_MOUSE_DOWN>:
     346:	4d 6f 75 73 65 20 64 6f 77 6e 2e 00                 Mouse down..

00000352 <_ZL32keycode_menu_actionKA_MOUSE_DOWN>:
     352:	4d 6f 75 73 65 2d 44 4e 00                          Mouse-DN.

0000035b <_ZL28keycode_menu_descKA_MOUSE_UP>:
     35b:	4d 6f 75 73 65 20 75 70 2e 00                       Mouse up..

00000365 <_ZL30keycode_menu_actionKA_MOUSE_UP>:
     365:	4d 6f 75 73 65 2d 55 50 00                          Mouse-UP.

0000036e <_ZL34keycode_menu_descKA_SPECIAL_ACTION>:
     36e:	53 70 65 63 69 61 6c 20 61 63 74 69 6f 6e 2e 00     Special action..

0000037e <_ZL36keycode_menu_actionKA_SPECIAL_ACTION>:
     37e:	53 70 65 63 69 61 6c 00                             Special.

00000386 <_ZL39keycode_menu_descKA_KEY_SCANCODE_ACTION>:
     386:	53 65 6e 64 20 6b 65 79 20 73 65 71 2e 00           Send key seq..

00000394 <_ZL41keycode_menu_actionKA_KEY_SCANCODE_ACTION>:
     394:	4b 65 79 70 72 65 73 73 3a 00                       Keypress:.

0000039e <_ZL29keycode_menu_descKA_NO_ACTION>:
     39e:	44 6f 20 6e 6f 74 68 69 6e 67 2e 00                 Do nothing..

000003aa <_ZL31keycode_menu_actionKA_NO_ACTION>:
     3aa:	4e 6f 74 68 69 6e 67 00                             Nothing.

000003b2 <_ZL23switch_keypress_message>:
     3b2:	4e 6f 77 20 65 64 69 74 69 6e 67 20 6b 65 79 70     Now editing keyp
     3c2:	72 65 73 73 20 25 64 25 73 00                       ress %d%s.

000003cc <_ZL21keycode_usage_string2>:
     3cc:	25 63 29 20 25 73 0a 0d 00                          %c) %s...

000003d5 <_ZL20keycode_usage_string>:
     3d5:	43 68 61 6e 67 65 20 6b 65 79 20 73 65 71 20 77     Change key seq w
     3e5:	69 74 68 20 74 68 65 20 66 6f 6c 6c 6f 77 69 6e     ith the followin
     3f5:	67 20 6b 65 79 73 3a 0a 0d 00                       g keys:...

000003ff <_ZL32global_save_keymap_to_eeprom_str>:
     3ff:	4b 65 79 6d 61 70 20 73 61 76 65 64 20 74 6f 20     Keymap saved to 
     40f:	69 6e 64 65 78 20 25 64 20 28 6f 66 66 73 65 74     index %d (offset
     41f:	20 25 64 29 25 73 00                                 %d)%s.

00000426 <_ZL22global_eeprom_string_2>:
     426:	25 73 45 45 50 52 4f 4d 20 4d 65 6e 75 25 73 25     %sEEPROM Menu%s%
     436:	73 00                                               s.

00000438 <_ZL22global_eeprom_string_1>:
     438:	25 73 45 45 50 52 4f 4d 20 77 72 69 74 74 65 6e     %sEEPROM written
     448:	2e 25 73 00                                         .%s.

0000044c <_ZL21global_main_menu_str1>:
     44c:	4d 61 69 6e 20 4d 65 6e 75 3a 25 73 00              Main Menu:%s.

00000459 <_ZL20global_eeprom_string>:
     459:	45 45 50 52 4f 4d 20 25 73 2e 20 76 65 72 3d 25     EEPROM %s. ver=%
     469:	78 25 73 00                                         x%s.

0000046d <_ZL15show_key_string>:
     46d:	73 68 6f 77 20 6b 65 79 20 72 3a 25 64 20 63 3a     show key r:%d c:
     47d:	25 64 20 73 65 71 3a 25 64 0a 0d 00                 %d seq:%d...

00000489 <ProductString>:
     489:	30 03 4c 00 55 00 46 00 41 00 20 00 43 00 44 00     0.L.U.F.A. .C.D.
     499:	43 00 20 00 61 00 6e 00 64 00 20 00 4d 00 6f 00     C. .a.n.d. .M.o.
     4a9:	75 00 73 00 65 00 20 00 44 00 65 00 6d 00 6f 00     u.s.e. .D.e.m.o.
     4b9:	00 00                                               ..

000004bb <ManufacturerString>:
     4bb:	1a 03 4c 00 55 00 46 00 41 00 20 00 4c 00 69 00     ..L.U.F.A. .L.i.
     4cb:	62 00 72 00 61 00 72 00 79 00 00 00                 b.r.a.r.y...

000004d7 <LanguageString>:
     4d7:	04 03 09 04                                         ....

000004db <ConfigurationDescriptor>:
     4db:	09 02 5f 00 03 01 00 c0 32 08 0b 00 02 02 02 01     .._.....2.......
     4eb:	00 09 04 00 00 01 02 02 01 00 05 24 00 10 01 04     ...........$....
     4fb:	24 02 06 05 24 06 00 01 07 05 82 03 08 00 ff 09     $...$...........
     50b:	04 01 00 02 0a 00 00 00 07 05 04 02 10 00 05 07     ................
     51b:	05 83 02 10 00 05 09 04 02 00 01 03 00 00 00 09     ................
     52b:	21 11 01 00 01 22 79 00 07 05 81 03 08 00 05        !...."y........

0000053a <DeviceDescriptor>:
     53a:	12 01 10 01 ef 02 01 08 eb 03 62 20 01 00 01 02     ..........b ....
     54a:	dc 01                                               ..

0000054c <HIDReport>:
     54c:	05 01 09 02 a1 01 85 01 09 01 a1 00 05 09 19 01     ................
     55c:	29 03 15 00 25 01 95 03 75 01 81 02 95 01 75 05     )...%...u.....u.
     56c:	81 01 05 01 09 30 09 31 15 ff 25 01 35 ff 45 01     .....0.1..%.5.E.
     57c:	95 02 75 08 81 06 c0 c0 05 01 09 06 a1 01 85 02     ..u.............
     58c:	05 07 19 e0 29 e7 15 00 25 01 75 01 95 08 81 02     ....)...%.u.....
     59c:	95 01 75 08 81 01 05 08 19 01 29 05 95 05 75 01     ..u.......)...u.
     5ac:	91 02 95 01 75 03 91 01 15 00 25 65 05 07 19 00     ....u.....%e....
     5bc:	29 65 95 06 75 08 81 00 c0 00                       )e..u.....

000005c6 <__ctors_start>:
     5c6:	77 25       	eor	r23, r7

000005c8 <__ctors_end>:
     5c8:	11 24       	eor	r1, r1
     5ca:	1f be       	out	0x3f, r1	; 63
     5cc:	cf ef       	ldi	r28, 0xFF	; 255
     5ce:	da e0       	ldi	r29, 0x0A	; 10
     5d0:	de bf       	out	0x3e, r29	; 62
     5d2:	cd bf       	out	0x3d, r28	; 61

000005d4 <__do_copy_data>:
     5d4:	18 e0       	ldi	r17, 0x08	; 8
     5d6:	a0 e0       	ldi	r26, 0x00	; 0
     5d8:	b1 e0       	ldi	r27, 0x01	; 1
     5da:	e4 e0       	ldi	r30, 0x04	; 4
     5dc:	fa e6       	ldi	r31, 0x6A	; 106
     5de:	02 c0       	rjmp	.+4      	; 0x5e4 <__do_copy_data+0x10>
     5e0:	05 90       	lpm	r0, Z+
     5e2:	0d 92       	st	X+, r0
     5e4:	aa 3b       	cpi	r26, 0xBA	; 186
     5e6:	b1 07       	cpc	r27, r17
     5e8:	d9 f7       	brne	.-10     	; 0x5e0 <__do_copy_data+0xc>

000005ea <__do_clear_bss>:
     5ea:	29 e0       	ldi	r18, 0x09	; 9
     5ec:	aa eb       	ldi	r26, 0xBA	; 186
     5ee:	b8 e0       	ldi	r27, 0x08	; 8
     5f0:	01 c0       	rjmp	.+2      	; 0x5f4 <.do_clear_bss_start>

000005f2 <.do_clear_bss_loop>:
     5f2:	1d 92       	st	X+, r1

000005f4 <.do_clear_bss_start>:
     5f4:	a8 37       	cpi	r26, 0x78	; 120
     5f6:	b2 07       	cpc	r27, r18
     5f8:	e1 f7       	brne	.-8      	; 0x5f2 <.do_clear_bss_loop>

000005fa <__do_global_ctors>:
     5fa:	12 e0       	ldi	r17, 0x02	; 2
     5fc:	c4 ee       	ldi	r28, 0xE4	; 228
     5fe:	d2 e0       	ldi	r29, 0x02	; 2
     600:	04 c0       	rjmp	.+8      	; 0x60a <__do_global_ctors+0x10>
     602:	21 97       	sbiw	r28, 0x01	; 1
     604:	fe 01       	movw	r30, r28
     606:	0e 94 2f 2f 	call	0x5e5e	; 0x5e5e <__tablejump2__>
     60a:	c3 3e       	cpi	r28, 0xE3	; 227
     60c:	d1 07       	cpc	r29, r17
     60e:	c9 f7       	brne	.-14     	; 0x602 <__do_global_ctors+0x8>
     610:	0e 94 1a 25 	call	0x4a34	; 0x4a34 <main>
     614:	0c 94 00 35 	jmp	0x6a00	; 0x6a00 <_exit>

00000618 <__bad_interrupt>:
     618:	f3 cc       	rjmp	.-1562   	; 0x0 <__vectors>

0000061a <_ZN22navputter_serial_class4readEv>:
    eeprom_read_block( buf, (void *)((uint8_t *)eeprom_start + offset), len );
}


int navputter_serial_class::read(void)
{
     61a:	fc 01       	movw	r30, r24
            m_head = ((m_head+1)==SERIAL_BUFFER_SIZE)?0:m_head+1;
        }

        uint8_t pop(void)
        {
            if ( m_head == m_tail ) return 0xff;
     61c:	97 a1       	ldd	r25, Z+39	; 0x27
     61e:	86 a1       	ldd	r24, Z+38	; 0x26
     620:	89 17       	cp	r24, r25
     622:	71 f0       	breq	.+28     	; 0x640 <_ZN22navputter_serial_class4readEv+0x26>
            uint8_t c = m_serial_buffer[m_tail];
     624:	df 01       	movw	r26, r30
     626:	a9 0f       	add	r26, r25
     628:	b1 1d       	adc	r27, r1
     62a:	56 96       	adiw	r26, 0x16	; 22
     62c:	8c 91       	ld	r24, X
            m_tail = ((m_tail+1)==SERIAL_BUFFER_SIZE)?0:m_tail+1;
     62e:	9f 30       	cpi	r25, 0x0F	; 15
     630:	29 f0       	breq	.+10     	; 0x63c <_ZN22navputter_serial_class4readEv+0x22>
     632:	9f 5f       	subi	r25, 0xFF	; 255
     634:	97 a3       	std	Z+39, r25	; 0x27
            wdt_disable();
        }
    
        void kick(void)
        {
            wdt_reset();
     636:	a8 95       	wdr
    int i  = usb_serial_class::read();
    DOG.kick();
    return i;
}
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	08 95       	ret
            m_tail = ((m_tail+1)==SERIAL_BUFFER_SIZE)?0:m_tail+1;
     63c:	90 e0       	ldi	r25, 0x00	; 0
     63e:	fa cf       	rjmp	.-12     	; 0x634 <_ZN22navputter_serial_class4readEv+0x1a>
            if ( m_head == m_tail ) return 0xff;
     640:	8f ef       	ldi	r24, 0xFF	; 255
     642:	f9 cf       	rjmp	.-14     	; 0x636 <_ZN22navputter_serial_class4readEv+0x1c>

00000644 <_ZN22navputter_keypad_class7triggerEv>:
}


void navputter_worker_class::start( void )
{
}
     644:	08 95       	ret

00000646 <_ZN28navputter_worker_pulse_class5startEv>:
        return m_state;
    }

    void set_state( uint8_t new_state )
    {
        m_state = new_state;
     646:	22 e0       	ldi	r18, 0x02	; 2
     648:	fc 01       	movw	r30, r24
     64a:	26 83       	std	Z+6, r18	; 0x06


void navputter_worker_pulse_class::start( void )
{
    set_state(WORKER_PULSE_ON);
}
     64c:	08 95       	ret

0000064e <_ZN25navputter_main_menu_class3endEv>:
    free( this );
     64e:	0c 94 ce 2f 	jmp	0x5f9c	; 0x5f9c <free>

00000652 <_ZN27navputter_eeprom_menu_class3endEv>:
    free( this );
     652:	0c 94 ce 2f 	jmp	0x5f9c	; 0x5f9c <free>

00000656 <_ZN25navputter_gpio_menu_class3endEv>:
    free(this);
     656:	0c 94 ce 2f 	jmp	0x5f9c	; 0x5f9c <free>

0000065a <_ZN28navputter_keycode_menu_class3endEv>:
    free(this);
     65a:	0c 94 ce 2f 	jmp	0x5f9c	; 0x5f9c <free>

0000065e <_ZN16usb_serial_class5writeEPKc>:
        size_t virtual write(const char *str )
     65e:	cf 93       	push	r28
     660:	df 93       	push	r29
     662:	db 01       	movw	r26, r22
            return write(str, strlen(str));
     664:	eb 01       	movw	r28, r22
     666:	09 90       	ld	r0, Y+
     668:	00 20       	and	r0, r0
     66a:	e9 f7       	brne	.-6      	; 0x666 <_ZN16usb_serial_class5writeEPKc+0x8>
     66c:	21 97       	sbiw	r28, 0x01	; 1
     66e:	c6 1b       	sub	r28, r22
     670:	d7 0b       	sbc	r29, r23
            fputs(str, m_stream);
     672:	fc 01       	movw	r30, r24
     674:	64 89       	ldd	r22, Z+20	; 0x14
     676:	75 89       	ldd	r23, Z+21	; 0x15
     678:	cd 01       	movw	r24, r26
     67a:	0e 94 f3 31 	call	0x63e6	; 0x63e6 <fputs>
        } 
     67e:	ce 01       	movw	r24, r28
     680:	df 91       	pop	r29
     682:	cf 91       	pop	r28
     684:	08 95       	ret

00000686 <_ZN22navputter_eeprom_class5writeEPvmj>:
{
     686:	8f 92       	push	r8
     688:	9f 92       	push	r9
     68a:	af 92       	push	r10
     68c:	bf 92       	push	r11
     68e:	ef 92       	push	r14
     690:	ff 92       	push	r15
     692:	0f 93       	push	r16
     694:	1f 93       	push	r17
     696:	cf 93       	push	r28
     698:	df 93       	push	r29
     69a:	49 01       	movw	r8, r18
     69c:	5a 01       	movw	r10, r20
    for ( i=0; i< len; i++ )
     69e:	7b 01       	movw	r14, r22
     6a0:	d0 e0       	ldi	r29, 0x00	; 0
     6a2:	c0 e0       	ldi	r28, 0x00	; 0
     6a4:	ce 01       	movw	r24, r28
     6a6:	b0 e0       	ldi	r27, 0x00	; 0
     6a8:	a0 e0       	ldi	r26, 0x00	; 0
     6aa:	88 15       	cp	r24, r8
     6ac:	99 05       	cpc	r25, r9
     6ae:	aa 05       	cpc	r26, r10
     6b0:	bb 05       	cpc	r27, r11
     6b2:	50 f4       	brcc	.+20     	; 0x6c8 <_ZN22navputter_eeprom_class5writeEPvmj+0x42>
        eeprom_update_byte( dst+i, *(c+i) );
     6b4:	f7 01       	movw	r30, r14
     6b6:	61 91       	ld	r22, Z+
     6b8:	7f 01       	movw	r14, r30
     6ba:	80 0f       	add	r24, r16
     6bc:	91 1f       	adc	r25, r17
     6be:	0e 94 8f 34 	call	0x691e	; 0x691e <eeprom_update_byte>
            wdt_reset();
     6c2:	a8 95       	wdr
    for ( i=0; i< len; i++ )
     6c4:	21 96       	adiw	r28, 0x01	; 1
     6c6:	ee cf       	rjmp	.-36     	; 0x6a4 <_ZN22navputter_eeprom_class5writeEPvmj+0x1e>
}
     6c8:	df 91       	pop	r29
     6ca:	cf 91       	pop	r28
     6cc:	1f 91       	pop	r17
     6ce:	0f 91       	pop	r16
     6d0:	ff 90       	pop	r15
     6d2:	ef 90       	pop	r14
     6d4:	bf 90       	pop	r11
     6d6:	af 90       	pop	r10
     6d8:	9f 90       	pop	r9
     6da:	8f 90       	pop	r8
     6dc:	08 95       	ret

000006de <_ZN22navputter_eeprom_class4readEPvmj>:
{
     6de:	0f 93       	push	r16
     6e0:	1f 93       	push	r17
     6e2:	cb 01       	movw	r24, r22
    eeprom_read_block( buf, (void *)((uint8_t *)eeprom_start + offset), len );
     6e4:	60 91 ba 08 	lds	r22, 0x08BA	; 0x8008ba <__data_end>
     6e8:	70 91 bb 08 	lds	r23, 0x08BB	; 0x8008bb <__data_end+0x1>
     6ec:	60 0f       	add	r22, r16
     6ee:	71 1f       	adc	r23, r17
     6f0:	a9 01       	movw	r20, r18
}
     6f2:	1f 91       	pop	r17
     6f4:	0f 91       	pop	r16
    eeprom_read_block( buf, (void *)((uint8_t *)eeprom_start + offset), len );
     6f6:	0c 94 7f 34 	jmp	0x68fe	; 0x68fe <eeprom_read_block>

000006fa <_ZN18usb_keyboard_class14write_scancodeEj.isra.18>:
        }
        void end(void) {}

        void write_scancode( uint16_t k1 )
        {
            if ( k1 ) push_key( k1 );
     6fa:	00 97       	sbiw	r24, 0x00	; 0
     6fc:	11 f0       	breq	.+4      	; 0x702 <_ZN18usb_keyboard_class14write_scancodeEj.isra.18+0x8>
     6fe:	0c 94 a2 25 	jmp	0x4b44	; 0x4b44 <push_key>
        }
     702:	08 95       	ret

00000704 <_ZN15navputter_class10clear_menuEv.isra.25.constprop.30>:
        m_cur_menu = menu;       
        m_cur_menu->begin();
        m_cur_menu->usage();
    }

    void clear_menu(void)
     704:	cf 93       	push	r28
     706:	df 93       	push	r29
    {
        m_cur_menu->end();
     708:	c5 e6       	ldi	r28, 0x65	; 101
     70a:	d3 e0       	ldi	r29, 0x03	; 3
     70c:	88 81       	ld	r24, Y
     70e:	99 81       	ldd	r25, Y+1	; 0x01
     710:	dc 01       	movw	r26, r24
     712:	ed 91       	ld	r30, X+
     714:	fc 91       	ld	r31, X
     716:	02 80       	ldd	r0, Z+2	; 0x02
     718:	f3 81       	ldd	r31, Z+3	; 0x03
     71a:	e0 2d       	mov	r30, r0
     71c:	09 95       	icall
        m_cur_menu=NULL;
     71e:	19 82       	std	Y+1, r1	; 0x01
     720:	18 82       	st	Y, r1
    }
     722:	df 91       	pop	r29
     724:	cf 91       	pop	r28
     726:	08 95       	ret

00000728 <_ZN22navputter_serial_class5printEPKcz>:
        int print( const char *str, ... )
     728:	0f 93       	push	r16
     72a:	1f 93       	push	r17
     72c:	cf 93       	push	r28
     72e:	df 93       	push	r29
     730:	cd b7       	in	r28, 0x3d	; 61
     732:	de b7       	in	r29, 0x3e	; 62
     734:	0f 81       	ldd	r16, Y+7	; 0x07
     736:	18 85       	ldd	r17, Y+8	; 0x08
            vsprintf( (char *)global_tmp_buf, str, args);
     738:	ae 01       	movw	r20, r28
     73a:	45 5f       	subi	r20, 0xF5	; 245
     73c:	5f 4f       	sbci	r21, 0xFF	; 255
     73e:	69 85       	ldd	r22, Y+9	; 0x09
     740:	7a 85       	ldd	r23, Y+10	; 0x0a
     742:	84 ec       	ldi	r24, 0xC4	; 196
     744:	98 e0       	ldi	r25, 0x08	; 8
     746:	0e 94 18 32 	call	0x6430	; 0x6430 <vsprintf>
            return write( (char *)global_tmp_buf);
     74a:	d8 01       	movw	r26, r16
     74c:	ed 91       	ld	r30, X+
     74e:	fc 91       	ld	r31, X
     750:	01 90       	ld	r0, Z+
     752:	f0 81       	ld	r31, Z
     754:	e0 2d       	mov	r30, r0
     756:	64 ec       	ldi	r22, 0xC4	; 196
     758:	78 e0       	ldi	r23, 0x08	; 8
     75a:	c8 01       	movw	r24, r16
     75c:	09 95       	icall
        }
     75e:	df 91       	pop	r29
     760:	cf 91       	pop	r28
     762:	1f 91       	pop	r17
     764:	0f 91       	pop	r16
     766:	08 95       	ret

00000768 <_ZN27navputter_eeprom_menu_class5usageEv>:
{
     768:	cf 92       	push	r12
     76a:	df 92       	push	r13
     76c:	ef 92       	push	r14
     76e:	ff 92       	push	r15
     770:	0f 93       	push	r16
     772:	1f 93       	push	r17
     774:	cf 93       	push	r28
     776:	df 93       	push	r29
    SERIAL.print("EEPROM Settings:%s", EOLN);
     778:	c3 e3       	ldi	r28, 0x33	; 51
     77a:	d4 e0       	ldi	r29, 0x04	; 4
     77c:	df 93       	push	r29
     77e:	cf 93       	push	r28
     780:	85 e7       	ldi	r24, 0x75	; 117
     782:	94 e0       	ldi	r25, 0x04	; 4
     784:	9f 93       	push	r25
     786:	8f 93       	push	r24
     788:	0a e1       	ldi	r16, 0x1A	; 26
     78a:	11 e0       	ldi	r17, 0x01	; 1
     78c:	1f 93       	push	r17
     78e:	0f 93       	push	r16
     790:	cb df       	rcall	.-106    	; 0x728 <_ZN22navputter_serial_class5printEPKcz>
    SERIAL.print("CMD %-15s %-8s%s", "Field", "Value", EOLN );
     792:	df 93       	push	r29
     794:	cf 93       	push	r28
     796:	88 e8       	ldi	r24, 0x88	; 136
     798:	94 e0       	ldi	r25, 0x04	; 4
     79a:	9f 93       	push	r25
     79c:	8f 93       	push	r24
     79e:	8e e8       	ldi	r24, 0x8E	; 142
     7a0:	94 e0       	ldi	r25, 0x04	; 4
     7a2:	9f 93       	push	r25
     7a4:	8f 93       	push	r24
     7a6:	84 e9       	ldi	r24, 0x94	; 148
     7a8:	94 e0       	ldi	r25, 0x04	; 4
     7aa:	9f 93       	push	r25
     7ac:	8f 93       	push	r24
     7ae:	1f 93       	push	r17
     7b0:	0f 93       	push	r16
     7b2:	ba df       	rcall	.-140    	; 0x728 <_ZN22navputter_serial_class5printEPKcz>
        _EEPROM_DESC_
     7b4:	df 93       	push	r29
     7b6:	cf 93       	push	r28
     7b8:	e7 e6       	ldi	r30, 0x67	; 103
     7ba:	f3 e0       	ldi	r31, 0x03	; 3
     7bc:	81 81       	ldd	r24, Z+1	; 0x01
     7be:	8f 93       	push	r24
     7c0:	80 81       	ld	r24, Z
     7c2:	8f 93       	push	r24
     7c4:	85 ea       	ldi	r24, 0xA5	; 165
     7c6:	94 e0       	ldi	r25, 0x04	; 4
     7c8:	9f 93       	push	r25
     7ca:	8f 93       	push	r24
     7cc:	1f 92       	push	r1
     7ce:	86 e7       	ldi	r24, 0x76	; 118
     7d0:	8f 93       	push	r24
     7d2:	8d ea       	ldi	r24, 0xAD	; 173
     7d4:	c8 2e       	mov	r12, r24
     7d6:	84 e0       	ldi	r24, 0x04	; 4
     7d8:	d8 2e       	mov	r13, r24
     7da:	df 92       	push	r13
     7dc:	cf 92       	push	r12
     7de:	1f 93       	push	r17
     7e0:	0f 93       	push	r16
     7e2:	a2 df       	rcall	.-188    	; 0x728 <_ZN22navputter_serial_class5printEPKcz>
     7e4:	df 93       	push	r29
     7e6:	cf 93       	push	r28
     7e8:	80 91 69 03 	lds	r24, 0x0369	; 0x800369 <myputter+0x269>
     7ec:	1f 92       	push	r1
     7ee:	8f 93       	push	r24
     7f0:	80 ed       	ldi	r24, 0xD0	; 208
     7f2:	94 e0       	ldi	r25, 0x04	; 4
     7f4:	9f 93       	push	r25
     7f6:	8f 93       	push	r24
     7f8:	1f 92       	push	r1
     7fa:	82 e7       	ldi	r24, 0x72	; 114
     7fc:	8f 93       	push	r24
     7fe:	9c eb       	ldi	r25, 0xBC	; 188
     800:	e9 2e       	mov	r14, r25
     802:	94 e0       	ldi	r25, 0x04	; 4
     804:	f9 2e       	mov	r15, r25
     806:	ff 92       	push	r15
     808:	ef 92       	push	r14
     80a:	1f 93       	push	r17
     80c:	0f 93       	push	r16
     80e:	8c df       	rcall	.-232    	; 0x728 <_ZN22navputter_serial_class5printEPKcz>
     810:	8d b7       	in	r24, 0x3d	; 61
     812:	9e b7       	in	r25, 0x3e	; 62
     814:	88 96       	adiw	r24, 0x28	; 40
     816:	0f b6       	in	r0, 0x3f	; 63
     818:	f8 94       	cli
     81a:	9e bf       	out	0x3e, r25	; 62
     81c:	0f be       	out	0x3f, r0	; 63
     81e:	8d bf       	out	0x3d, r24	; 61
     820:	df 93       	push	r29
     822:	cf 93       	push	r28
     824:	80 91 6a 03 	lds	r24, 0x036A	; 0x80036a <myputter+0x26a>
     828:	1f 92       	push	r1
     82a:	8f 93       	push	r24
     82c:	8a ed       	ldi	r24, 0xDA	; 218
     82e:	94 e0       	ldi	r25, 0x04	; 4
     830:	9f 93       	push	r25
     832:	8f 93       	push	r24
     834:	1f 92       	push	r1
     836:	83 e6       	ldi	r24, 0x63	; 99
     838:	8f 93       	push	r24
     83a:	ff 92       	push	r15
     83c:	ef 92       	push	r14
     83e:	1f 93       	push	r17
     840:	0f 93       	push	r16
     842:	72 df       	rcall	.-284    	; 0x728 <_ZN22navputter_serial_class5printEPKcz>
     844:	df 93       	push	r29
     846:	cf 93       	push	r28
     848:	80 91 6b 03 	lds	r24, 0x036B	; 0x80036b <myputter+0x26b>
     84c:	1f 92       	push	r1
     84e:	8f 93       	push	r24
     850:	8b ec       	ldi	r24, 0xCB	; 203
     852:	94 e0       	ldi	r25, 0x04	; 4
     854:	9f 93       	push	r25
     856:	8f 93       	push	r24
     858:	1f 92       	push	r1
     85a:	86 e6       	ldi	r24, 0x66	; 102
     85c:	8f 93       	push	r24
     85e:	ff 92       	push	r15
     860:	ef 92       	push	r14
     862:	1f 93       	push	r17
     864:	0f 93       	push	r16
     866:	60 df       	rcall	.-320    	; 0x728 <_ZN22navputter_serial_class5printEPKcz>
     868:	df 93       	push	r29
     86a:	cf 93       	push	r28
     86c:	80 91 6c 03 	lds	r24, 0x036C	; 0x80036c <myputter+0x26c>
     870:	1f 92       	push	r1
     872:	8f 93       	push	r24
     874:	85 ed       	ldi	r24, 0xD5	; 213
     876:	94 e0       	ldi	r25, 0x04	; 4
     878:	9f 93       	push	r25
     87a:	8f 93       	push	r24
     87c:	1f 92       	push	r1
     87e:	8c e6       	ldi	r24, 0x6C	; 108
     880:	8f 93       	push	r24
     882:	ff 92       	push	r15
     884:	ef 92       	push	r14
     886:	1f 93       	push	r17
     888:	0f 93       	push	r16
     88a:	4e df       	rcall	.-356    	; 0x728 <_ZN22navputter_serial_class5printEPKcz>
     88c:	8d b7       	in	r24, 0x3d	; 61
     88e:	9e b7       	in	r25, 0x3e	; 62
     890:	84 96       	adiw	r24, 0x24	; 36
     892:	0f b6       	in	r0, 0x3f	; 63
     894:	f8 94       	cli
     896:	9e bf       	out	0x3e, r25	; 62
     898:	0f be       	out	0x3f, r0	; 63
     89a:	8d bf       	out	0x3d, r24	; 61
     89c:	df 93       	push	r29
     89e:	cf 93       	push	r28
     8a0:	80 91 6d 03 	lds	r24, 0x036D	; 0x80036d <myputter+0x26d>
     8a4:	1f 92       	push	r1
     8a6:	8f 93       	push	r24
     8a8:	8f ed       	ldi	r24, 0xDF	; 223
     8aa:	94 e0       	ldi	r25, 0x04	; 4
     8ac:	9f 93       	push	r25
     8ae:	8f 93       	push	r24
     8b0:	1f 92       	push	r1
     8b2:	83 e7       	ldi	r24, 0x73	; 115
     8b4:	8f 93       	push	r24
     8b6:	ff 92       	push	r15
     8b8:	ef 92       	push	r14
     8ba:	1f 93       	push	r17
     8bc:	0f 93       	push	r16
     8be:	34 df       	rcall	.-408    	; 0x728 <_ZN22navputter_serial_class5printEPKcz>
     8c0:	df 93       	push	r29
     8c2:	cf 93       	push	r28
     8c4:	80 91 6e 03 	lds	r24, 0x036E	; 0x80036e <myputter+0x26e>
     8c8:	1f 92       	push	r1
     8ca:	8f 93       	push	r24
     8cc:	8a ee       	ldi	r24, 0xEA	; 234
     8ce:	94 e0       	ldi	r25, 0x04	; 4
     8d0:	9f 93       	push	r25
     8d2:	8f 93       	push	r24
     8d4:	1f 92       	push	r1
     8d6:	8b e6       	ldi	r24, 0x6B	; 107
     8d8:	8f 93       	push	r24
     8da:	ff 92       	push	r15
     8dc:	ef 92       	push	r14
     8de:	1f 93       	push	r17
     8e0:	0f 93       	push	r16
     8e2:	22 df       	rcall	.-444    	; 0x728 <_ZN22navputter_serial_class5printEPKcz>
     8e4:	df 93       	push	r29
     8e6:	cf 93       	push	r28
     8e8:	ef e6       	ldi	r30, 0x6F	; 111
     8ea:	f3 e0       	ldi	r31, 0x03	; 3
     8ec:	81 81       	ldd	r24, Z+1	; 0x01
     8ee:	8f 93       	push	r24
     8f0:	80 81       	ld	r24, Z
     8f2:	8f 93       	push	r24
     8f4:	83 ef       	ldi	r24, 0xF3	; 243
     8f6:	94 e0       	ldi	r25, 0x04	; 4
     8f8:	9f 93       	push	r25
     8fa:	8f 93       	push	r24
     8fc:	1f 92       	push	r1
     8fe:	88 e7       	ldi	r24, 0x78	; 120
     900:	8f 93       	push	r24
     902:	ff 92       	push	r15
     904:	ef 92       	push	r14
     906:	1f 93       	push	r17
     908:	0f 93       	push	r16
     90a:	0e df       	rcall	.-484    	; 0x728 <_ZN22navputter_serial_class5printEPKcz>
     90c:	8d b7       	in	r24, 0x3d	; 61
     90e:	9e b7       	in	r25, 0x3e	; 62
     910:	84 96       	adiw	r24, 0x24	; 36
     912:	0f b6       	in	r0, 0x3f	; 63
     914:	f8 94       	cli
     916:	9e bf       	out	0x3e, r25	; 62
     918:	0f be       	out	0x3f, r0	; 63
     91a:	8d bf       	out	0x3d, r24	; 61
     91c:	df 93       	push	r29
     91e:	cf 93       	push	r28
     920:	e1 e7       	ldi	r30, 0x71	; 113
     922:	f3 e0       	ldi	r31, 0x03	; 3
     924:	81 81       	ldd	r24, Z+1	; 0x01
     926:	8f 93       	push	r24
     928:	80 81       	ld	r24, Z
     92a:	8f 93       	push	r24
     92c:	8c ef       	ldi	r24, 0xFC	; 252
     92e:	94 e0       	ldi	r25, 0x04	; 4
     930:	9f 93       	push	r25
     932:	8f 93       	push	r24
     934:	1f 92       	push	r1
     936:	89 e7       	ldi	r24, 0x79	; 121
     938:	8f 93       	push	r24
     93a:	ff 92       	push	r15
     93c:	ef 92       	push	r14
     93e:	1f 93       	push	r17
     940:	0f 93       	push	r16
     942:	f2 de       	rcall	.-540    	; 0x728 <_ZN22navputter_serial_class5printEPKcz>
     944:	df 93       	push	r29
     946:	cf 93       	push	r28
     948:	80 91 73 03 	lds	r24, 0x0373	; 0x800373 <myputter+0x273>
     94c:	1f 92       	push	r1
     94e:	8f 93       	push	r24
     950:	85 e0       	ldi	r24, 0x05	; 5
     952:	95 e0       	ldi	r25, 0x05	; 5
     954:	9f 93       	push	r25
     956:	8f 93       	push	r24
     958:	1f 92       	push	r1
     95a:	8d e6       	ldi	r24, 0x6D	; 109
     95c:	8f 93       	push	r24
     95e:	ff 92       	push	r15
     960:	ef 92       	push	r14
     962:	1f 93       	push	r17
     964:	0f 93       	push	r16
     966:	e0 de       	rcall	.-576    	; 0x728 <_ZN22navputter_serial_class5printEPKcz>
     968:	df 93       	push	r29
     96a:	cf 93       	push	r28
     96c:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <myputter+0x274>
     970:	1f 92       	push	r1
     972:	8f 93       	push	r24
     974:	80 e1       	ldi	r24, 0x10	; 16
     976:	95 e0       	ldi	r25, 0x05	; 5
     978:	9f 93       	push	r25
     97a:	8f 93       	push	r24
     97c:	1f 92       	push	r1
     97e:	8b e4       	ldi	r24, 0x4B	; 75
     980:	8f 93       	push	r24
     982:	ff 92       	push	r15
     984:	ef 92       	push	r14
     986:	1f 93       	push	r17
     988:	0f 93       	push	r16
     98a:	ce de       	rcall	.-612    	; 0x728 <_ZN22navputter_serial_class5printEPKcz>
     98c:	8d b7       	in	r24, 0x3d	; 61
     98e:	9e b7       	in	r25, 0x3e	; 62
     990:	84 96       	adiw	r24, 0x24	; 36
     992:	0f b6       	in	r0, 0x3f	; 63
     994:	f8 94       	cli
     996:	9e bf       	out	0x3e, r25	; 62
     998:	0f be       	out	0x3f, r0	; 63
     99a:	8d bf       	out	0x3d, r24	; 61
     99c:	df 93       	push	r29
     99e:	cf 93       	push	r28
     9a0:	80 91 75 03 	lds	r24, 0x0375	; 0x800375 <myputter+0x275>
     9a4:	1f 92       	push	r1
     9a6:	8f 93       	push	r24
     9a8:	8b e1       	ldi	r24, 0x1B	; 27
     9aa:	95 e0       	ldi	r25, 0x05	; 5
     9ac:	9f 93       	push	r25
     9ae:	8f 93       	push	r24
     9b0:	1f 92       	push	r1
     9b2:	84 e6       	ldi	r24, 0x64	; 100
     9b4:	8f 93       	push	r24
     9b6:	df 92       	push	r13
     9b8:	cf 92       	push	r12
     9ba:	1f 93       	push	r17
     9bc:	0f 93       	push	r16
    SERIAL.print("q) quit.%s", EOLN);
     9be:	b4 de       	rcall	.-664    	; 0x728 <_ZN22navputter_serial_class5printEPKcz>
     9c0:	df 93       	push	r29
     9c2:	cf 93       	push	r28
     9c4:	8a e2       	ldi	r24, 0x2A	; 42
     9c6:	95 e0       	ldi	r25, 0x05	; 5
     9c8:	9f 93       	push	r25
     9ca:	8f 93       	push	r24
     9cc:	1f 93       	push	r17
     9ce:	0f 93       	push	r16
    SERIAL.print("%s%sCMD:", EOLN,EOLN);
     9d0:	ab de       	rcall	.-682    	; 0x728 <_ZN22navputter_serial_class5printEPKcz>
     9d2:	df 93       	push	r29
     9d4:	cf 93       	push	r28
     9d6:	df 93       	push	r29
     9d8:	cf 93       	push	r28
     9da:	85 e3       	ldi	r24, 0x35	; 53
     9dc:	95 e0       	ldi	r25, 0x05	; 5
     9de:	9f 93       	push	r25
     9e0:	8f 93       	push	r24
     9e2:	1f 93       	push	r17
     9e4:	0f 93       	push	r16
     9e6:	a0 de       	rcall	.-704    	; 0x728 <_ZN22navputter_serial_class5printEPKcz>
}
     9e8:	8d b7       	in	r24, 0x3d	; 61
     9ea:	9e b7       	in	r25, 0x3e	; 62
     9ec:	4a 96       	adiw	r24, 0x1a	; 26
     9ee:	0f b6       	in	r0, 0x3f	; 63
     9f0:	f8 94       	cli
     9f2:	9e bf       	out	0x3e, r25	; 62
     9f4:	0f be       	out	0x3f, r0	; 63
     9f6:	8d bf       	out	0x3d, r24	; 61
     9f8:	df 91       	pop	r29
     9fa:	cf 91       	pop	r28
     9fc:	1f 91       	pop	r17
     9fe:	0f 91       	pop	r16
     a00:	ff 90       	pop	r15
     a02:	ef 90       	pop	r14
     a04:	df 90       	pop	r13
     a06:	cf 90       	pop	r12
     a08:	08 95       	ret

00000a0a <_ZN25navputter_gpio_menu_class5usageEv>:
{
     a0a:	cf 93       	push	r28
     a0c:	df 93       	push	r29
    SERIAL.print("%sGPIO Menu:%s", EOLN, EOLN);
     a0e:	83 e3       	ldi	r24, 0x33	; 51
     a10:	94 e0       	ldi	r25, 0x04	; 4
     a12:	9f 93       	push	r25
     a14:	8f 93       	push	r24
     a16:	9f 93       	push	r25
     a18:	8f 93       	push	r24
     a1a:	8e e3       	ldi	r24, 0x3E	; 62
     a1c:	95 e0       	ldi	r25, 0x05	; 5
     a1e:	9f 93       	push	r25
     a20:	8f 93       	push	r24
     a22:	8a e1       	ldi	r24, 0x1A	; 26
     a24:	91 e0       	ldi	r25, 0x01	; 1
     a26:	9f 93       	push	r25
     a28:	8f 93       	push	r24
     a2a:	7e de       	rcall	.-772    	; 0x728 <_ZN22navputter_serial_class5printEPKcz>
        GPIO_MENU
     a2c:	6d e4       	ldi	r22, 0x4D	; 77
     a2e:	75 e0       	ldi	r23, 0x05	; 5
     a30:	8a e1       	ldi	r24, 0x1A	; 26
     a32:	91 e0       	ldi	r25, 0x01	; 1
     a34:	14 de       	rcall	.-984    	; 0x65e <_ZN16usb_serial_class5writeEPKc>
     a36:	c0 e0       	ldi	r28, 0x00	; 0
     a38:	d1 e0       	ldi	r29, 0x01	; 1
            fputc(c, m_stream);
     a3a:	6e a5       	ldd	r22, Y+46	; 0x2e
     a3c:	7f a5       	ldd	r23, Y+47	; 0x2f
     a3e:	84 e6       	ldi	r24, 0x64	; 100
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	0e 94 c3 31 	call	0x6386	; 0x6386 <fputc>
     a46:	6f e4       	ldi	r22, 0x4F	; 79
     a48:	75 e0       	ldi	r23, 0x05	; 5
     a4a:	8a e1       	ldi	r24, 0x1A	; 26
     a4c:	91 e0       	ldi	r25, 0x01	; 1
     a4e:	07 de       	rcall	.-1010   	; 0x65e <_ZN16usb_serial_class5writeEPKc>
     a50:	68 e5       	ldi	r22, 0x58	; 88
     a52:	75 e0       	ldi	r23, 0x05	; 5
     a54:	8a e1       	ldi	r24, 0x1A	; 26
     a56:	91 e0       	ldi	r25, 0x01	; 1
     a58:	02 de       	rcall	.-1020   	; 0x65e <_ZN16usb_serial_class5writeEPKc>
     a5a:	63 e3       	ldi	r22, 0x33	; 51
     a5c:	74 e0       	ldi	r23, 0x04	; 4
     a5e:	8a e1       	ldi	r24, 0x1A	; 26
     a60:	91 e0       	ldi	r25, 0x01	; 1
     a62:	fd dd       	rcall	.-1030   	; 0x65e <_ZN16usb_serial_class5writeEPKc>
     a64:	6d e4       	ldi	r22, 0x4D	; 77
     a66:	75 e0       	ldi	r23, 0x05	; 5
     a68:	8a e1       	ldi	r24, 0x1A	; 26
     a6a:	91 e0       	ldi	r25, 0x01	; 1
     a6c:	f8 dd       	rcall	.-1040   	; 0x65e <_ZN16usb_serial_class5writeEPKc>
     a6e:	6e a5       	ldd	r22, Y+46	; 0x2e
     a70:	7f a5       	ldd	r23, Y+47	; 0x2f
     a72:	83 e5       	ldi	r24, 0x53	; 83
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	0e 94 c3 31 	call	0x6386	; 0x6386 <fputc>
     a7a:	6f e4       	ldi	r22, 0x4F	; 79
     a7c:	75 e0       	ldi	r23, 0x05	; 5
     a7e:	8a e1       	ldi	r24, 0x1A	; 26
     a80:	91 e0       	ldi	r25, 0x01	; 1
     a82:	ed dd       	rcall	.-1062   	; 0x65e <_ZN16usb_serial_class5writeEPKc>
     a84:	68 e5       	ldi	r22, 0x58	; 88
     a86:	75 e0       	ldi	r23, 0x05	; 5
     a88:	8a e1       	ldi	r24, 0x1A	; 26
     a8a:	91 e0       	ldi	r25, 0x01	; 1
     a8c:	e8 dd       	rcall	.-1072   	; 0x65e <_ZN16usb_serial_class5writeEPKc>
     a8e:	63 e3       	ldi	r22, 0x33	; 51
     a90:	74 e0       	ldi	r23, 0x04	; 4
     a92:	8a e1       	ldi	r24, 0x1A	; 26
     a94:	91 e0       	ldi	r25, 0x01	; 1
     a96:	e3 dd       	rcall	.-1082   	; 0x65e <_ZN16usb_serial_class5writeEPKc>
     a98:	6d e4       	ldi	r22, 0x4D	; 77
     a9a:	75 e0       	ldi	r23, 0x05	; 5
     a9c:	8a e1       	ldi	r24, 0x1A	; 26
     a9e:	91 e0       	ldi	r25, 0x01	; 1
     aa0:	de dd       	rcall	.-1092   	; 0x65e <_ZN16usb_serial_class5writeEPKc>
     aa2:	6e a5       	ldd	r22, Y+46	; 0x2e
     aa4:	7f a5       	ldd	r23, Y+47	; 0x2f
     aa6:	83 e4       	ldi	r24, 0x43	; 67
     aa8:	90 e0       	ldi	r25, 0x00	; 0
     aaa:	0e 94 c3 31 	call	0x6386	; 0x6386 <fputc>
     aae:	6f e4       	ldi	r22, 0x4F	; 79
     ab0:	75 e0       	ldi	r23, 0x05	; 5
     ab2:	8a e1       	ldi	r24, 0x1A	; 26
     ab4:	91 e0       	ldi	r25, 0x01	; 1
     ab6:	d3 dd       	rcall	.-1114   	; 0x65e <_ZN16usb_serial_class5writeEPKc>
     ab8:	68 e5       	ldi	r22, 0x58	; 88
     aba:	75 e0       	ldi	r23, 0x05	; 5
     abc:	8a e1       	ldi	r24, 0x1A	; 26
     abe:	91 e0       	ldi	r25, 0x01	; 1
     ac0:	ce dd       	rcall	.-1124   	; 0x65e <_ZN16usb_serial_class5writeEPKc>
     ac2:	63 e3       	ldi	r22, 0x33	; 51
     ac4:	74 e0       	ldi	r23, 0x04	; 4
     ac6:	8a e1       	ldi	r24, 0x1A	; 26
     ac8:	91 e0       	ldi	r25, 0x01	; 1
     aca:	c9 dd       	rcall	.-1134   	; 0x65e <_ZN16usb_serial_class5writeEPKc>
     acc:	6d e4       	ldi	r22, 0x4D	; 77
     ace:	75 e0       	ldi	r23, 0x05	; 5
     ad0:	8a e1       	ldi	r24, 0x1A	; 26
     ad2:	91 e0       	ldi	r25, 0x01	; 1
     ad4:	c4 dd       	rcall	.-1144   	; 0x65e <_ZN16usb_serial_class5writeEPKc>
     ad6:	6e a5       	ldd	r22, Y+46	; 0x2e
     ad8:	7f a5       	ldd	r23, Y+47	; 0x2f
     ada:	89 e6       	ldi	r24, 0x69	; 105
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	0e 94 c3 31 	call	0x6386	; 0x6386 <fputc>
     ae2:	6f e4       	ldi	r22, 0x4F	; 79
     ae4:	75 e0       	ldi	r23, 0x05	; 5
     ae6:	8a e1       	ldi	r24, 0x1A	; 26
     ae8:	91 e0       	ldi	r25, 0x01	; 1
     aea:	b9 dd       	rcall	.-1166   	; 0x65e <_ZN16usb_serial_class5writeEPKc>
     aec:	63 e3       	ldi	r22, 0x33	; 51
     aee:	74 e0       	ldi	r23, 0x04	; 4
     af0:	8a e1       	ldi	r24, 0x1A	; 26
     af2:	91 e0       	ldi	r25, 0x01	; 1
     af4:	b4 dd       	rcall	.-1176   	; 0x65e <_ZN16usb_serial_class5writeEPKc>
     af6:	6d e4       	ldi	r22, 0x4D	; 77
     af8:	75 e0       	ldi	r23, 0x05	; 5
     afa:	8a e1       	ldi	r24, 0x1A	; 26
     afc:	91 e0       	ldi	r25, 0x01	; 1
     afe:	af dd       	rcall	.-1186   	; 0x65e <_ZN16usb_serial_class5writeEPKc>
     b00:	6e a5       	ldd	r22, Y+46	; 0x2e
     b02:	7f a5       	ldd	r23, Y+47	; 0x2f
     b04:	89 e4       	ldi	r24, 0x49	; 73
     b06:	90 e0       	ldi	r25, 0x00	; 0
     b08:	0e 94 c3 31 	call	0x6386	; 0x6386 <fputc>
     b0c:	6f e4       	ldi	r22, 0x4F	; 79
     b0e:	75 e0       	ldi	r23, 0x05	; 5
     b10:	8a e1       	ldi	r24, 0x1A	; 26
     b12:	91 e0       	ldi	r25, 0x01	; 1
     b14:	a4 dd       	rcall	.-1208   	; 0x65e <_ZN16usb_serial_class5writeEPKc>
     b16:	68 e5       	ldi	r22, 0x58	; 88
     b18:	75 e0       	ldi	r23, 0x05	; 5
     b1a:	8a e1       	ldi	r24, 0x1A	; 26
     b1c:	91 e0       	ldi	r25, 0x01	; 1
     b1e:	9f dd       	rcall	.-1218   	; 0x65e <_ZN16usb_serial_class5writeEPKc>
     b20:	63 e3       	ldi	r22, 0x33	; 51
     b22:	74 e0       	ldi	r23, 0x04	; 4
     b24:	8a e1       	ldi	r24, 0x1A	; 26
     b26:	91 e0       	ldi	r25, 0x01	; 1
     b28:	9a dd       	rcall	.-1228   	; 0x65e <_ZN16usb_serial_class5writeEPKc>
     b2a:	6d e4       	ldi	r22, 0x4D	; 77
     b2c:	75 e0       	ldi	r23, 0x05	; 5
     b2e:	8a e1       	ldi	r24, 0x1A	; 26
     b30:	91 e0       	ldi	r25, 0x01	; 1
     b32:	95 dd       	rcall	.-1238   	; 0x65e <_ZN16usb_serial_class5writeEPKc>
     b34:	6e a5       	ldd	r22, Y+46	; 0x2e
     b36:	7f a5       	ldd	r23, Y+47	; 0x2f
     b38:	82 e6       	ldi	r24, 0x62	; 98
     b3a:	90 e0       	ldi	r25, 0x00	; 0
     b3c:	0e 94 c3 31 	call	0x6386	; 0x6386 <fputc>
     b40:	6f e4       	ldi	r22, 0x4F	; 79
     b42:	75 e0       	ldi	r23, 0x05	; 5
     b44:	8a e1       	ldi	r24, 0x1A	; 26
     b46:	91 e0       	ldi	r25, 0x01	; 1
     b48:	8a dd       	rcall	.-1260   	; 0x65e <_ZN16usb_serial_class5writeEPKc>
     b4a:	68 e5       	ldi	r22, 0x58	; 88
     b4c:	75 e0       	ldi	r23, 0x05	; 5
     b4e:	8a e1       	ldi	r24, 0x1A	; 26
     b50:	91 e0       	ldi	r25, 0x01	; 1
     b52:	85 dd       	rcall	.-1270   	; 0x65e <_ZN16usb_serial_class5writeEPKc>
     b54:	63 e3       	ldi	r22, 0x33	; 51
     b56:	74 e0       	ldi	r23, 0x04	; 4
     b58:	8a e1       	ldi	r24, 0x1A	; 26
     b5a:	91 e0       	ldi	r25, 0x01	; 1
     b5c:	80 dd       	rcall	.-1280   	; 0x65e <_ZN16usb_serial_class5writeEPKc>
     b5e:	6d e4       	ldi	r22, 0x4D	; 77
     b60:	75 e0       	ldi	r23, 0x05	; 5
     b62:	8a e1       	ldi	r24, 0x1A	; 26
     b64:	91 e0       	ldi	r25, 0x01	; 1
     b66:	7b dd       	rcall	.-1290   	; 0x65e <_ZN16usb_serial_class5writeEPKc>
     b68:	6e a5       	ldd	r22, Y+46	; 0x2e
     b6a:	7f a5       	ldd	r23, Y+47	; 0x2f
     b6c:	8f e6       	ldi	r24, 0x6F	; 111
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	0e 94 c3 31 	call	0x6386	; 0x6386 <fputc>
     b74:	6f e4       	ldi	r22, 0x4F	; 79
     b76:	75 e0       	ldi	r23, 0x05	; 5
     b78:	8a e1       	ldi	r24, 0x1A	; 26
     b7a:	91 e0       	ldi	r25, 0x01	; 1
     b7c:	70 dd       	rcall	.-1312   	; 0x65e <_ZN16usb_serial_class5writeEPKc>
     b7e:	68 e5       	ldi	r22, 0x58	; 88
     b80:	75 e0       	ldi	r23, 0x05	; 5
     b82:	8a e1       	ldi	r24, 0x1A	; 26
     b84:	91 e0       	ldi	r25, 0x01	; 1
     b86:	6b dd       	rcall	.-1322   	; 0x65e <_ZN16usb_serial_class5writeEPKc>
     b88:	63 e3       	ldi	r22, 0x33	; 51
     b8a:	74 e0       	ldi	r23, 0x04	; 4
     b8c:	8a e1       	ldi	r24, 0x1A	; 26
     b8e:	91 e0       	ldi	r25, 0x01	; 1
     b90:	66 dd       	rcall	.-1332   	; 0x65e <_ZN16usb_serial_class5writeEPKc>
     b92:	6d e4       	ldi	r22, 0x4D	; 77
     b94:	75 e0       	ldi	r23, 0x05	; 5
     b96:	8a e1       	ldi	r24, 0x1A	; 26
     b98:	91 e0       	ldi	r25, 0x01	; 1
     b9a:	61 dd       	rcall	.-1342   	; 0x65e <_ZN16usb_serial_class5writeEPKc>
     b9c:	6e a5       	ldd	r22, Y+46	; 0x2e
     b9e:	7f a5       	ldd	r23, Y+47	; 0x2f
     ba0:	8e e5       	ldi	r24, 0x5E	; 94
     ba2:	90 e0       	ldi	r25, 0x00	; 0
     ba4:	0e 94 c3 31 	call	0x6386	; 0x6386 <fputc>
     ba8:	6f e4       	ldi	r22, 0x4F	; 79
     baa:	75 e0       	ldi	r23, 0x05	; 5
     bac:	8a e1       	ldi	r24, 0x1A	; 26
     bae:	91 e0       	ldi	r25, 0x01	; 1
     bb0:	56 dd       	rcall	.-1364   	; 0x65e <_ZN16usb_serial_class5writeEPKc>
     bb2:	68 e5       	ldi	r22, 0x58	; 88
     bb4:	75 e0       	ldi	r23, 0x05	; 5
     bb6:	8a e1       	ldi	r24, 0x1A	; 26
     bb8:	91 e0       	ldi	r25, 0x01	; 1
     bba:	51 dd       	rcall	.-1374   	; 0x65e <_ZN16usb_serial_class5writeEPKc>
     bbc:	63 e3       	ldi	r22, 0x33	; 51
     bbe:	74 e0       	ldi	r23, 0x04	; 4
     bc0:	8a e1       	ldi	r24, 0x1A	; 26
     bc2:	91 e0       	ldi	r25, 0x01	; 1
     bc4:	4c dd       	rcall	.-1384   	; 0x65e <_ZN16usb_serial_class5writeEPKc>
     bc6:	6d e4       	ldi	r22, 0x4D	; 77
     bc8:	75 e0       	ldi	r23, 0x05	; 5
     bca:	8a e1       	ldi	r24, 0x1A	; 26
     bcc:	91 e0       	ldi	r25, 0x01	; 1
     bce:	47 dd       	rcall	.-1394   	; 0x65e <_ZN16usb_serial_class5writeEPKc>
     bd0:	6e a5       	ldd	r22, Y+46	; 0x2e
     bd2:	7f a5       	ldd	r23, Y+47	; 0x2f
     bd4:	86 e2       	ldi	r24, 0x26	; 38
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	0e 94 c3 31 	call	0x6386	; 0x6386 <fputc>
     bdc:	6f e4       	ldi	r22, 0x4F	; 79
     bde:	75 e0       	ldi	r23, 0x05	; 5
     be0:	8a e1       	ldi	r24, 0x1A	; 26
     be2:	91 e0       	ldi	r25, 0x01	; 1
     be4:	3c dd       	rcall	.-1416   	; 0x65e <_ZN16usb_serial_class5writeEPKc>
     be6:	68 e5       	ldi	r22, 0x58	; 88
     be8:	75 e0       	ldi	r23, 0x05	; 5
     bea:	8a e1       	ldi	r24, 0x1A	; 26
     bec:	91 e0       	ldi	r25, 0x01	; 1
     bee:	37 dd       	rcall	.-1426   	; 0x65e <_ZN16usb_serial_class5writeEPKc>
     bf0:	63 e3       	ldi	r22, 0x33	; 51
     bf2:	74 e0       	ldi	r23, 0x04	; 4
     bf4:	8a e1       	ldi	r24, 0x1A	; 26
     bf6:	91 e0       	ldi	r25, 0x01	; 1
     bf8:	32 dd       	rcall	.-1436   	; 0x65e <_ZN16usb_serial_class5writeEPKc>
     bfa:	6d e4       	ldi	r22, 0x4D	; 77
     bfc:	75 e0       	ldi	r23, 0x05	; 5
     bfe:	8a e1       	ldi	r24, 0x1A	; 26
     c00:	91 e0       	ldi	r25, 0x01	; 1
     c02:	2d dd       	rcall	.-1446   	; 0x65e <_ZN16usb_serial_class5writeEPKc>
     c04:	6e a5       	ldd	r22, Y+46	; 0x2e
     c06:	7f a5       	ldd	r23, Y+47	; 0x2f
     c08:	8c e7       	ldi	r24, 0x7C	; 124
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	0e 94 c3 31 	call	0x6386	; 0x6386 <fputc>
     c10:	6f e4       	ldi	r22, 0x4F	; 79
     c12:	75 e0       	ldi	r23, 0x05	; 5
     c14:	8a e1       	ldi	r24, 0x1A	; 26
     c16:	91 e0       	ldi	r25, 0x01	; 1
     c18:	22 dd       	rcall	.-1468   	; 0x65e <_ZN16usb_serial_class5writeEPKc>
     c1a:	68 e5       	ldi	r22, 0x58	; 88
     c1c:	75 e0       	ldi	r23, 0x05	; 5
     c1e:	8a e1       	ldi	r24, 0x1A	; 26
     c20:	91 e0       	ldi	r25, 0x01	; 1
     c22:	1d dd       	rcall	.-1478   	; 0x65e <_ZN16usb_serial_class5writeEPKc>
     c24:	63 e3       	ldi	r22, 0x33	; 51
     c26:	74 e0       	ldi	r23, 0x04	; 4
     c28:	8a e1       	ldi	r24, 0x1A	; 26
     c2a:	91 e0       	ldi	r25, 0x01	; 1
     c2c:	18 dd       	rcall	.-1488   	; 0x65e <_ZN16usb_serial_class5writeEPKc>
     c2e:	6d e4       	ldi	r22, 0x4D	; 77
     c30:	75 e0       	ldi	r23, 0x05	; 5
     c32:	8a e1       	ldi	r24, 0x1A	; 26
     c34:	91 e0       	ldi	r25, 0x01	; 1
     c36:	13 dd       	rcall	.-1498   	; 0x65e <_ZN16usb_serial_class5writeEPKc>
     c38:	6e a5       	ldd	r22, Y+46	; 0x2e
     c3a:	7f a5       	ldd	r23, Y+47	; 0x2f
     c3c:	83 e7       	ldi	r24, 0x73	; 115
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	0e 94 c3 31 	call	0x6386	; 0x6386 <fputc>
     c44:	6f e4       	ldi	r22, 0x4F	; 79
     c46:	75 e0       	ldi	r23, 0x05	; 5
     c48:	8a e1       	ldi	r24, 0x1A	; 26
     c4a:	91 e0       	ldi	r25, 0x01	; 1
     c4c:	08 dd       	rcall	.-1520   	; 0x65e <_ZN16usb_serial_class5writeEPKc>
     c4e:	68 e5       	ldi	r22, 0x58	; 88
     c50:	75 e0       	ldi	r23, 0x05	; 5
     c52:	8a e1       	ldi	r24, 0x1A	; 26
     c54:	91 e0       	ldi	r25, 0x01	; 1
     c56:	03 dd       	rcall	.-1530   	; 0x65e <_ZN16usb_serial_class5writeEPKc>
     c58:	63 e3       	ldi	r22, 0x33	; 51
     c5a:	74 e0       	ldi	r23, 0x04	; 4
     c5c:	8a e1       	ldi	r24, 0x1A	; 26
     c5e:	91 e0       	ldi	r25, 0x01	; 1
     c60:	fe dc       	rcall	.-1540   	; 0x65e <_ZN16usb_serial_class5writeEPKc>
     c62:	6d e4       	ldi	r22, 0x4D	; 77
     c64:	75 e0       	ldi	r23, 0x05	; 5
     c66:	8a e1       	ldi	r24, 0x1A	; 26
     c68:	91 e0       	ldi	r25, 0x01	; 1
     c6a:	f9 dc       	rcall	.-1550   	; 0x65e <_ZN16usb_serial_class5writeEPKc>
     c6c:	6e a5       	ldd	r22, Y+46	; 0x2e
     c6e:	7f a5       	ldd	r23, Y+47	; 0x2f
     c70:	83 e6       	ldi	r24, 0x63	; 99
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	0e 94 c3 31 	call	0x6386	; 0x6386 <fputc>
     c78:	6f e4       	ldi	r22, 0x4F	; 79
     c7a:	75 e0       	ldi	r23, 0x05	; 5
     c7c:	8a e1       	ldi	r24, 0x1A	; 26
     c7e:	91 e0       	ldi	r25, 0x01	; 1
     c80:	ee dc       	rcall	.-1572   	; 0x65e <_ZN16usb_serial_class5writeEPKc>
     c82:	68 e5       	ldi	r22, 0x58	; 88
     c84:	75 e0       	ldi	r23, 0x05	; 5
     c86:	8a e1       	ldi	r24, 0x1A	; 26
     c88:	91 e0       	ldi	r25, 0x01	; 1
     c8a:	e9 dc       	rcall	.-1582   	; 0x65e <_ZN16usb_serial_class5writeEPKc>
     c8c:	63 e3       	ldi	r22, 0x33	; 51
     c8e:	74 e0       	ldi	r23, 0x04	; 4
     c90:	8a e1       	ldi	r24, 0x1A	; 26
     c92:	91 e0       	ldi	r25, 0x01	; 1
     c94:	e4 dc       	rcall	.-1592   	; 0x65e <_ZN16usb_serial_class5writeEPKc>
     c96:	6d e4       	ldi	r22, 0x4D	; 77
     c98:	75 e0       	ldi	r23, 0x05	; 5
     c9a:	8a e1       	ldi	r24, 0x1A	; 26
     c9c:	91 e0       	ldi	r25, 0x01	; 1
     c9e:	df dc       	rcall	.-1602   	; 0x65e <_ZN16usb_serial_class5writeEPKc>
     ca0:	6e a5       	ldd	r22, Y+46	; 0x2e
     ca2:	7f a5       	ldd	r23, Y+47	; 0x2f
     ca4:	81 e6       	ldi	r24, 0x61	; 97
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	0e 94 c3 31 	call	0x6386	; 0x6386 <fputc>
     cac:	6f e4       	ldi	r22, 0x4F	; 79
     cae:	75 e0       	ldi	r23, 0x05	; 5
     cb0:	8a e1       	ldi	r24, 0x1A	; 26
     cb2:	91 e0       	ldi	r25, 0x01	; 1
     cb4:	d4 dc       	rcall	.-1624   	; 0x65e <_ZN16usb_serial_class5writeEPKc>
     cb6:	68 e5       	ldi	r22, 0x58	; 88
     cb8:	75 e0       	ldi	r23, 0x05	; 5
     cba:	8a e1       	ldi	r24, 0x1A	; 26
     cbc:	91 e0       	ldi	r25, 0x01	; 1
     cbe:	cf dc       	rcall	.-1634   	; 0x65e <_ZN16usb_serial_class5writeEPKc>
     cc0:	63 e3       	ldi	r22, 0x33	; 51
     cc2:	74 e0       	ldi	r23, 0x04	; 4
     cc4:	8a e1       	ldi	r24, 0x1A	; 26
     cc6:	91 e0       	ldi	r25, 0x01	; 1
     cc8:	ca dc       	rcall	.-1644   	; 0x65e <_ZN16usb_serial_class5writeEPKc>
     cca:	6d e4       	ldi	r22, 0x4D	; 77
     ccc:	75 e0       	ldi	r23, 0x05	; 5
     cce:	8a e1       	ldi	r24, 0x1A	; 26
     cd0:	91 e0       	ldi	r25, 0x01	; 1
     cd2:	c5 dc       	rcall	.-1654   	; 0x65e <_ZN16usb_serial_class5writeEPKc>
     cd4:	6e a5       	ldd	r22, Y+46	; 0x2e
     cd6:	7f a5       	ldd	r23, Y+47	; 0x2f
     cd8:	81 e4       	ldi	r24, 0x41	; 65
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	0e 94 c3 31 	call	0x6386	; 0x6386 <fputc>
     ce0:	6f e4       	ldi	r22, 0x4F	; 79
     ce2:	75 e0       	ldi	r23, 0x05	; 5
     ce4:	8a e1       	ldi	r24, 0x1A	; 26
     ce6:	91 e0       	ldi	r25, 0x01	; 1
     ce8:	ba dc       	rcall	.-1676   	; 0x65e <_ZN16usb_serial_class5writeEPKc>
     cea:	68 e5       	ldi	r22, 0x58	; 88
     cec:	75 e0       	ldi	r23, 0x05	; 5
     cee:	8a e1       	ldi	r24, 0x1A	; 26
     cf0:	91 e0       	ldi	r25, 0x01	; 1
     cf2:	b5 dc       	rcall	.-1686   	; 0x65e <_ZN16usb_serial_class5writeEPKc>
     cf4:	8d b7       	in	r24, 0x3d	; 61
     cf6:	9e b7       	in	r25, 0x3e	; 62
     cf8:	08 96       	adiw	r24, 0x08	; 8
     cfa:	0f b6       	in	r0, 0x3f	; 63
     cfc:	f8 94       	cli
     cfe:	9e bf       	out	0x3e, r25	; 62
     d00:	0f be       	out	0x3f, r0	; 63
     d02:	8d bf       	out	0x3d, r24	; 61
     d04:	63 e3       	ldi	r22, 0x33	; 51
     d06:	74 e0       	ldi	r23, 0x04	; 4
     d08:	8a e1       	ldi	r24, 0x1A	; 26
     d0a:	91 e0       	ldi	r25, 0x01	; 1
     d0c:	df 91       	pop	r29
}
     d0e:	cf 91       	pop	r28
     d10:	a6 cc       	rjmp	.-1716   	; 0x65e <_ZN16usb_serial_class5writeEPKc>

00000d12 <_ZN28navputter_keycode_menu_class5usageEv>:
        GPIO_MENU
     d12:	ef 92       	push	r14
     d14:	ff 92       	push	r15
{
     d16:	0f 93       	push	r16
     d18:	1f 93       	push	r17
     d1a:	cf 93       	push	r28
     d1c:	df 93       	push	r29
    SERIAL.print("Keycode editor.%s", EOLN);
     d1e:	03 e3       	ldi	r16, 0x33	; 51
     d20:	14 e0       	ldi	r17, 0x04	; 4
     d22:	1f 93       	push	r17
     d24:	0f 93       	push	r16
     d26:	80 e6       	ldi	r24, 0x60	; 96
     d28:	95 e0       	ldi	r25, 0x05	; 5
     d2a:	9f 93       	push	r25
     d2c:	8f 93       	push	r24
     d2e:	ca e1       	ldi	r28, 0x1A	; 26
     d30:	d1 e0       	ldi	r29, 0x01	; 1
     d32:	df 93       	push	r29
     d34:	cf 93       	push	r28
     d36:	f8 dc       	rcall	.-1552   	; 0x728 <_ZN22navputter_serial_class5printEPKcz>
    KEYCODE_MENU_LIST
     d38:	1f 93       	push	r17
     d3a:	0f 93       	push	r16
     d3c:	82 e7       	ldi	r24, 0x72	; 114
     d3e:	95 e0       	ldi	r25, 0x05	; 5
     d40:	9f 93       	push	r25
     d42:	8f 93       	push	r24
     d44:	1f 92       	push	r1
     d46:	8c e6       	ldi	r24, 0x6C	; 108
     d48:	8f 93       	push	r24
     d4a:	8e e7       	ldi	r24, 0x7E	; 126
     d4c:	e8 2e       	mov	r14, r24
     d4e:	85 e0       	ldi	r24, 0x05	; 5
     d50:	f8 2e       	mov	r15, r24
     d52:	ff 92       	push	r15
     d54:	ef 92       	push	r14
     d56:	df 93       	push	r29
     d58:	cf 93       	push	r28
     d5a:	e6 dc       	rcall	.-1588   	; 0x728 <_ZN22navputter_serial_class5printEPKcz>
     d5c:	1f 93       	push	r17
     d5e:	0f 93       	push	r16
     d60:	87 e8       	ldi	r24, 0x87	; 135
     d62:	95 e0       	ldi	r25, 0x05	; 5
     d64:	9f 93       	push	r25
     d66:	8f 93       	push	r24
     d68:	1f 92       	push	r1
     d6a:	83 e7       	ldi	r24, 0x73	; 115
     d6c:	8f 93       	push	r24
     d6e:	ff 92       	push	r15
     d70:	ef 92       	push	r14
     d72:	df 93       	push	r29
     d74:	cf 93       	push	r28
     d76:	d8 dc       	rcall	.-1616   	; 0x728 <_ZN22navputter_serial_class5printEPKcz>
     d78:	1f 93       	push	r17
     d7a:	0f 93       	push	r16
     d7c:	83 e9       	ldi	r24, 0x93	; 147
     d7e:	95 e0       	ldi	r25, 0x05	; 5
     d80:	9f 93       	push	r25
     d82:	8f 93       	push	r24
     d84:	1f 92       	push	r1
     d86:	85 e6       	ldi	r24, 0x65	; 101
     d88:	8f 93       	push	r24
     d8a:	ff 92       	push	r15
     d8c:	ef 92       	push	r14
     d8e:	df 93       	push	r29
     d90:	cf 93       	push	r28
     d92:	ca dc       	rcall	.-1644   	; 0x728 <_ZN22navputter_serial_class5printEPKcz>
     d94:	8d b7       	in	r24, 0x3d	; 61
     d96:	9e b7       	in	r25, 0x3e	; 62
     d98:	84 96       	adiw	r24, 0x24	; 36
     d9a:	0f b6       	in	r0, 0x3f	; 63
     d9c:	f8 94       	cli
     d9e:	9e bf       	out	0x3e, r25	; 62
     da0:	0f be       	out	0x3f, r0	; 63
     da2:	8d bf       	out	0x3d, r24	; 61
     da4:	1f 93       	push	r17
     da6:	0f 93       	push	r16
     da8:	8f e9       	ldi	r24, 0x9F	; 159
     daa:	95 e0       	ldi	r25, 0x05	; 5
     dac:	9f 93       	push	r25
     dae:	8f 93       	push	r24
     db0:	1f 92       	push	r1
     db2:	84 e6       	ldi	r24, 0x64	; 100
     db4:	8f 93       	push	r24
     db6:	ff 92       	push	r15
     db8:	ef 92       	push	r14
     dba:	df 93       	push	r29
     dbc:	cf 93       	push	r28
     dbe:	b4 dc       	rcall	.-1688   	; 0x728 <_ZN22navputter_serial_class5printEPKcz>
     dc0:	1f 93       	push	r17
     dc2:	0f 93       	push	r16
     dc4:	80 eb       	ldi	r24, 0xB0	; 176
     dc6:	95 e0       	ldi	r25, 0x05	; 5
     dc8:	9f 93       	push	r25
     dca:	8f 93       	push	r24
     dcc:	1f 92       	push	r1
     dce:	80 e7       	ldi	r24, 0x70	; 112
     dd0:	8f 93       	push	r24
     dd2:	ff 92       	push	r15
     dd4:	ef 92       	push	r14
     dd6:	df 93       	push	r29
     dd8:	cf 93       	push	r28
     dda:	a6 dc       	rcall	.-1716   	; 0x728 <_ZN22navputter_serial_class5printEPKcz>
     ddc:	1f 93       	push	r17
     dde:	0f 93       	push	r16
     de0:	8d eb       	ldi	r24, 0xBD	; 189
     de2:	95 e0       	ldi	r25, 0x05	; 5
     de4:	9f 93       	push	r25
     de6:	8f 93       	push	r24
     de8:	1f 92       	push	r1
     dea:	81 e7       	ldi	r24, 0x71	; 113
     dec:	8f 93       	push	r24
     dee:	ff 92       	push	r15
     df0:	ef 92       	push	r14
     df2:	df 93       	push	r29
     df4:	cf 93       	push	r28
     df6:	98 dc       	rcall	.-1744   	; 0x728 <_ZN22navputter_serial_class5printEPKcz>
}
     df8:	8d b7       	in	r24, 0x3d	; 61
     dfa:	9e b7       	in	r25, 0x3e	; 62
     dfc:	4e 96       	adiw	r24, 0x1e	; 30
     dfe:	0f b6       	in	r0, 0x3f	; 63
     e00:	f8 94       	cli
     e02:	9e bf       	out	0x3e, r25	; 62
     e04:	0f be       	out	0x3f, r0	; 63
     e06:	8d bf       	out	0x3d, r24	; 61
     e08:	df 91       	pop	r29
     e0a:	cf 91       	pop	r28
     e0c:	1f 91       	pop	r17
     e0e:	0f 91       	pop	r16
     e10:	ff 90       	pop	r15
     e12:	ef 90       	pop	r14
     e14:	08 95       	ret

00000e16 <_ZN15navputter_class5errorEh.constprop.29>:
    SERIAL.print("ERR:%d%s",err, EOLN);
     e16:	23 e3       	ldi	r18, 0x33	; 51
     e18:	34 e0       	ldi	r19, 0x04	; 4
     e1a:	3f 93       	push	r19
     e1c:	2f 93       	push	r18
     e1e:	1f 92       	push	r1
     e20:	8f 93       	push	r24
     e22:	82 ec       	ldi	r24, 0xC2	; 194
     e24:	95 e0       	ldi	r25, 0x05	; 5
     e26:	9f 93       	push	r25
     e28:	8f 93       	push	r24
     e2a:	8a e1       	ldi	r24, 0x1A	; 26
     e2c:	91 e0       	ldi	r25, 0x01	; 1
     e2e:	9f 93       	push	r25
     e30:	8f 93       	push	r24
     e32:	7a dc       	rcall	.-1804   	; 0x728 <_ZN22navputter_serial_class5printEPKcz>
     e34:	8d b7       	in	r24, 0x3d	; 61
     e36:	9e b7       	in	r25, 0x3e	; 62
     e38:	08 96       	adiw	r24, 0x08	; 8
     e3a:	0f b6       	in	r0, 0x3f	; 63
     e3c:	f8 94       	cli
     e3e:	9e bf       	out	0x3e, r25	; 62
     e40:	0f be       	out	0x3f, r0	; 63
     e42:	8d bf       	out	0x3d, r24	; 61
}
     e44:	08 95       	ret

00000e46 <_ZN28navputter_worker_pulse_class7run_jobEv>:
}


#define WORK_CYCLES_INFINITE 0xff
void navputter_worker_pulse_class::run_job( void )
{
     e46:	cf 93       	push	r28
     e48:	df 93       	push	r29
     e4a:	ec 01       	movw	r28, r24
    switch( get_state() )
     e4c:	8e 81       	ldd	r24, Y+6	; 0x06
        return m_state;
     e4e:	83 30       	cpi	r24, 0x03	; 3
     e50:	61 f1       	breq	.+88     	; 0xeaa <_ZN28navputter_worker_pulse_class7run_jobEv+0x64>
     e52:	84 30       	cpi	r24, 0x04	; 4
     e54:	09 f4       	brne	.+2      	; 0xe58 <_ZN28navputter_worker_pulse_class7run_jobEv+0x12>
     e56:	4a c0       	rjmp	.+148    	; 0xeec <_ZN28navputter_worker_pulse_class7run_jobEv+0xa6>
     e58:	82 30       	cpi	r24, 0x02	; 2
     e5a:	09 f0       	breq	.+2      	; 0xe5e <_ZN28navputter_worker_pulse_class7run_jobEv+0x18>
     e5c:	63 c0       	rjmp	.+198    	; 0xf24 <_ZN28navputter_worker_pulse_class7run_jobEv+0xde>
    {
        case WORKER_PULSE_ON:
            pulse_on();
     e5e:	e8 81       	ld	r30, Y
     e60:	f9 81       	ldd	r31, Y+1	; 0x01
     e62:	06 80       	ldd	r0, Z+6	; 0x06
     e64:	f7 81       	ldd	r31, Z+7	; 0x07
     e66:	e0 2d       	mov	r30, r0
     e68:	ce 01       	movw	r24, r28
     e6a:	09 95       	icall
        m_state = new_state;
     e6c:	84 e0       	ldi	r24, 0x04	; 4
     e6e:	8e 83       	std	Y+6, r24	; 0x06
            set_state( WORKER_WAITING );
            m_wait_until = global_ticks + m_hold_time_1;
     e70:	80 91 be 08 	lds	r24, 0x08BE	; 0x8008be <global_ticks>
     e74:	90 91 bf 08 	lds	r25, 0x08BF	; 0x8008bf <global_ticks+0x1>
     e78:	a0 91 c0 08 	lds	r26, 0x08C0	; 0x8008c0 <global_ticks+0x2>
     e7c:	b0 91 c1 08 	lds	r27, 0x08C1	; 0x8008c1 <global_ticks+0x3>
     e80:	2b 89       	ldd	r18, Y+19	; 0x13
     e82:	3c 89       	ldd	r19, Y+20	; 0x14
     e84:	82 0f       	add	r24, r18
     e86:	93 1f       	adc	r25, r19
     e88:	a1 1d       	adc	r26, r1
     e8a:	b1 1d       	adc	r27, r1
     e8c:	8a 8f       	std	Y+26, r24	; 0x1a
     e8e:	9b 8f       	std	Y+27, r25	; 0x1b
     e90:	ac 8f       	std	Y+28, r26	; 0x1c
     e92:	bd 8f       	std	Y+29, r27	; 0x1d
            m_next_state = (m_cycles)? WORKER_PULSE_OFF : WORKER_DONE;
     e94:	8f 89       	ldd	r24, Y+23	; 0x17
     e96:	98 8d       	ldd	r25, Y+24	; 0x18
     e98:	89 2b       	or	r24, r25
     e9a:	11 f4       	brne	.+4      	; 0xea0 <_ZN28navputter_worker_pulse_class7run_jobEv+0x5a>
            break;
        case WORKER_PULSE_OFF:
            pulse_off();
            set_state( WORKER_WAITING );
            m_wait_until = global_ticks + m_hold_time_2;
            m_next_state = (m_cycles)? WORKER_PULSE_ON : WORKER_DONE;
     e9c:	85 e0       	ldi	r24, 0x05	; 5
     e9e:	01 c0       	rjmp	.+2      	; 0xea2 <_ZN28navputter_worker_pulse_class7run_jobEv+0x5c>
            m_next_state = (m_cycles)? WORKER_PULSE_OFF : WORKER_DONE;
     ea0:	83 e0       	ldi	r24, 0x03	; 3
            m_next_state = (m_cycles)? WORKER_PULSE_ON : WORKER_DONE;
     ea2:	89 8f       	std	Y+25, r24	; 0x19
            break;
        default:
            myputter.error( ERROR_WORKER_BAD_STATE ); 
            break;
    }
}
     ea4:	df 91       	pop	r29
     ea6:	cf 91       	pop	r28
     ea8:	08 95       	ret
            pulse_off();
     eaa:	e8 81       	ld	r30, Y
     eac:	f9 81       	ldd	r31, Y+1	; 0x01
     eae:	00 84       	ldd	r0, Z+8	; 0x08
     eb0:	f1 85       	ldd	r31, Z+9	; 0x09
     eb2:	e0 2d       	mov	r30, r0
     eb4:	ce 01       	movw	r24, r28
     eb6:	09 95       	icall
     eb8:	84 e0       	ldi	r24, 0x04	; 4
     eba:	8e 83       	std	Y+6, r24	; 0x06
            m_wait_until = global_ticks + m_hold_time_2;
     ebc:	80 91 be 08 	lds	r24, 0x08BE	; 0x8008be <global_ticks>
     ec0:	90 91 bf 08 	lds	r25, 0x08BF	; 0x8008bf <global_ticks+0x1>
     ec4:	a0 91 c0 08 	lds	r26, 0x08C0	; 0x8008c0 <global_ticks+0x2>
     ec8:	b0 91 c1 08 	lds	r27, 0x08C1	; 0x8008c1 <global_ticks+0x3>
     ecc:	2d 89       	ldd	r18, Y+21	; 0x15
     ece:	3e 89       	ldd	r19, Y+22	; 0x16
     ed0:	82 0f       	add	r24, r18
     ed2:	93 1f       	adc	r25, r19
     ed4:	a1 1d       	adc	r26, r1
     ed6:	b1 1d       	adc	r27, r1
     ed8:	8a 8f       	std	Y+26, r24	; 0x1a
     eda:	9b 8f       	std	Y+27, r25	; 0x1b
     edc:	ac 8f       	std	Y+28, r26	; 0x1c
     ede:	bd 8f       	std	Y+29, r27	; 0x1d
            m_next_state = (m_cycles)? WORKER_PULSE_ON : WORKER_DONE;
     ee0:	8f 89       	ldd	r24, Y+23	; 0x17
     ee2:	98 8d       	ldd	r25, Y+24	; 0x18
     ee4:	89 2b       	or	r24, r25
     ee6:	d1 f2       	breq	.-76     	; 0xe9c <_ZN28navputter_worker_pulse_class7run_jobEv+0x56>
     ee8:	82 e0       	ldi	r24, 0x02	; 2
     eea:	db cf       	rjmp	.-74     	; 0xea2 <_ZN28navputter_worker_pulse_class7run_jobEv+0x5c>
            if ( global_ticks >= m_wait_until )
     eec:	80 91 be 08 	lds	r24, 0x08BE	; 0x8008be <global_ticks>
     ef0:	90 91 bf 08 	lds	r25, 0x08BF	; 0x8008bf <global_ticks+0x1>
     ef4:	a0 91 c0 08 	lds	r26, 0x08C0	; 0x8008c0 <global_ticks+0x2>
     ef8:	b0 91 c1 08 	lds	r27, 0x08C1	; 0x8008c1 <global_ticks+0x3>
     efc:	4a 8d       	ldd	r20, Y+26	; 0x1a
     efe:	5b 8d       	ldd	r21, Y+27	; 0x1b
     f00:	6c 8d       	ldd	r22, Y+28	; 0x1c
     f02:	7d 8d       	ldd	r23, Y+29	; 0x1d
     f04:	84 17       	cp	r24, r20
     f06:	95 07       	cpc	r25, r21
     f08:	a6 07       	cpc	r26, r22
     f0a:	b7 07       	cpc	r27, r23
     f0c:	58 f2       	brcs	.-106    	; 0xea4 <_ZN28navputter_worker_pulse_class7run_jobEv+0x5e>
     f0e:	89 8d       	ldd	r24, Y+25	; 0x19
     f10:	8e 83       	std	Y+6, r24	; 0x06
                m_cycles = ( m_cycles == WORK_CYCLES_INFINITE )? m_cycles : m_cycles-1;
     f12:	8f 89       	ldd	r24, Y+23	; 0x17
     f14:	98 8d       	ldd	r25, Y+24	; 0x18
     f16:	8f 3f       	cpi	r24, 0xFF	; 255
     f18:	91 05       	cpc	r25, r1
     f1a:	09 f0       	breq	.+2      	; 0xf1e <_ZN28navputter_worker_pulse_class7run_jobEv+0xd8>
     f1c:	01 97       	sbiw	r24, 0x01	; 1
     f1e:	98 8f       	std	Y+24, r25	; 0x18
     f20:	8f 8b       	std	Y+23, r24	; 0x17
     f22:	c0 cf       	rjmp	.-128    	; 0xea4 <_ZN28navputter_worker_pulse_class7run_jobEv+0x5e>
            myputter.error( ERROR_WORKER_BAD_STATE ); 
     f24:	8d e0       	ldi	r24, 0x0D	; 13
}
     f26:	df 91       	pop	r29
     f28:	cf 91       	pop	r28
            myputter.error( ERROR_WORKER_BAD_STATE ); 
     f2a:	75 cf       	rjmp	.-278    	; 0xe16 <_ZN15navputter_class5errorEh.constprop.29>

00000f2c <_ZN22navputter_serial_class7print_PEPKcz>:
        int print_P( const char *str, ... )
     f2c:	0f 93       	push	r16
     f2e:	1f 93       	push	r17
     f30:	cf 93       	push	r28
     f32:	df 93       	push	r29
     f34:	cd b7       	in	r28, 0x3d	; 61
     f36:	de b7       	in	r29, 0x3e	; 62
     f38:	0f 81       	ldd	r16, Y+7	; 0x07
     f3a:	18 85       	ldd	r17, Y+8	; 0x08
            vsprintf_P( (char *)global_tmp_buf, str, args);
     f3c:	ae 01       	movw	r20, r28
     f3e:	45 5f       	subi	r20, 0xF5	; 245
     f40:	5f 4f       	sbci	r21, 0xFF	; 255
     f42:	69 85       	ldd	r22, Y+9	; 0x09
     f44:	7a 85       	ldd	r23, Y+10	; 0x0a
     f46:	84 ec       	ldi	r24, 0xC4	; 196
     f48:	98 e0       	ldi	r25, 0x08	; 8
     f4a:	0e 94 32 32 	call	0x6464	; 0x6464 <vsprintf_P>
            return write( (char *)global_tmp_buf);
     f4e:	d8 01       	movw	r26, r16
     f50:	ed 91       	ld	r30, X+
     f52:	fc 91       	ld	r31, X
     f54:	01 90       	ld	r0, Z+
     f56:	f0 81       	ld	r31, Z
     f58:	e0 2d       	mov	r30, r0
     f5a:	64 ec       	ldi	r22, 0xC4	; 196
     f5c:	78 e0       	ldi	r23, 0x08	; 8
     f5e:	c8 01       	movw	r24, r16
     f60:	09 95       	icall
        }
     f62:	df 91       	pop	r29
     f64:	cf 91       	pop	r28
     f66:	1f 91       	pop	r17
     f68:	0f 91       	pop	r16
     f6a:	08 95       	ret

00000f6c <_ZN25navputter_main_menu_class5usageEv>:
{
     f6c:	ef 92       	push	r14
     f6e:	ff 92       	push	r15
     f70:	0f 93       	push	r16
     f72:	1f 93       	push	r17
     f74:	cf 93       	push	r28
     f76:	df 93       	push	r29
    SERIAL.print_P(global_main_menu_str1, EOLN );
     f78:	c3 e3       	ldi	r28, 0x33	; 51
     f7a:	d4 e0       	ldi	r29, 0x04	; 4
     f7c:	df 93       	push	r29
     f7e:	cf 93       	push	r28
     f80:	8c e4       	ldi	r24, 0x4C	; 76
     f82:	94 e0       	ldi	r25, 0x04	; 4
     f84:	9f 93       	push	r25
     f86:	8f 93       	push	r24
     f88:	0a e1       	ldi	r16, 0x1A	; 26
     f8a:	11 e0       	ldi	r17, 0x01	; 1
     f8c:	1f 93       	push	r17
     f8e:	0f 93       	push	r16
     f90:	cd df       	rcall	.-102    	; 0xf2c <_ZN22navputter_serial_class7print_PEPKcz>
    _SER_CMDS_
     f92:	df 93       	push	r29
     f94:	cf 93       	push	r28
     f96:	8b ec       	ldi	r24, 0xCB	; 203
     f98:	95 e0       	ldi	r25, 0x05	; 5
     f9a:	9f 93       	push	r25
     f9c:	8f 93       	push	r24
     f9e:	1f 92       	push	r1
     fa0:	88 e6       	ldi	r24, 0x68	; 104
     fa2:	8f 93       	push	r24
     fa4:	8b ed       	ldi	r24, 0xDB	; 219
     fa6:	e8 2e       	mov	r14, r24
     fa8:	85 e0       	ldi	r24, 0x05	; 5
     faa:	f8 2e       	mov	r15, r24
     fac:	ff 92       	push	r15
     fae:	ef 92       	push	r14
     fb0:	1f 93       	push	r17
     fb2:	0f 93       	push	r16
     fb4:	b9 db       	rcall	.-2190   	; 0x728 <_ZN22navputter_serial_class5printEPKcz>
     fb6:	df 93       	push	r29
     fb8:	cf 93       	push	r28
     fba:	87 ee       	ldi	r24, 0xE7	; 231
     fbc:	95 e0       	ldi	r25, 0x05	; 5
     fbe:	9f 93       	push	r25
     fc0:	8f 93       	push	r24
     fc2:	1f 92       	push	r1
     fc4:	85 e6       	ldi	r24, 0x65	; 101
     fc6:	8f 93       	push	r24
     fc8:	ff 92       	push	r15
     fca:	ef 92       	push	r14
     fcc:	1f 93       	push	r17
     fce:	0f 93       	push	r16
     fd0:	ab db       	rcall	.-2218   	; 0x728 <_ZN22navputter_serial_class5printEPKcz>
     fd2:	df 93       	push	r29
     fd4:	cf 93       	push	r28
     fd6:	8e ef       	ldi	r24, 0xFE	; 254
     fd8:	95 e0       	ldi	r25, 0x05	; 5
     fda:	9f 93       	push	r25
     fdc:	8f 93       	push	r24
     fde:	1f 92       	push	r1
     fe0:	87 e6       	ldi	r24, 0x67	; 103
     fe2:	8f 93       	push	r24
     fe4:	ff 92       	push	r15
     fe6:	ef 92       	push	r14
     fe8:	1f 93       	push	r17
     fea:	0f 93       	push	r16
     fec:	9d db       	rcall	.-2246   	; 0x728 <_ZN22navputter_serial_class5printEPKcz>
     fee:	8d b7       	in	r24, 0x3d	; 61
     ff0:	9e b7       	in	r25, 0x3e	; 62
     ff2:	84 96       	adiw	r24, 0x24	; 36
     ff4:	0f b6       	in	r0, 0x3f	; 63
     ff6:	f8 94       	cli
     ff8:	9e bf       	out	0x3e, r25	; 62
     ffa:	0f be       	out	0x3f, r0	; 63
     ffc:	8d bf       	out	0x3d, r24	; 61
     ffe:	df 93       	push	r29
    1000:	cf 93       	push	r28
    1002:	8e e1       	ldi	r24, 0x1E	; 30
    1004:	96 e0       	ldi	r25, 0x06	; 6
    1006:	9f 93       	push	r25
    1008:	8f 93       	push	r24
    100a:	1f 92       	push	r1
    100c:	87 e7       	ldi	r24, 0x77	; 119
    100e:	8f 93       	push	r24
    1010:	ff 92       	push	r15
    1012:	ef 92       	push	r14
    1014:	1f 93       	push	r17
    1016:	0f 93       	push	r16
    1018:	87 db       	rcall	.-2290   	; 0x728 <_ZN22navputter_serial_class5printEPKcz>
    101a:	df 93       	push	r29
    101c:	cf 93       	push	r28
    101e:	86 e3       	ldi	r24, 0x36	; 54
    1020:	96 e0       	ldi	r25, 0x06	; 6
    1022:	9f 93       	push	r25
    1024:	8f 93       	push	r24
    1026:	1f 92       	push	r1
    1028:	8b e6       	ldi	r24, 0x6B	; 107
    102a:	8f 93       	push	r24
    102c:	ff 92       	push	r15
    102e:	ef 92       	push	r14
    1030:	1f 93       	push	r17
    1032:	0f 93       	push	r16
    1034:	79 db       	rcall	.-2318   	; 0x728 <_ZN22navputter_serial_class5printEPKcz>
    SERIAL.print("%s%sCMD:", EOLN, EOLN);
    1036:	df 93       	push	r29
    1038:	cf 93       	push	r28
    103a:	df 93       	push	r29
    103c:	cf 93       	push	r28
    103e:	85 e3       	ldi	r24, 0x35	; 53
    1040:	95 e0       	ldi	r25, 0x05	; 5
    1042:	9f 93       	push	r25
    1044:	8f 93       	push	r24
    1046:	1f 93       	push	r17
    1048:	0f 93       	push	r16
    104a:	6e db       	rcall	.-2340   	; 0x728 <_ZN22navputter_serial_class5printEPKcz>
}
    104c:	8d b7       	in	r24, 0x3d	; 61
    104e:	9e b7       	in	r25, 0x3e	; 62
    1050:	4c 96       	adiw	r24, 0x1c	; 28
    1052:	0f b6       	in	r0, 0x3f	; 63
    1054:	f8 94       	cli
    1056:	9e bf       	out	0x3e, r25	; 62
    1058:	0f be       	out	0x3f, r0	; 63
    105a:	8d bf       	out	0x3d, r24	; 61
    105c:	df 91       	pop	r29
    105e:	cf 91       	pop	r28
    1060:	1f 91       	pop	r17
    1062:	0f 91       	pop	r16
    1064:	ff 90       	pop	r15
    1066:	ef 90       	pop	r14
    1068:	08 95       	ret

0000106a <_ZN25navputter_work_pool_class4tickEv>:
    void tick()
    106a:	0f 93       	push	r16
    106c:	1f 93       	push	r17
    106e:	cf 93       	push	r28
    1070:	df 93       	push	r29
    1072:	8c 01       	movw	r16, r24
        for ( j=first_job(); j; j=next_job(j) )
    1074:	fc 01       	movw	r30, r24
    1076:	c0 81       	ld	r28, Z
    1078:	d1 81       	ldd	r29, Z+1	; 0x01
    107a:	20 97       	sbiw	r28, 0x00	; 0
    107c:	b1 f1       	breq	.+108    	; 0x10ea <_ZN25navputter_work_pool_class4tickEv+0x80>
            j->run_job();
    107e:	e8 81       	ld	r30, Y
    1080:	f9 81       	ldd	r31, Y+1	; 0x01
    1082:	04 80       	ldd	r0, Z+4	; 0x04
    1084:	f5 81       	ldd	r31, Z+5	; 0x05
    1086:	e0 2d       	mov	r30, r0
    1088:	ce 01       	movw	r24, r28
    108a:	09 95       	icall
            if ( j->get_state() == WORKER_DONE )
    108c:	8e 81       	ldd	r24, Y+6	; 0x06
    108e:	85 30       	cpi	r24, 0x05	; 5
    1090:	41 f5       	brne	.+80     	; 0x10e2 <_ZN25navputter_work_pool_class4tickEv+0x78>
        m_running = tf;
    1092:	1f 82       	std	Y+7, r1	; 0x07
        navputter_worker_class *nextjob = job->get_next_job();
    1094:	ac 85       	ldd	r26, Y+12	; 0x0c
    1096:	bd 85       	ldd	r27, Y+13	; 0x0d
        navputter_worker_class *prevjob = job->get_prev_job();
    1098:	2e 85       	ldd	r18, Y+14	; 0x0e
    109a:	3f 85       	ldd	r19, Y+15	; 0x0f
        if ( m_job_head == job ) 
    109c:	f8 01       	movw	r30, r16
    109e:	80 81       	ld	r24, Z
    10a0:	91 81       	ldd	r25, Z+1	; 0x01
    10a2:	c8 17       	cp	r28, r24
    10a4:	d9 07       	cpc	r29, r25
    10a6:	11 f4       	brne	.+4      	; 0x10ac <_ZN25navputter_work_pool_class4tickEv+0x42>
            m_job_head = nextjob;
    10a8:	b1 83       	std	Z+1, r27	; 0x01
    10aa:	a0 83       	st	Z, r26
        if ( m_job_tail == job )
    10ac:	f8 01       	movw	r30, r16
    10ae:	82 81       	ldd	r24, Z+2	; 0x02
    10b0:	93 81       	ldd	r25, Z+3	; 0x03
    10b2:	c8 17       	cp	r28, r24
    10b4:	d9 07       	cpc	r29, r25
    10b6:	11 f4       	brne	.+4      	; 0x10bc <_ZN25navputter_work_pool_class4tickEv+0x52>
            m_job_tail = prevjob;
    10b8:	33 83       	std	Z+3, r19	; 0x03
    10ba:	22 83       	std	Z+2, r18	; 0x02
        if ( nextjob ) nextjob->set_prev_job( prevjob );
    10bc:	10 97       	sbiw	r26, 0x00	; 0
    10be:	21 f0       	breq	.+8      	; 0x10c8 <_ZN25navputter_work_pool_class4tickEv+0x5e>
        m_prev = job;
    10c0:	1f 96       	adiw	r26, 0x0f	; 15
    10c2:	3c 93       	st	X, r19
    10c4:	2e 93       	st	-X, r18
    10c6:	1e 97       	sbiw	r26, 0x0e	; 14
        if ( prevjob ) prevjob->set_next_job( nextjob );
    10c8:	21 15       	cp	r18, r1
    10ca:	31 05       	cpc	r19, r1
    10cc:	19 f0       	breq	.+6      	; 0x10d4 <_ZN25navputter_work_pool_class4tickEv+0x6a>
        m_next = job;
    10ce:	f9 01       	movw	r30, r18
    10d0:	b5 87       	std	Z+13, r27	; 0x0d
    10d2:	a4 87       	std	Z+12, r26	; 0x0c
        job->done();
    10d4:	e8 81       	ld	r30, Y
    10d6:	f9 81       	ldd	r31, Y+1	; 0x01
    10d8:	02 80       	ldd	r0, Z+2	; 0x02
    10da:	f3 81       	ldd	r31, Z+3	; 0x03
    10dc:	e0 2d       	mov	r30, r0
    10de:	ce 01       	movw	r24, r28
    10e0:	09 95       	icall
        return job->get_next_job();
    10e2:	0c 84       	ldd	r0, Y+12	; 0x0c
    10e4:	dd 85       	ldd	r29, Y+13	; 0x0d
    10e6:	c0 2d       	mov	r28, r0
        for ( j=first_job(); j; j=next_job(j) )
    10e8:	c8 cf       	rjmp	.-112    	; 0x107a <_ZN25navputter_work_pool_class4tickEv+0x10>
    }
    10ea:	df 91       	pop	r29
    10ec:	cf 91       	pop	r28
    10ee:	1f 91       	pop	r17
    10f0:	0f 91       	pop	r16
    10f2:	08 95       	ret

000010f4 <_ZN25navputter_menu_base_class12read_commandEv>:
        m_state = state;
    10f4:	dc 01       	movw	r26, r24
    10f6:	12 96       	adiw	r26, 0x02	; 2
    10f8:	1c 92       	st	X, r1
    10fa:	12 97       	sbiw	r26, 0x02	; 2
        usage();
    10fc:	ed 91       	ld	r30, X+
    10fe:	fc 91       	ld	r31, X
    1100:	06 80       	ldd	r0, Z+6	; 0x06
    1102:	f7 81       	ldd	r31, Z+7	; 0x07
    1104:	e0 2d       	mov	r30, r0
    1106:	09 94       	ijmp

00001108 <_ZN27navputter_eeprom_menu_class5beginEv>:
{
    1108:	cf 93       	push	r28
    110a:	df 93       	push	r29
    110c:	ec 01       	movw	r28, r24
    SERIAL.print_P( global_eeprom_string_2, EOLN, EOLN, EOLN);
    110e:	83 e3       	ldi	r24, 0x33	; 51
    1110:	94 e0       	ldi	r25, 0x04	; 4
    1112:	9f 93       	push	r25
    1114:	8f 93       	push	r24
    1116:	9f 93       	push	r25
    1118:	8f 93       	push	r24
    111a:	9f 93       	push	r25
    111c:	8f 93       	push	r24
    111e:	86 e2       	ldi	r24, 0x26	; 38
    1120:	94 e0       	ldi	r25, 0x04	; 4
    1122:	9f 93       	push	r25
    1124:	8f 93       	push	r24
    1126:	8a e1       	ldi	r24, 0x1A	; 26
    1128:	91 e0       	ldi	r25, 0x01	; 1
    112a:	9f 93       	push	r25
    112c:	8f 93       	push	r24
    112e:	fe de       	rcall	.-516    	; 0xf2c <_ZN22navputter_serial_class7print_PEPKcz>
    read_command();
    1130:	8d b7       	in	r24, 0x3d	; 61
    1132:	9e b7       	in	r25, 0x3e	; 62
    1134:	0a 96       	adiw	r24, 0x0a	; 10
    1136:	0f b6       	in	r0, 0x3f	; 63
    1138:	f8 94       	cli
    113a:	9e bf       	out	0x3e, r25	; 62
    113c:	0f be       	out	0x3f, r0	; 63
    113e:	8d bf       	out	0x3d, r24	; 61
    1140:	ce 01       	movw	r24, r28
}
    1142:	df 91       	pop	r29
    read_command();
    1144:	cf 91       	pop	r28
    1146:	d6 cf       	rjmp	.-84     	; 0x10f4 <_ZN25navputter_menu_base_class12read_commandEv>

00001148 <_ZN25navputter_gpio_menu_class5beginEv>:
    read_command();
    1148:	d5 cf       	rjmp	.-86     	; 0x10f4 <_ZN25navputter_menu_base_class12read_commandEv>

0000114a <_ZN28navputter_keycode_menu_class5beginEv>:
{
    114a:	cf 93       	push	r28
    114c:	df 93       	push	r29
    114e:	ec 01       	movw	r28, r24
    read_command();
    1150:	d1 df       	rcall	.-94     	; 0x10f4 <_ZN25navputter_menu_base_class12read_commandEv>
    memcpy( &m_key_map, myputter.get_map(),sizeof(m_key_map));
    1152:	84 e2       	ldi	r24, 0x24	; 36
    1154:	e6 e7       	ldi	r30, 0x76	; 118
    1156:	f3 e0       	ldi	r31, 0x03	; 3
    1158:	de 01       	movw	r26, r28
    115a:	1f 96       	adiw	r26, 0x0f	; 15
    115c:	01 90       	ld	r0, Z+
    115e:	0d 92       	st	X+, r0
    1160:	8a 95       	dec	r24
    1162:	e1 f7       	brne	.-8      	; 0x115c <_ZN28navputter_keycode_menu_class5beginEv+0x12>
    memcpy( &m_key_seq_map, myputter.get_seq_map(),sizeof(m_key_seq_map));
    1164:	88 e9       	ldi	r24, 0x98	; 152
    1166:	ea e9       	ldi	r30, 0x9A	; 154
    1168:	f3 e0       	ldi	r31, 0x03	; 3
    116a:	de 01       	movw	r26, r28
    116c:	d3 96       	adiw	r26, 0x33	; 51
    116e:	01 90       	ld	r0, Z+
    1170:	0d 92       	st	X+, r0
    1172:	8a 95       	dec	r24
    1174:	e1 f7       	brne	.-8      	; 0x116e <_ZN28navputter_keycode_menu_class5beginEv+0x24>
}
    1176:	df 91       	pop	r29
    1178:	cf 91       	pop	r28
    117a:	08 95       	ret

0000117c <_ZN15navputter_class8set_menuEP25navputter_menu_base_class>:
    void set_menu( class navputter_menu_base_class *menu )
    117c:	0f 93       	push	r16
    117e:	1f 93       	push	r17
    1180:	cf 93       	push	r28
    1182:	df 93       	push	r29
    1184:	8b 01       	movw	r16, r22
        if ( m_cur_menu )
    1186:	ec 01       	movw	r28, r24
    1188:	cb 59       	subi	r28, 0x9B	; 155
    118a:	dd 4f       	sbci	r29, 0xFD	; 253
    118c:	88 81       	ld	r24, Y
    118e:	99 81       	ldd	r25, Y+1	; 0x01
    1190:	00 97       	sbiw	r24, 0x00	; 0
    1192:	39 f0       	breq	.+14     	; 0x11a2 <_ZN15navputter_class8set_menuEP25navputter_menu_base_class+0x26>
            m_cur_menu->end();
    1194:	dc 01       	movw	r26, r24
    1196:	ed 91       	ld	r30, X+
    1198:	fc 91       	ld	r31, X
    119a:	02 80       	ldd	r0, Z+2	; 0x02
    119c:	f3 81       	ldd	r31, Z+3	; 0x03
    119e:	e0 2d       	mov	r30, r0
    11a0:	09 95       	icall
        m_cur_menu = menu;       
    11a2:	19 83       	std	Y+1, r17	; 0x01
    11a4:	08 83       	st	Y, r16
        m_cur_menu->begin();
    11a6:	d8 01       	movw	r26, r16
    11a8:	ed 91       	ld	r30, X+
    11aa:	fc 91       	ld	r31, X
    11ac:	01 90       	ld	r0, Z+
    11ae:	f0 81       	ld	r31, Z
    11b0:	e0 2d       	mov	r30, r0
    11b2:	c8 01       	movw	r24, r16
    11b4:	09 95       	icall
        m_cur_menu->usage();
    11b6:	88 81       	ld	r24, Y
    11b8:	99 81       	ldd	r25, Y+1	; 0x01
    11ba:	dc 01       	movw	r26, r24
    11bc:	ed 91       	ld	r30, X+
    11be:	fc 91       	ld	r31, X
    11c0:	06 80       	ldd	r0, Z+6	; 0x06
    11c2:	f7 81       	ldd	r31, Z+7	; 0x07
    11c4:	e0 2d       	mov	r30, r0
    }
    11c6:	df 91       	pop	r29
    11c8:	cf 91       	pop	r28
    11ca:	1f 91       	pop	r17
    11cc:	0f 91       	pop	r16
        m_cur_menu->usage();
    11ce:	09 94       	ijmp

000011d0 <_ZN27navputter_eeprom_menu_class4pollEv>:
{
    11d0:	cf 93       	push	r28
    11d2:	df 93       	push	r29
    11d4:	ec 01       	movw	r28, r24
    switch( get_state() )
    11d6:	8a 81       	ldd	r24, Y+2	; 0x02
        return m_state;
    11d8:	81 30       	cpi	r24, 0x01	; 1
    11da:	41 f0       	breq	.+16     	; 0x11ec <_ZN27navputter_eeprom_menu_class4pollEv+0x1c>
    11dc:	88 23       	and	r24, r24
    11de:	09 f4       	brne	.+2      	; 0x11e2 <_ZN27navputter_eeprom_menu_class4pollEv+0x12>
    11e0:	3f c0       	rjmp	.+126    	; 0x1260 <_ZN27navputter_eeprom_menu_class4pollEv+0x90>
    11e2:	82 30       	cpi	r24, 0x02	; 2
    11e4:	09 f4       	brne	.+2      	; 0x11e8 <_ZN27navputter_eeprom_menu_class4pollEv+0x18>
    11e6:	8c c0       	rjmp	.+280    	; 0x1300 <_ZN27navputter_eeprom_menu_class4pollEv+0x130>
            myputter.error( ERROR_EEPROM_BAD_STATE );
    11e8:	84 e0       	ldi	r24, 0x04	; 4
    11ea:	98 c0       	rjmp	.+304    	; 0x131c <_ZN27navputter_eeprom_menu_class4pollEv+0x14c>
            c = SERIAL.read();
    11ec:	8a e1       	ldi	r24, 0x1A	; 26
    11ee:	91 e0       	ldi	r25, 0x01	; 1
    11f0:	14 da       	rcall	.-3032   	; 0x61a <_ZN22navputter_serial_class4readEv>
            if ( c == 0xff ) return;
    11f2:	8f 3f       	cpi	r24, 0xFF	; 255
    11f4:	59 f0       	breq	.+22     	; 0x120c <_ZN27navputter_eeprom_menu_class4pollEv+0x3c>
            if ( (c == '\n') || (c=='\r'))
    11f6:	8a 30       	cpi	r24, 0x0A	; 10
    11f8:	11 f0       	breq	.+4      	; 0x11fe <_ZN27navputter_eeprom_menu_class4pollEv+0x2e>
    11fa:	8d 30       	cpi	r24, 0x0D	; 13
    11fc:	51 f4       	brne	.+20     	; 0x1212 <_ZN27navputter_eeprom_menu_class4pollEv+0x42>
        m_int_value[m_position]=0;
    11fe:	ec 81       	ldd	r30, Y+4	; 0x04
    1200:	fd 81       	ldd	r31, Y+5	; 0x05
    1202:	ec 0f       	add	r30, r28
    1204:	fd 1f       	adc	r31, r29
    1206:	17 82       	std	Z+7, r1	; 0x07
        m_state = state;
    1208:	82 e0       	ldi	r24, 0x02	; 2
    120a:	8a 83       	std	Y+2, r24	; 0x02
}
    120c:	df 91       	pop	r29
    120e:	cf 91       	pop	r28
    1210:	08 95       	ret
            else if ( !isdigit( c ) )
    1212:	ac 01       	movw	r20, r24
    1214:	55 27       	eor	r21, r21
    1216:	9a 01       	movw	r18, r20
    1218:	20 53       	subi	r18, 0x30	; 48
    121a:	31 09       	sbc	r19, r1
    121c:	2a 30       	cpi	r18, 0x0A	; 10
    121e:	31 05       	cpc	r19, r1
    1220:	30 f0       	brcs	.+12     	; 0x122e <_ZN27navputter_eeprom_menu_class4pollEv+0x5e>
                    myputter.error( ERROR_EEPROM_INT_SIZE );
    1222:	86 e0       	ldi	r24, 0x06	; 6
    1224:	f8 dd       	rcall	.-1040   	; 0xe16 <_ZN15navputter_class5errorEh.constprop.29>
                    read_command();
    1226:	ce 01       	movw	r24, r28
}
    1228:	df 91       	pop	r29
                    read_command();
    122a:	cf 91       	pop	r28
    122c:	63 cf       	rjmp	.-314    	; 0x10f4 <_ZN25navputter_menu_base_class12read_commandEv>
                m_int_value[ m_position++ ] = c;
    122e:	2c 81       	ldd	r18, Y+4	; 0x04
    1230:	3d 81       	ldd	r19, Y+5	; 0x05
    1232:	b9 01       	movw	r22, r18
    1234:	6f 5f       	subi	r22, 0xFF	; 255
    1236:	7f 4f       	sbci	r23, 0xFF	; 255
    1238:	7d 83       	std	Y+5, r23	; 0x05
    123a:	6c 83       	std	Y+4, r22	; 0x04
    123c:	2c 0f       	add	r18, r28
    123e:	3d 1f       	adc	r19, r29
    1240:	f9 01       	movw	r30, r18
    1242:	87 83       	std	Z+7, r24	; 0x07
                if ( m_position == sizeof( m_int_value ) )
    1244:	68 30       	cpi	r22, 0x08	; 8
    1246:	71 05       	cpc	r23, r1
    1248:	11 f4       	brne	.+4      	; 0x124e <_ZN27navputter_eeprom_menu_class4pollEv+0x7e>
                    myputter.error( ERROR_EEPROM_INT_SIZE );
    124a:	87 e0       	ldi	r24, 0x07	; 7
    124c:	eb cf       	rjmp	.-42     	; 0x1224 <_ZN27navputter_eeprom_menu_class4pollEv+0x54>
            fputc(c, m_stream);
    124e:	60 91 2e 01 	lds	r22, 0x012E	; 0x80012e <myputter+0x2e>
    1252:	70 91 2f 01 	lds	r23, 0x012F	; 0x80012f <myputter+0x2f>
    1256:	ca 01       	movw	r24, r20
}
    1258:	df 91       	pop	r29
    125a:	cf 91       	pop	r28
    125c:	0c 94 c3 31 	jmp	0x6386	; 0x6386 <fputc>
            m_command = SERIAL.read();
    1260:	8a e1       	ldi	r24, 0x1A	; 26
    1262:	91 e0       	ldi	r25, 0x01	; 1
    1264:	da d9       	rcall	.-3148   	; 0x61a <_ZN22navputter_serial_class4readEv>
    1266:	8e 83       	std	Y+6, r24	; 0x06
            if ( m_command == 0xff ) return;
    1268:	8f 3f       	cpi	r24, 0xFF	; 255
    126a:	81 f2       	breq	.-96     	; 0x120c <_ZN27navputter_eeprom_menu_class4pollEv+0x3c>
                _EEPROM_DESC_
    126c:	9e e8       	ldi	r25, 0x8E	; 142
    126e:	98 0f       	add	r25, r24
    1270:	92 30       	cpi	r25, 0x02	; 2
    1272:	28 f1       	brcs	.+74     	; 0x12be <_ZN27navputter_eeprom_menu_class4pollEv+0xee>
    1274:	9d e9       	ldi	r25, 0x9D	; 157
    1276:	98 0f       	add	r25, r24
    1278:	92 30       	cpi	r25, 0x02	; 2
    127a:	08 f1       	brcs	.+66     	; 0x12be <_ZN27navputter_eeprom_menu_class4pollEv+0xee>
    127c:	98 2f       	mov	r25, r24
    127e:	9f 7e       	andi	r25, 0xEF	; 239
    1280:	96 36       	cpi	r25, 0x66	; 102
    1282:	e9 f0       	breq	.+58     	; 0x12be <_ZN27navputter_eeprom_menu_class4pollEv+0xee>
    1284:	95 e9       	ldi	r25, 0x95	; 149
    1286:	98 0f       	add	r25, r24
    1288:	93 30       	cpi	r25, 0x03	; 3
    128a:	c8 f0       	brcs	.+50     	; 0x12be <_ZN27navputter_eeprom_menu_class4pollEv+0xee>
    128c:	98 e8       	ldi	r25, 0x88	; 136
    128e:	98 0f       	add	r25, r24
    1290:	92 30       	cpi	r25, 0x02	; 2
    1292:	a8 f0       	brcs	.+42     	; 0x12be <_ZN27navputter_eeprom_menu_class4pollEv+0xee>
    1294:	8b 34       	cpi	r24, 0x4B	; 75
            if ( m_command == 'q' )
    1296:	99 f0       	breq	.+38     	; 0x12be <_ZN27navputter_eeprom_menu_class4pollEv+0xee>
    1298:	81 37       	cpi	r24, 0x71	; 113
                myputter.clear_menu();
    129a:	49 f5       	brne	.+82     	; 0x12ee <_ZN27navputter_eeprom_menu_class4pollEv+0x11e>
    129c:	33 da       	rcall	.-2970   	; 0x704 <_ZN15navputter_class10clear_menuEv.isra.25.constprop.30>
    return malloc(objsize); 
    129e:	83 e0       	ldi	r24, 0x03	; 3
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	0e 94 35 2f 	call	0x5e6a	; 0x5e6a <malloc>
                navputter_main_menu_class *mm = new navputter_main_menu_class();
    12a6:	fc 01       	movw	r30, r24
    12a8:	12 82       	std	Z+2, r1	; 0x02
class navputter_main_menu_class : public navputter_menu_base_class
    12aa:	20 e8       	ldi	r18, 0x80	; 128
    12ac:	38 e0       	ldi	r19, 0x08	; 8
    12ae:	31 83       	std	Z+1, r19	; 0x01
    12b0:	20 83       	st	Z, r18
                myputter.set_menu(mm);
    12b2:	bc 01       	movw	r22, r24
    12b4:	80 e0       	ldi	r24, 0x00	; 0
}
    12b6:	91 e0       	ldi	r25, 0x01	; 1
    12b8:	df 91       	pop	r29
                myputter.set_menu(mm);
    12ba:	cf 91       	pop	r28
    12bc:	5f cf       	rjmp	.-322    	; 0x117c <_ZN15navputter_class8set_menuEP25navputter_menu_base_class>
        m_state = state;
    12be:	81 e0       	ldi	r24, 0x01	; 1
    12c0:	8a 83       	std	Y+2, r24	; 0x02
        m_position =0;
    12c2:	1d 82       	std	Y+5, r1	; 0x05
    12c4:	1c 82       	std	Y+4, r1	; 0x04
                _EEPROM_DESC_
    12c6:	83 e3       	ldi	r24, 0x33	; 51
    12c8:	94 e0       	ldi	r25, 0x04	; 4
    12ca:	9f 93       	push	r25
    12cc:	8f 93       	push	r24
    12ce:	87 e5       	ldi	r24, 0x57	; 87
    12d0:	96 e0       	ldi	r25, 0x06	; 6
    12d2:	9f 93       	push	r25
    12d4:	8f 93       	push	r24
    12d6:	8a e1       	ldi	r24, 0x1A	; 26
    12d8:	91 e0       	ldi	r25, 0x01	; 1
    12da:	9f 93       	push	r25
    12dc:	8f 93       	push	r24
    12de:	24 da       	rcall	.-3000   	; 0x728 <_ZN22navputter_serial_class5printEPKcz>
    12e0:	0f 90       	pop	r0
    12e2:	0f 90       	pop	r0
    12e4:	0f 90       	pop	r0
    12e6:	0f 90       	pop	r0
    12e8:	0f 90       	pop	r0
    12ea:	0f 90       	pop	r0
    12ec:	8f cf       	rjmp	.-226    	; 0x120c <_ZN27navputter_eeprom_menu_class4pollEv+0x3c>
                usage();
    12ee:	e8 81       	ld	r30, Y
    12f0:	f9 81       	ldd	r31, Y+1	; 0x01
    12f2:	06 80       	ldd	r0, Z+6	; 0x06
    12f4:	f7 81       	ldd	r31, Z+7	; 0x07
    12f6:	e0 2d       	mov	r30, r0
    12f8:	ce 01       	movw	r24, r28
}
    12fa:	df 91       	pop	r29
                usage();
    12fc:	cf 91       	pop	r28
                _EEPROM_DESC_
    12fe:	09 94       	ijmp
    1300:	8e 81       	ldd	r24, Y+6	; 0x06
    1302:	86 37       	cpi	r24, 0x76	; 118
    1304:	99 f4       	brne	.+38     	; 0x132c <_ZN27navputter_eeprom_menu_class4pollEv+0x15c>
    1306:	ce 01       	movw	r24, r28
    1308:	f5 de       	rcall	.-534    	; 0x10f4 <_ZN25navputter_menu_base_class12read_commandEv>
    130a:	ce 01       	movw	r24, r28
    130c:	07 96       	adiw	r24, 0x07	; 7
    130e:	0e 94 6e 31 	call	0x62dc	; 0x62dc <atoi>
    1312:	8f 3f       	cpi	r24, 0xFF	; 255
    1314:	91 05       	cpc	r25, r1
    1316:	29 f0       	breq	.+10     	; 0x1322 <_ZN27navputter_eeprom_menu_class4pollEv+0x152>
    1318:	20 f0       	brcs	.+8      	; 0x1322 <_ZN27navputter_eeprom_menu_class4pollEv+0x152>
}
    131a:	85 e0       	ldi	r24, 0x05	; 5
    131c:	df 91       	pop	r29
            myputter.error( ERROR_EEPROM_BAD_STATE );
    131e:	cf 91       	pop	r28
                _EEPROM_DESC_
    1320:	7a cd       	rjmp	.-1292   	; 0xe16 <_ZN15navputter_class5errorEh.constprop.29>
    1322:	90 93 68 03 	sts	0x0368, r25	; 0x800368 <myputter+0x268>
    1326:	80 93 67 03 	sts	0x0367, r24	; 0x800367 <myputter+0x267>
    132a:	70 cf       	rjmp	.-288    	; 0x120c <_ZN27navputter_eeprom_menu_class4pollEv+0x3c>
    132c:	82 37       	cpi	r24, 0x72	; 114
    132e:	79 f4       	brne	.+30     	; 0x134e <_ZN27navputter_eeprom_menu_class4pollEv+0x17e>
    1330:	ce 01       	movw	r24, r28
    1332:	e0 de       	rcall	.-576    	; 0x10f4 <_ZN25navputter_menu_base_class12read_commandEv>
    1334:	ce 01       	movw	r24, r28
    1336:	07 96       	adiw	r24, 0x07	; 7
    1338:	0e 94 6e 31 	call	0x62dc	; 0x62dc <atoi>
    133c:	9c 01       	movw	r18, r24
    133e:	21 50       	subi	r18, 0x01	; 1
    1340:	31 09       	sbc	r19, r1
    1342:	26 30       	cpi	r18, 0x06	; 6
    1344:	31 05       	cpc	r19, r1
    1346:	48 f7       	brcc	.-46     	; 0x131a <_ZN27navputter_eeprom_menu_class4pollEv+0x14a>
    1348:	80 93 69 03 	sts	0x0369, r24	; 0x800369 <myputter+0x269>
    134c:	5f cf       	rjmp	.-322    	; 0x120c <_ZN27navputter_eeprom_menu_class4pollEv+0x3c>
    134e:	83 36       	cpi	r24, 0x63	; 99
    1350:	79 f4       	brne	.+30     	; 0x1370 <_ZN27navputter_eeprom_menu_class4pollEv+0x1a0>
    1352:	ce 01       	movw	r24, r28
    1354:	cf de       	rcall	.-610    	; 0x10f4 <_ZN25navputter_menu_base_class12read_commandEv>
    1356:	ce 01       	movw	r24, r28
    1358:	07 96       	adiw	r24, 0x07	; 7
    135a:	0e 94 6e 31 	call	0x62dc	; 0x62dc <atoi>
    135e:	9c 01       	movw	r18, r24
    1360:	21 50       	subi	r18, 0x01	; 1
    1362:	31 09       	sbc	r19, r1
    1364:	26 30       	cpi	r18, 0x06	; 6
    1366:	31 05       	cpc	r19, r1
    1368:	c0 f6       	brcc	.-80     	; 0x131a <_ZN27navputter_eeprom_menu_class4pollEv+0x14a>
    136a:	80 93 6a 03 	sts	0x036A, r24	; 0x80036a <myputter+0x26a>
    136e:	4e cf       	rjmp	.-356    	; 0x120c <_ZN27navputter_eeprom_menu_class4pollEv+0x3c>
    1370:	86 36       	cpi	r24, 0x66	; 102
    1372:	61 f4       	brne	.+24     	; 0x138c <_ZN27navputter_eeprom_menu_class4pollEv+0x1bc>
    1374:	ce 01       	movw	r24, r28
    1376:	be de       	rcall	.-644    	; 0x10f4 <_ZN25navputter_menu_base_class12read_commandEv>
    1378:	ce 01       	movw	r24, r28
    137a:	07 96       	adiw	r24, 0x07	; 7
    137c:	0e 94 6e 31 	call	0x62dc	; 0x62dc <atoi>
    1380:	82 30       	cpi	r24, 0x02	; 2
    1382:	91 05       	cpc	r25, r1
    1384:	50 f6       	brcc	.-108    	; 0x131a <_ZN27navputter_eeprom_menu_class4pollEv+0x14a>
    1386:	80 93 6b 03 	sts	0x036B, r24	; 0x80036b <myputter+0x26b>
    138a:	40 cf       	rjmp	.-384    	; 0x120c <_ZN27navputter_eeprom_menu_class4pollEv+0x3c>
    138c:	8c 36       	cpi	r24, 0x6C	; 108
    138e:	69 f4       	brne	.+26     	; 0x13aa <_ZN27navputter_eeprom_menu_class4pollEv+0x1da>
    1390:	ce 01       	movw	r24, r28
    1392:	b0 de       	rcall	.-672    	; 0x10f4 <_ZN25navputter_menu_base_class12read_commandEv>
    1394:	ce 01       	movw	r24, r28
    1396:	07 96       	adiw	r24, 0x07	; 7
    1398:	0e 94 6e 31 	call	0x62dc	; 0x62dc <atoi>
    139c:	82 30       	cpi	r24, 0x02	; 2
    139e:	91 05       	cpc	r25, r1
    13a0:	08 f0       	brcs	.+2      	; 0x13a4 <_ZN27navputter_eeprom_menu_class4pollEv+0x1d4>
    13a2:	bb cf       	rjmp	.-138    	; 0x131a <_ZN27navputter_eeprom_menu_class4pollEv+0x14a>
    13a4:	80 93 6c 03 	sts	0x036C, r24	; 0x80036c <myputter+0x26c>
    13a8:	31 cf       	rjmp	.-414    	; 0x120c <_ZN27navputter_eeprom_menu_class4pollEv+0x3c>
    13aa:	83 37       	cpi	r24, 0x73	; 115
    13ac:	81 f4       	brne	.+32     	; 0x13ce <_ZN27navputter_eeprom_menu_class4pollEv+0x1fe>
    13ae:	ce 01       	movw	r24, r28
    13b0:	a1 de       	rcall	.-702    	; 0x10f4 <_ZN25navputter_menu_base_class12read_commandEv>
    13b2:	ce 01       	movw	r24, r28
    13b4:	07 96       	adiw	r24, 0x07	; 7
    13b6:	0e 94 6e 31 	call	0x62dc	; 0x62dc <atoi>
    13ba:	9c 01       	movw	r18, r24
    13bc:	21 50       	subi	r18, 0x01	; 1
    13be:	31 09       	sbc	r19, r1
    13c0:	20 32       	cpi	r18, 0x20	; 32
    13c2:	31 05       	cpc	r19, r1
    13c4:	08 f0       	brcs	.+2      	; 0x13c8 <_ZN27navputter_eeprom_menu_class4pollEv+0x1f8>
    13c6:	a9 cf       	rjmp	.-174    	; 0x131a <_ZN27navputter_eeprom_menu_class4pollEv+0x14a>
    13c8:	80 93 6d 03 	sts	0x036D, r24	; 0x80036d <myputter+0x26d>
    13cc:	1f cf       	rjmp	.-450    	; 0x120c <_ZN27navputter_eeprom_menu_class4pollEv+0x3c>
    13ce:	8b 36       	cpi	r24, 0x6B	; 107
    13d0:	71 f4       	brne	.+28     	; 0x13ee <_ZN27navputter_eeprom_menu_class4pollEv+0x21e>
    13d2:	ce 01       	movw	r24, r28
    13d4:	8f de       	rcall	.-738    	; 0x10f4 <_ZN25navputter_menu_base_class12read_commandEv>
    13d6:	ce 01       	movw	r24, r28
    13d8:	07 96       	adiw	r24, 0x07	; 7
    13da:	0e 94 6e 31 	call	0x62dc	; 0x62dc <atoi>
    13de:	8f 3f       	cpi	r24, 0xFF	; 255
    13e0:	91 05       	cpc	r25, r1
    13e2:	11 f0       	breq	.+4      	; 0x13e8 <_ZN27navputter_eeprom_menu_class4pollEv+0x218>
    13e4:	08 f0       	brcs	.+2      	; 0x13e8 <_ZN27navputter_eeprom_menu_class4pollEv+0x218>
    13e6:	99 cf       	rjmp	.-206    	; 0x131a <_ZN27navputter_eeprom_menu_class4pollEv+0x14a>
    13e8:	80 93 6e 03 	sts	0x036E, r24	; 0x80036e <myputter+0x26e>
    13ec:	0f cf       	rjmp	.-482    	; 0x120c <_ZN27navputter_eeprom_menu_class4pollEv+0x3c>
    13ee:	88 37       	cpi	r24, 0x78	; 120
    13f0:	91 f4       	brne	.+36     	; 0x1416 <_ZN27navputter_eeprom_menu_class4pollEv+0x246>
    13f2:	ce 01       	movw	r24, r28
    13f4:	7f de       	rcall	.-770    	; 0x10f4 <_ZN25navputter_menu_base_class12read_commandEv>
    13f6:	ce 01       	movw	r24, r28
    13f8:	07 96       	adiw	r24, 0x07	; 7
    13fa:	0e 94 6e 31 	call	0x62dc	; 0x62dc <atoi>
    13fe:	9c 01       	movw	r18, r24
    1400:	22 50       	subi	r18, 0x02	; 2
    1402:	31 09       	sbc	r19, r1
    1404:	2f 3f       	cpi	r18, 0xFF	; 255
    1406:	3d 41       	sbci	r19, 0x1D	; 29
    1408:	08 f0       	brcs	.+2      	; 0x140c <_ZN27navputter_eeprom_menu_class4pollEv+0x23c>
    140a:	87 cf       	rjmp	.-242    	; 0x131a <_ZN27navputter_eeprom_menu_class4pollEv+0x14a>
    140c:	90 93 70 03 	sts	0x0370, r25	; 0x800370 <myputter+0x270>
    1410:	80 93 6f 03 	sts	0x036F, r24	; 0x80036f <myputter+0x26f>
    1414:	fb ce       	rjmp	.-522    	; 0x120c <_ZN27navputter_eeprom_menu_class4pollEv+0x3c>
    1416:	89 37       	cpi	r24, 0x79	; 121
    1418:	91 f4       	brne	.+36     	; 0x143e <_ZN27navputter_eeprom_menu_class4pollEv+0x26e>
    141a:	ce 01       	movw	r24, r28
    141c:	6b de       	rcall	.-810    	; 0x10f4 <_ZN25navputter_menu_base_class12read_commandEv>
    141e:	ce 01       	movw	r24, r28
    1420:	07 96       	adiw	r24, 0x07	; 7
    1422:	0e 94 6e 31 	call	0x62dc	; 0x62dc <atoi>
    1426:	9c 01       	movw	r18, r24
    1428:	22 50       	subi	r18, 0x02	; 2
    142a:	31 09       	sbc	r19, r1
    142c:	27 3a       	cpi	r18, 0xA7	; 167
    142e:	3c 40       	sbci	r19, 0x0C	; 12
    1430:	08 f0       	brcs	.+2      	; 0x1434 <_ZN27navputter_eeprom_menu_class4pollEv+0x264>
    1432:	73 cf       	rjmp	.-282    	; 0x131a <_ZN27navputter_eeprom_menu_class4pollEv+0x14a>
    1434:	90 93 72 03 	sts	0x0372, r25	; 0x800372 <myputter+0x272>
    1438:	80 93 71 03 	sts	0x0371, r24	; 0x800371 <myputter+0x271>
    143c:	e7 ce       	rjmp	.-562    	; 0x120c <_ZN27navputter_eeprom_menu_class4pollEv+0x3c>
    143e:	8d 36       	cpi	r24, 0x6D	; 109
    1440:	69 f4       	brne	.+26     	; 0x145c <_ZN27navputter_eeprom_menu_class4pollEv+0x28c>
    1442:	ce 01       	movw	r24, r28
    1444:	57 de       	rcall	.-850    	; 0x10f4 <_ZN25navputter_menu_base_class12read_commandEv>
    1446:	ce 01       	movw	r24, r28
    1448:	07 96       	adiw	r24, 0x07	; 7
    144a:	0e 94 6e 31 	call	0x62dc	; 0x62dc <atoi>
    144e:	82 30       	cpi	r24, 0x02	; 2
    1450:	91 05       	cpc	r25, r1
    1452:	08 f0       	brcs	.+2      	; 0x1456 <_ZN27navputter_eeprom_menu_class4pollEv+0x286>
    1454:	62 cf       	rjmp	.-316    	; 0x131a <_ZN27navputter_eeprom_menu_class4pollEv+0x14a>
    1456:	80 93 73 03 	sts	0x0373, r24	; 0x800373 <myputter+0x273>
    145a:	d8 ce       	rjmp	.-592    	; 0x120c <_ZN27navputter_eeprom_menu_class4pollEv+0x3c>
    145c:	8b 34       	cpi	r24, 0x4B	; 75
    145e:	69 f4       	brne	.+26     	; 0x147a <_ZN27navputter_eeprom_menu_class4pollEv+0x2aa>
    1460:	ce 01       	movw	r24, r28
    1462:	48 de       	rcall	.-880    	; 0x10f4 <_ZN25navputter_menu_base_class12read_commandEv>
    1464:	ce 01       	movw	r24, r28
    1466:	07 96       	adiw	r24, 0x07	; 7
    1468:	0e 94 6e 31 	call	0x62dc	; 0x62dc <atoi>
    146c:	82 30       	cpi	r24, 0x02	; 2
    146e:	91 05       	cpc	r25, r1
    1470:	08 f0       	brcs	.+2      	; 0x1474 <_ZN27navputter_eeprom_menu_class4pollEv+0x2a4>
    1472:	53 cf       	rjmp	.-346    	; 0x131a <_ZN27navputter_eeprom_menu_class4pollEv+0x14a>
    1474:	80 93 74 03 	sts	0x0374, r24	; 0x800374 <myputter+0x274>
    1478:	c9 ce       	rjmp	.-622    	; 0x120c <_ZN27navputter_eeprom_menu_class4pollEv+0x3c>
    147a:	84 36       	cpi	r24, 0x64	; 100
    147c:	09 f0       	breq	.+2      	; 0x1480 <_ZN27navputter_eeprom_menu_class4pollEv+0x2b0>
    147e:	d3 ce       	rjmp	.-602    	; 0x1226 <_ZN27navputter_eeprom_menu_class4pollEv+0x56>
    1480:	ce 01       	movw	r24, r28
    1482:	38 de       	rcall	.-912    	; 0x10f4 <_ZN25navputter_menu_base_class12read_commandEv>
    1484:	ce 01       	movw	r24, r28
    1486:	07 96       	adiw	r24, 0x07	; 7
    1488:	0e 94 6e 31 	call	0x62dc	; 0x62dc <atoi>
    148c:	8f 3f       	cpi	r24, 0xFF	; 255
    148e:	91 05       	cpc	r25, r1
    1490:	11 f0       	breq	.+4      	; 0x1496 <_ZN27navputter_eeprom_menu_class4pollEv+0x2c6>
    1492:	08 f0       	brcs	.+2      	; 0x1496 <_ZN27navputter_eeprom_menu_class4pollEv+0x2c6>
    1494:	42 cf       	rjmp	.-380    	; 0x131a <_ZN27navputter_eeprom_menu_class4pollEv+0x14a>
    if ( val > CONFIG.key_maps ) return ERROR_KEYMAP_OUT_OF_RANGE;
    1496:	20 91 6e 03 	lds	r18, 0x036E	; 0x80036e <myputter+0x26e>
    149a:	28 17       	cp	r18, r24
    149c:	19 06       	cpc	r1, r25
    149e:	1c f0       	brlt	.+6      	; 0x14a6 <_ZN27navputter_eeprom_menu_class4pollEv+0x2d6>
                _EEPROM_DESC_
    14a0:	80 93 75 03 	sts	0x0375, r24	; 0x800375 <myputter+0x275>
    14a4:	b3 ce       	rjmp	.-666    	; 0x120c <_ZN27navputter_eeprom_menu_class4pollEv+0x3c>
    14a6:	89 e0       	ldi	r24, 0x09	; 9
    14a8:	39 cf       	rjmp	.-398    	; 0x131c <_ZN27navputter_eeprom_menu_class4pollEv+0x14c>

000014aa <_Z5atoxiPKc>:
        if ((p[1] == 'x')  || (p[1] == 'X'))
    14aa:	fc 01       	movw	r30, r24
    14ac:	21 81       	ldd	r18, Z+1	; 0x01
    14ae:	2f 7d       	andi	r18, 0xDF	; 223
                return(strtol(&p[2], (char **)0, 16));
    14b0:	40 e1       	ldi	r20, 0x10	; 16
    14b2:	50 e0       	ldi	r21, 0x00	; 0
    14b4:	70 e0       	ldi	r23, 0x00	; 0
    14b6:	60 e0       	ldi	r22, 0x00	; 0
        if ((p[1] == 'x')  || (p[1] == 'X'))
    14b8:	28 35       	cpi	r18, 0x58	; 88
    14ba:	09 f4       	brne	.+2      	; 0x14be <_Z5atoxiPKc+0x14>
                return(strtol(&p[2], (char **)0, 16));
    14bc:	02 96       	adiw	r24, 0x02	; 2
                return(strtol(p, (char **)0, 16));
    14be:	0e 94 5f 30 	call	0x60be	; 0x60be <strtol>
}
    14c2:	86 2f       	mov	r24, r22
    14c4:	08 95       	ret

000014c6 <__vector_17>:
{
    14c6:	1f 92       	push	r1
    14c8:	1f b6       	in	r1, 0x3f	; 63
    14ca:	1f 92       	push	r1
    14cc:	11 24       	eor	r1, r1
    14ce:	8f 93       	push	r24
    14d0:	9f 93       	push	r25
    14d2:	af 93       	push	r26
    14d4:	bf 93       	push	r27
    global_ticks++;
    14d6:	80 91 be 08 	lds	r24, 0x08BE	; 0x8008be <global_ticks>
    14da:	90 91 bf 08 	lds	r25, 0x08BF	; 0x8008bf <global_ticks+0x1>
    14de:	a0 91 c0 08 	lds	r26, 0x08C0	; 0x8008c0 <global_ticks+0x2>
    14e2:	b0 91 c1 08 	lds	r27, 0x08C1	; 0x8008c1 <global_ticks+0x3>
    14e6:	01 96       	adiw	r24, 0x01	; 1
    14e8:	a1 1d       	adc	r26, r1
    14ea:	b1 1d       	adc	r27, r1
    14ec:	80 93 be 08 	sts	0x08BE, r24	; 0x8008be <global_ticks>
    14f0:	90 93 bf 08 	sts	0x08BF, r25	; 0x8008bf <global_ticks+0x1>
    14f4:	a0 93 c0 08 	sts	0x08C0, r26	; 0x8008c0 <global_ticks+0x2>
    14f8:	b0 93 c1 08 	sts	0x08C1, r27	; 0x8008c1 <global_ticks+0x3>
}
    14fc:	bf 91       	pop	r27
    14fe:	af 91       	pop	r26
    1500:	9f 91       	pop	r25
    1502:	8f 91       	pop	r24
    1504:	1f 90       	pop	r1
    1506:	1f be       	out	0x3f, r1	; 63
    1508:	1f 90       	pop	r1
    150a:	18 95       	reti

0000150c <ser_push>:
            if (((m_head + 1) == m_tail ) || (((m_head+1) == SERIAL_BUFFER_SIZE)&(m_tail==0)))
    150c:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <myputter+0x40>
    1510:	29 2f       	mov	r18, r25
    1512:	30 e0       	ldi	r19, 0x00	; 0
    1514:	40 91 41 01 	lds	r20, 0x0141	; 0x800141 <myputter+0x41>
    1518:	b9 01       	movw	r22, r18
    151a:	6f 5f       	subi	r22, 0xFF	; 255
    151c:	7f 4f       	sbci	r23, 0xFF	; 255
    151e:	46 17       	cp	r20, r22
    1520:	17 06       	cpc	r1, r23
    1522:	69 f0       	breq	.+26     	; 0x153e <ser_push+0x32>
    1524:	9f 30       	cpi	r25, 0x0F	; 15
    1526:	11 f4       	brne	.+4      	; 0x152c <ser_push+0x20>
    1528:	44 23       	and	r20, r20
    152a:	49 f0       	breq	.+18     	; 0x153e <ser_push+0x32>
            m_serial_buffer[m_head] = c;
    152c:	20 50       	subi	r18, 0x00	; 0
    152e:	3f 4f       	sbci	r19, 0xFF	; 255
    1530:	f9 01       	movw	r30, r18
    1532:	80 ab       	std	Z+48, r24	; 0x30
            m_head = ((m_head+1)==SERIAL_BUFFER_SIZE)?0:m_head+1;
    1534:	9f 30       	cpi	r25, 0x0F	; 15
    1536:	21 f0       	breq	.+8      	; 0x1540 <ser_push+0x34>
    1538:	9f 5f       	subi	r25, 0xFF	; 255
    153a:	90 93 40 01 	sts	0x0140, r25	; 0x800140 <myputter+0x40>
}
    153e:	08 95       	ret
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	fb cf       	rjmp	.-10     	; 0x153a <ser_push+0x2e>

00001544 <_Z9init_keysv>:
{
    1544:	8f 92       	push	r8
    1546:	9f 92       	push	r9
    1548:	af 92       	push	r10
    154a:	bf 92       	push	r11
    154c:	cf 92       	push	r12
    154e:	df 92       	push	r13
    1550:	ef 92       	push	r14
    1552:	ff 92       	push	r15
    1554:	0f 93       	push	r16
    1556:	1f 93       	push	r17
    1558:	cf 93       	push	r28
    155a:	df 93       	push	r29
    SERIAL.print("setting keymap. v[0][0]=%d\n", myputter.m_cur_map[0][0] );
    155c:	c6 e7       	ldi	r28, 0x76	; 118
    155e:	d3 e0       	ldi	r29, 0x03	; 3
    1560:	88 81       	ld	r24, Y
    1562:	1f 92       	push	r1
    1564:	8f 93       	push	r24
    1566:	8e e5       	ldi	r24, 0x5E	; 94
    1568:	c8 2e       	mov	r12, r24
    156a:	86 e0       	ldi	r24, 0x06	; 6
    156c:	d8 2e       	mov	r13, r24
    156e:	df 92       	push	r13
    1570:	cf 92       	push	r12
    1572:	9a e1       	ldi	r25, 0x1A	; 26
    1574:	e9 2e       	mov	r14, r25
    1576:	91 e0       	ldi	r25, 0x01	; 1
    1578:	f9 2e       	mov	r15, r25
    157a:	ff 92       	push	r15
    157c:	ef 92       	push	r14
    157e:	d4 d8       	rcall	.-3672   	; 0x728 <_ZN22navputter_serial_class5printEPKcz>
    void set_keymap( void )
    {
        int i=0;
#define _KM_(c1,c2,c3,c4,c5,c6) m_cur_map[i][0]=c1; m_cur_map[i][1]=c2; m_cur_map[i][2]=c3; m_cur_map[i][3]=c4; m_cur_map[i][4]=c5; m_cur_map[i][5]=c6; i++;
        KEYPAD_PIN_MAP
    1580:	07 e0       	ldi	r16, 0x07	; 7
    1582:	08 83       	st	Y, r16
    1584:	8f ef       	ldi	r24, 0xFF	; 255
    1586:	80 93 77 03 	sts	0x0377, r24	; 0x800377 <myputter+0x277>
    158a:	80 93 78 03 	sts	0x0378, r24	; 0x800378 <myputter+0x278>
    158e:	80 93 79 03 	sts	0x0379, r24	; 0x800379 <myputter+0x279>
    1592:	23 e0       	ldi	r18, 0x03	; 3
    1594:	82 2e       	mov	r8, r18
    1596:	80 92 7a 03 	sts	0x037A, r8	; 0x80037a <myputter+0x27a>
    159a:	80 93 7b 03 	sts	0x037B, r24	; 0x80037b <myputter+0x27b>
    159e:	80 93 7c 03 	sts	0x037C, r24	; 0x80037c <myputter+0x27c>
    15a2:	80 93 7d 03 	sts	0x037D, r24	; 0x80037d <myputter+0x27d>
    15a6:	10 92 7e 03 	sts	0x037E, r1	; 0x80037e <myputter+0x27e>
    15aa:	d1 e0       	ldi	r29, 0x01	; 1
    15ac:	d0 93 7f 03 	sts	0x037F, r29	; 0x80037f <myputter+0x27f>
    15b0:	12 e0       	ldi	r17, 0x02	; 2
    15b2:	10 93 80 03 	sts	0x0380, r17	; 0x800380 <myputter+0x280>
    15b6:	80 93 81 03 	sts	0x0381, r24	; 0x800381 <myputter+0x281>
    15ba:	80 93 82 03 	sts	0x0382, r24	; 0x800382 <myputter+0x282>
    15be:	80 93 83 03 	sts	0x0383, r24	; 0x800383 <myputter+0x283>
    15c2:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <myputter+0x284>
    15c6:	90 e1       	ldi	r25, 0x10	; 16
    15c8:	90 93 85 03 	sts	0x0385, r25	; 0x800385 <myputter+0x285>
    15cc:	92 e1       	ldi	r25, 0x12	; 18
    15ce:	90 93 86 03 	sts	0x0386, r25	; 0x800386 <myputter+0x286>
    15d2:	80 93 87 03 	sts	0x0387, r24	; 0x800387 <myputter+0x287>
    15d6:	80 93 88 03 	sts	0x0388, r24	; 0x800388 <myputter+0x288>
    15da:	80 93 89 03 	sts	0x0389, r24	; 0x800389 <myputter+0x289>
    15de:	9c e0       	ldi	r25, 0x0C	; 12
    15e0:	90 93 8a 03 	sts	0x038A, r25	; 0x80038a <myputter+0x28a>
    15e4:	9d e0       	ldi	r25, 0x0D	; 13
    15e6:	90 93 8b 03 	sts	0x038B, r25	; 0x80038b <myputter+0x28b>
    15ea:	9e e0       	ldi	r25, 0x0E	; 14
    15ec:	90 93 8c 03 	sts	0x038C, r25	; 0x80038c <myputter+0x28c>
    15f0:	9f e0       	ldi	r25, 0x0F	; 15
    15f2:	90 93 8d 03 	sts	0x038D, r25	; 0x80038d <myputter+0x28d>
    15f6:	91 e1       	ldi	r25, 0x11	; 17
    15f8:	90 93 8e 03 	sts	0x038E, r25	; 0x80038e <myputter+0x28e>
    15fc:	9b e0       	ldi	r25, 0x0B	; 11
    15fe:	90 93 8f 03 	sts	0x038F, r25	; 0x80038f <myputter+0x28f>
    1602:	c8 e0       	ldi	r28, 0x08	; 8
    1604:	c0 93 90 03 	sts	0x0390, r28	; 0x800390 <myputter+0x290>
    1608:	99 e0       	ldi	r25, 0x09	; 9
    160a:	90 93 91 03 	sts	0x0391, r25	; 0x800391 <myputter+0x291>
    160e:	9a e0       	ldi	r25, 0x0A	; 10
    1610:	90 93 92 03 	sts	0x0392, r25	; 0x800392 <myputter+0x292>
    1614:	80 93 93 03 	sts	0x0393, r24	; 0x800393 <myputter+0x293>
    1618:	80 93 94 03 	sts	0x0394, r24	; 0x800394 <myputter+0x294>
    161c:	80 93 95 03 	sts	0x0395, r24	; 0x800395 <myputter+0x295>
    1620:	34 e0       	ldi	r19, 0x04	; 4
    1622:	b3 2e       	mov	r11, r19
    1624:	b0 92 96 03 	sts	0x0396, r11	; 0x800396 <myputter+0x296>
    1628:	45 e0       	ldi	r20, 0x05	; 5
    162a:	94 2e       	mov	r9, r20
    162c:	90 92 97 03 	sts	0x0397, r9	; 0x800397 <myputter+0x297>
    1630:	56 e0       	ldi	r21, 0x06	; 6
    1632:	a5 2e       	mov	r10, r21
    1634:	a0 92 98 03 	sts	0x0398, r10	; 0x800398 <myputter+0x298>
    1638:	00 93 99 03 	sts	0x0399, r16	; 0x800399 <myputter+0x299>
    SERIAL.print("setting keymap. v[0][0]=%d\n", myputter.m_cur_map[0][0] );
    163c:	1f 92       	push	r1
    163e:	0f 93       	push	r16
    1640:	df 92       	push	r13
    1642:	cf 92       	push	r12
    1644:	ff 92       	push	r15
    1646:	ef 92       	push	r14
    1648:	6f d8       	rcall	.-3874   	; 0x728 <_ZN22navputter_serial_class5printEPKcz>

    void set_seq_map( void )
    {
#define KP_KEY( _sc_, _ev_, _act_, _x_, _y_ ) \
        m_seq_map[_ev_]=_act_;
        KP_KEY_LIST
    164a:	88 e0       	ldi	r24, 0x08	; 8
    164c:	ed e6       	ldi	r30, 0x6D	; 109
    164e:	f4 e0       	ldi	r31, 0x04	; 4
    1650:	aa e9       	ldi	r26, 0x9A	; 154
    1652:	b3 e0       	ldi	r27, 0x03	; 3
    1654:	01 90       	ld	r0, Z+
    1656:	0d 92       	st	X+, r0
    1658:	8a 95       	dec	r24
    165a:	e1 f7       	brne	.-8      	; 0x1654 <_Z9init_keysv+0x110>
    165c:	10 92 a6 03 	sts	0x03A6, r1	; 0x8003a6 <myputter+0x2a6>
    1660:	10 92 a7 03 	sts	0x03A7, r1	; 0x8003a7 <myputter+0x2a7>
    1664:	10 92 a8 03 	sts	0x03A8, r1	; 0x8003a8 <myputter+0x2a8>
    1668:	10 92 a9 03 	sts	0x03A9, r1	; 0x8003a9 <myputter+0x2a9>
    166c:	d0 93 a2 03 	sts	0x03A2, r29	; 0x8003a2 <myputter+0x2a2>
    1670:	81 e6       	ldi	r24, 0x61	; 97
    1672:	80 93 a3 03 	sts	0x03A3, r24	; 0x8003a3 <myputter+0x2a3>
    1676:	8b e3       	ldi	r24, 0x3B	; 59
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	90 93 a5 03 	sts	0x03A5, r25	; 0x8003a5 <myputter+0x2a5>
    167e:	80 93 a4 03 	sts	0x03A4, r24	; 0x8003a4 <myputter+0x2a4>
    1682:	10 92 ae 03 	sts	0x03AE, r1	; 0x8003ae <myputter+0x2ae>
    1686:	10 92 af 03 	sts	0x03AF, r1	; 0x8003af <myputter+0x2af>
    168a:	10 92 b0 03 	sts	0x03B0, r1	; 0x8003b0 <myputter+0x2b0>
    168e:	10 92 b1 03 	sts	0x03B1, r1	; 0x8003b1 <myputter+0x2b1>
    1692:	d0 93 aa 03 	sts	0x03AA, r29	; 0x8003aa <myputter+0x2aa>
    1696:	82 e6       	ldi	r24, 0x62	; 98
    1698:	80 93 ab 03 	sts	0x03AB, r24	; 0x8003ab <myputter+0x2ab>
    169c:	85 e1       	ldi	r24, 0x15	; 21
    169e:	91 e0       	ldi	r25, 0x01	; 1
    16a0:	90 93 ad 03 	sts	0x03AD, r25	; 0x8003ad <myputter+0x2ad>
    16a4:	80 93 ac 03 	sts	0x03AC, r24	; 0x8003ac <myputter+0x2ac>
    16a8:	10 92 b6 03 	sts	0x03B6, r1	; 0x8003b6 <myputter+0x2b6>
    16ac:	10 92 b7 03 	sts	0x03B7, r1	; 0x8003b7 <myputter+0x2b7>
    16b0:	10 92 b8 03 	sts	0x03B8, r1	; 0x8003b8 <myputter+0x2b8>
    16b4:	10 92 b9 03 	sts	0x03B9, r1	; 0x8003b9 <myputter+0x2b9>
    16b8:	d0 93 b2 03 	sts	0x03B2, r29	; 0x8003b2 <myputter+0x2b2>
    16bc:	83 e6       	ldi	r24, 0x63	; 99
    16be:	80 93 b3 03 	sts	0x03B3, r24	; 0x8003b3 <myputter+0x2b3>
    16c2:	86 e0       	ldi	r24, 0x06	; 6
    16c4:	94 e0       	ldi	r25, 0x04	; 4
    16c6:	90 93 b5 03 	sts	0x03B5, r25	; 0x8003b5 <myputter+0x2b5>
    16ca:	80 93 b4 03 	sts	0x03B4, r24	; 0x8003b4 <myputter+0x2b4>
    16ce:	10 92 be 03 	sts	0x03BE, r1	; 0x8003be <myputter+0x2be>
    16d2:	10 92 bf 03 	sts	0x03BF, r1	; 0x8003bf <myputter+0x2bf>
    16d6:	10 92 c0 03 	sts	0x03C0, r1	; 0x8003c0 <myputter+0x2c0>
    16da:	10 92 c1 03 	sts	0x03C1, r1	; 0x8003c1 <myputter+0x2c1>
    16de:	d0 93 ba 03 	sts	0x03BA, r29	; 0x8003ba <myputter+0x2ba>
    16e2:	83 e3       	ldi	r24, 0x33	; 51
    16e4:	80 93 bb 03 	sts	0x03BB, r24	; 0x8003bb <myputter+0x2bb>
    16e8:	8d e2       	ldi	r24, 0x2D	; 45
    16ea:	94 e0       	ldi	r25, 0x04	; 4
    16ec:	90 93 bd 03 	sts	0x03BD, r25	; 0x8003bd <myputter+0x2bd>
    16f0:	80 93 bc 03 	sts	0x03BC, r24	; 0x8003bc <myputter+0x2bc>
    16f4:	10 92 c9 03 	sts	0x03C9, r1	; 0x8003c9 <myputter+0x2c9>
    16f8:	10 92 c8 03 	sts	0x03C8, r1	; 0x8003c8 <myputter+0x2c8>
    16fc:	80 92 c2 03 	sts	0x03C2, r8	; 0x8003c2 <myputter+0x2c2>
    1700:	82 e3       	ldi	r24, 0x32	; 50
    1702:	80 93 c3 03 	sts	0x03C3, r24	; 0x8003c3 <myputter+0x2c3>
    1706:	82 e5       	ldi	r24, 0x52	; 82
    1708:	90 e4       	ldi	r25, 0x40	; 64
    170a:	90 93 c5 03 	sts	0x03C5, r25	; 0x8003c5 <myputter+0x2c5>
    170e:	80 93 c4 03 	sts	0x03C4, r24	; 0x8003c4 <myputter+0x2c4>
    1712:	82 e5       	ldi	r24, 0x52	; 82
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	90 93 c7 03 	sts	0x03C7, r25	; 0x8003c7 <myputter+0x2c7>
    171a:	80 93 c6 03 	sts	0x03C6, r24	; 0x8003c6 <myputter+0x2c6>
    171e:	ea ec       	ldi	r30, 0xCA	; 202
    1720:	f3 e0       	ldi	r31, 0x03	; 3
    1722:	df 01       	movw	r26, r30
    1724:	2c 2f       	mov	r18, r28
    1726:	1d 92       	st	X+, r1
    1728:	2a 95       	dec	r18
    172a:	e9 f7       	brne	.-6      	; 0x1726 <_Z9init_keysv+0x1e2>
    172c:	10 83       	st	Z, r17
    172e:	82 e0       	ldi	r24, 0x02	; 2
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	90 93 cd 03 	sts	0x03CD, r25	; 0x8003cd <myputter+0x2cd>
    1736:	80 93 cc 03 	sts	0x03CC, r24	; 0x8003cc <myputter+0x2cc>
    173a:	10 92 d6 03 	sts	0x03D6, r1	; 0x8003d6 <myputter+0x2d6>
    173e:	10 92 d7 03 	sts	0x03D7, r1	; 0x8003d7 <myputter+0x2d7>
    1742:	10 92 d8 03 	sts	0x03D8, r1	; 0x8003d8 <myputter+0x2d8>
    1746:	10 92 d9 03 	sts	0x03D9, r1	; 0x8003d9 <myputter+0x2d9>
    174a:	d0 93 d2 03 	sts	0x03D2, r29	; 0x8003d2 <myputter+0x2d2>
    174e:	21 e3       	ldi	r18, 0x31	; 49
    1750:	20 93 d3 03 	sts	0x03D3, r18	; 0x8003d3 <myputter+0x2d3>
    1754:	26 e0       	ldi	r18, 0x06	; 6
    1756:	30 e0       	ldi	r19, 0x00	; 0
    1758:	30 93 d5 03 	sts	0x03D5, r19	; 0x8003d5 <myputter+0x2d5>
    175c:	20 93 d4 03 	sts	0x03D4, r18	; 0x8003d4 <myputter+0x2d4>
    1760:	10 92 e1 03 	sts	0x03E1, r1	; 0x8003e1 <myputter+0x2e1>
    1764:	10 92 e0 03 	sts	0x03E0, r1	; 0x8003e0 <myputter+0x2e0>
    1768:	90 92 da 03 	sts	0x03DA, r9	; 0x8003da <myputter+0x2da>
    176c:	24 e3       	ldi	r18, 0x34	; 52
    176e:	20 93 db 03 	sts	0x03DB, r18	; 0x8003db <myputter+0x2db>
    1772:	20 e5       	ldi	r18, 0x50	; 80
    1774:	30 e4       	ldi	r19, 0x40	; 64
    1776:	30 93 dd 03 	sts	0x03DD, r19	; 0x8003dd <myputter+0x2dd>
    177a:	20 93 dc 03 	sts	0x03DC, r18	; 0x8003dc <myputter+0x2dc>
    177e:	20 e5       	ldi	r18, 0x50	; 80
    1780:	30 e0       	ldi	r19, 0x00	; 0
    1782:	30 93 df 03 	sts	0x03DF, r19	; 0x8003df <myputter+0x2df>
    1786:	20 93 de 03 	sts	0x03DE, r18	; 0x8003de <myputter+0x2de>
    178a:	10 92 e6 03 	sts	0x03E6, r1	; 0x8003e6 <myputter+0x2e6>
    178e:	10 92 e7 03 	sts	0x03E7, r1	; 0x8003e7 <myputter+0x2e7>
    1792:	10 92 e8 03 	sts	0x03E8, r1	; 0x8003e8 <myputter+0x2e8>
    1796:	10 92 e9 03 	sts	0x03E9, r1	; 0x8003e9 <myputter+0x2e9>
    179a:	10 93 e2 03 	sts	0x03E2, r17	; 0x8003e2 <myputter+0x2e2>
    179e:	47 e3       	ldi	r20, 0x37	; 55
    17a0:	40 93 e3 03 	sts	0x03E3, r20	; 0x8003e3 <myputter+0x2e3>
    17a4:	41 e0       	ldi	r20, 0x01	; 1
    17a6:	50 e0       	ldi	r21, 0x00	; 0
    17a8:	50 93 e5 03 	sts	0x03E5, r21	; 0x8003e5 <myputter+0x2e5>
    17ac:	40 93 e4 03 	sts	0x03E4, r20	; 0x8003e4 <myputter+0x2e4>
    17b0:	10 92 f1 03 	sts	0x03F1, r1	; 0x8003f1 <myputter+0x2f1>
    17b4:	10 92 f0 03 	sts	0x03F0, r1	; 0x8003f0 <myputter+0x2f0>
    17b8:	a0 92 ea 03 	sts	0x03EA, r10	; 0x8003ea <myputter+0x2ea>
    17bc:	46 e3       	ldi	r20, 0x36	; 54
    17be:	40 93 eb 03 	sts	0x03EB, r20	; 0x8003eb <myputter+0x2eb>
    17c2:	4f e4       	ldi	r20, 0x4F	; 79
    17c4:	50 e4       	ldi	r21, 0x40	; 64
    17c6:	50 93 ed 03 	sts	0x03ED, r21	; 0x8003ed <myputter+0x2ed>
    17ca:	40 93 ec 03 	sts	0x03EC, r20	; 0x8003ec <myputter+0x2ec>
    17ce:	30 93 ef 03 	sts	0x03EF, r19	; 0x8003ef <myputter+0x2ef>
    17d2:	20 93 ee 03 	sts	0x03EE, r18	; 0x8003ee <myputter+0x2ee>
    17d6:	e2 ef       	ldi	r30, 0xF2	; 242
    17d8:	f3 e0       	ldi	r31, 0x03	; 3
    17da:	df 01       	movw	r26, r30
    17dc:	2c 2f       	mov	r18, r28
    17de:	1d 92       	st	X+, r1
    17e0:	2a 95       	dec	r18
    17e2:	e9 f7       	brne	.-6      	; 0x17de <_Z9init_keysv+0x29a>
    17e4:	10 83       	st	Z, r17
    17e6:	90 93 f5 03 	sts	0x03F5, r25	; 0x8003f5 <myputter+0x2f5>
    17ea:	80 93 f4 03 	sts	0x03F4, r24	; 0x8003f4 <myputter+0x2f4>
    17ee:	ea ef       	ldi	r30, 0xFA	; 250
    17f0:	f3 e0       	ldi	r31, 0x03	; 3
    17f2:	df 01       	movw	r26, r30
    17f4:	2c 2f       	mov	r18, r28
    17f6:	1d 92       	st	X+, r1
    17f8:	2a 95       	dec	r18
    17fa:	e9 f7       	brne	.-6      	; 0x17f6 <_Z9init_keysv+0x2b2>
    17fc:	10 83       	st	Z, r17
    17fe:	90 93 fd 03 	sts	0x03FD, r25	; 0x8003fd <myputter+0x2fd>
    1802:	80 93 fc 03 	sts	0x03FC, r24	; 0x8003fc <myputter+0x2fc>
    1806:	10 92 09 04 	sts	0x0409, r1	; 0x800409 <myputter+0x309>
    180a:	10 92 08 04 	sts	0x0408, r1	; 0x800408 <myputter+0x308>
    180e:	b0 92 02 04 	sts	0x0402, r11	; 0x800402 <myputter+0x302>
    1812:	28 e3       	ldi	r18, 0x38	; 56
    1814:	20 93 03 04 	sts	0x0403, r18	; 0x800403 <myputter+0x303>
    1818:	21 e5       	ldi	r18, 0x51	; 81
    181a:	30 e4       	ldi	r19, 0x40	; 64
    181c:	30 93 05 04 	sts	0x0405, r19	; 0x800405 <myputter+0x305>
    1820:	20 93 04 04 	sts	0x0404, r18	; 0x800404 <myputter+0x304>
    1824:	21 e5       	ldi	r18, 0x51	; 81
    1826:	30 e0       	ldi	r19, 0x00	; 0
    1828:	30 93 07 04 	sts	0x0407, r19	; 0x800407 <myputter+0x307>
    182c:	20 93 06 04 	sts	0x0406, r18	; 0x800406 <myputter+0x306>
    1830:	ea e0       	ldi	r30, 0x0A	; 10
    1832:	f4 e0       	ldi	r31, 0x04	; 4
    1834:	df 01       	movw	r26, r30
    1836:	2c 2f       	mov	r18, r28
    1838:	1d 92       	st	X+, r1
    183a:	2a 95       	dec	r18
    183c:	e9 f7       	brne	.-6      	; 0x1838 <_Z9init_keysv+0x2f4>
    183e:	10 83       	st	Z, r17
    1840:	90 93 0d 04 	sts	0x040D, r25	; 0x80040d <myputter+0x30d>
    1844:	80 93 0c 04 	sts	0x040C, r24	; 0x80040c <myputter+0x30c>
    1848:	10 92 16 04 	sts	0x0416, r1	; 0x800416 <myputter+0x316>
    184c:	10 92 17 04 	sts	0x0417, r1	; 0x800417 <myputter+0x317>
    1850:	10 92 18 04 	sts	0x0418, r1	; 0x800418 <myputter+0x318>
    1854:	10 92 19 04 	sts	0x0419, r1	; 0x800419 <myputter+0x319>
    1858:	d0 93 12 04 	sts	0x0412, r29	; 0x800412 <myputter+0x312>
    185c:	24 e6       	ldi	r18, 0x64	; 100
    185e:	20 93 13 04 	sts	0x0413, r18	; 0x800413 <myputter+0x313>
    1862:	2c e2       	ldi	r18, 0x2C	; 44
    1864:	31 e0       	ldi	r19, 0x01	; 1
    1866:	30 93 15 04 	sts	0x0415, r19	; 0x800415 <myputter+0x315>
    186a:	20 93 14 04 	sts	0x0414, r18	; 0x800414 <myputter+0x314>
    186e:	ea e1       	ldi	r30, 0x1A	; 26
    1870:	f4 e0       	ldi	r31, 0x04	; 4
    1872:	df 01       	movw	r26, r30
    1874:	2c 2f       	mov	r18, r28
    1876:	1d 92       	st	X+, r1
    1878:	2a 95       	dec	r18
    187a:	e9 f7       	brne	.-6      	; 0x1876 <_Z9init_keysv+0x332>
    187c:	00 83       	st	Z, r16
    187e:	e2 e2       	ldi	r30, 0x22	; 34
    1880:	f4 e0       	ldi	r31, 0x04	; 4
    1882:	df 01       	movw	r26, r30
    1884:	2c 2f       	mov	r18, r28
    1886:	1d 92       	st	X+, r1
    1888:	2a 95       	dec	r18
    188a:	e9 f7       	brne	.-6      	; 0x1886 <_Z9init_keysv+0x342>
    188c:	10 83       	st	Z, r17
    188e:	90 93 25 04 	sts	0x0425, r25	; 0x800425 <myputter+0x325>
    1892:	80 93 24 04 	sts	0x0424, r24	; 0x800424 <myputter+0x324>
    1896:	ea e2       	ldi	r30, 0x2A	; 42
    1898:	f4 e0       	ldi	r31, 0x04	; 4
    189a:	df 01       	movw	r26, r30
    189c:	2c 2f       	mov	r18, r28
    189e:	1d 92       	st	X+, r1
    18a0:	2a 95       	dec	r18
    18a2:	e9 f7       	brne	.-6      	; 0x189e <_Z9init_keysv+0x35a>
    18a4:	c0 83       	st	Z, r28
    SERIAL.print("setting seq map, seq 0=%d\n", myputter.m_seq_map[0].action );
    18a6:	1f 92       	push	r1
    18a8:	df 93       	push	r29
    18aa:	8a e7       	ldi	r24, 0x7A	; 122
    18ac:	96 e0       	ldi	r25, 0x06	; 6
    18ae:	9f 93       	push	r25
    18b0:	8f 93       	push	r24
    18b2:	ff 92       	push	r15
    18b4:	ef 92       	push	r14
    18b6:	0e 94 94 03 	call	0x728	; 0x728 <_ZN22navputter_serial_class5printEPKcz>
}
    18ba:	8d b7       	in	r24, 0x3d	; 61
    18bc:	9e b7       	in	r25, 0x3e	; 62
    18be:	42 96       	adiw	r24, 0x12	; 18
    18c0:	0f b6       	in	r0, 0x3f	; 63
    18c2:	f8 94       	cli
    18c4:	9e bf       	out	0x3e, r25	; 62
    18c6:	0f be       	out	0x3f, r0	; 63
    18c8:	8d bf       	out	0x3d, r24	; 61
    18ca:	df 91       	pop	r29
    18cc:	cf 91       	pop	r28
    18ce:	1f 91       	pop	r17
    18d0:	0f 91       	pop	r16
    18d2:	ff 90       	pop	r15
    18d4:	ef 90       	pop	r14
    18d6:	df 90       	pop	r13
    18d8:	cf 90       	pop	r12
    18da:	bf 90       	pop	r11
    18dc:	af 90       	pop	r10
    18de:	9f 90       	pop	r9
    18e0:	8f 90       	pop	r8
    18e2:	08 95       	ret

000018e4 <start_timer>:
    cli();
    18e4:	f8 94       	cli
    DDRE = 0xFF;
    18e6:	8f ef       	ldi	r24, 0xFF	; 255
    18e8:	8d b9       	out	0x0d, r24	; 13
    TCCR1A |= 1 << WGM12;       // Configure timer 1 for CTC mode
    18ea:	e0 e8       	ldi	r30, 0x80	; 128
    18ec:	f0 e0       	ldi	r31, 0x00	; 0
    18ee:	80 81       	ld	r24, Z
    18f0:	88 60       	ori	r24, 0x08	; 8
    18f2:	80 83       	st	Z, r24
    TCCR1B= (1<<WGM12) | (1<<CS10) ;
    18f4:	89 e0       	ldi	r24, 0x09	; 9
    18f6:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    OCR1A = 20000;              // 20000
    18fa:	80 e2       	ldi	r24, 0x20	; 32
    18fc:	9e e4       	ldi	r25, 0x4E	; 78
    18fe:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1902:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    TIMSK1 |= 1 << OCIE1A;      // Output Compare A Match Interrupt Enable
    1906:	ef e6       	ldi	r30, 0x6F	; 111
    1908:	f0 e0       	ldi	r31, 0x00	; 0
    190a:	80 81       	ld	r24, Z
    190c:	82 60       	ori	r24, 0x02	; 2
    190e:	80 83       	st	Z, r24
    sei();                      // enable interrupts
    1910:	78 94       	sei
}
    1912:	08 95       	ret

00001914 <get_mouse_status>:
{
    1914:	fc 01       	movw	r30, r24
    *y = MOUSE.get_dir( NP_MOUSE_DOWN ) - MOUSE.get_dir( NP_MOUSE_UP );
    1916:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <myputter+0x1>
    191a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <myputter>
    191e:	98 1b       	sub	r25, r24
    1920:	90 83       	st	Z, r25
    *x = MOUSE.get_dir( NP_MOUSE_RIGHT ) - MOUSE.get_dir( NP_MOUSE_LEFT );
    1922:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <myputter+0x3>
    1926:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <myputter+0x2>
    192a:	89 1b       	sub	r24, r25
    192c:	fb 01       	movw	r30, r22
    192e:	80 83       	st	Z, r24
    *buttons = 
    1930:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <myputter+0x4>
    1934:	81 11       	cpse	r24, r1
    1936:	07 c0       	rjmp	.+14     	; 0x1946 <get_mouse_status+0x32>
            return m_mouse_clicks[button];
    1938:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <myputter+0x6>
    193c:	81 11       	cpse	r24, r1
    193e:	05 c0       	rjmp	.+10     	; 0x194a <get_mouse_status+0x36>
    1940:	fa 01       	movw	r30, r20
    1942:	80 83       	st	Z, r24
}
    1944:	08 95       	ret
    *buttons = 
    1946:	81 e0       	ldi	r24, 0x01	; 1
    1948:	fb cf       	rjmp	.-10     	; 0x1940 <get_mouse_status+0x2c>
    194a:	82 e0       	ldi	r24, 0x02	; 2
    194c:	f9 cf       	rjmp	.-14     	; 0x1940 <get_mouse_status+0x2c>

0000194e <_ZN22navputter_eeprom_class5beginEv>:
    while ( !ready() ) DOG.kick();
    194e:	f9 9b       	sbis	0x1f, 1	; 31
    1950:	02 c0       	rjmp	.+4      	; 0x1956 <_ZN22navputter_eeprom_class5beginEv+0x8>
            wdt_reset();
    1952:	a8 95       	wdr
    1954:	fc cf       	rjmp	.-8      	; 0x194e <_ZN22navputter_eeprom_class5beginEv>
}
    1956:	08 95       	ret

00001958 <_ZN22navputter_keypad_class5pressEhhh>:
{
    1958:	8f 92       	push	r8
    195a:	9f 92       	push	r9
    195c:	af 92       	push	r10
    195e:	bf 92       	push	r11
    1960:	df 92       	push	r13
    1962:	ef 92       	push	r14
    1964:	ff 92       	push	r15
    1966:	0f 93       	push	r16
    1968:	1f 93       	push	r17
    196a:	cf 93       	push	r28
    196c:	df 93       	push	r29
    196e:	16 2f       	mov	r17, r22
    uint8_t seq = myputter.m_cur_map[row][col];
    1970:	86 e0       	ldi	r24, 0x06	; 6
    1972:	48 9f       	mul	r20, r24
    1974:	f0 01       	movw	r30, r0
    1976:	11 24       	eor	r1, r1
    1978:	e0 50       	subi	r30, 0x00	; 0
    197a:	ff 4f       	sbci	r31, 0xFF	; 255
    197c:	e2 0f       	add	r30, r18
    197e:	f1 1d       	adc	r31, r1
    1980:	ea 58       	subi	r30, 0x8A	; 138
    1982:	fd 4f       	sbci	r31, 0xFD	; 253
    uint8_t action = myputter.m_seq_map[seq].action;
    1984:	30 81       	ld	r19, Z
    1986:	e3 2e       	mov	r14, r19
    1988:	f1 2c       	mov	r15, r1
    198a:	e7 01       	movw	r28, r14
    198c:	83 e0       	ldi	r24, 0x03	; 3
    198e:	cc 0f       	add	r28, r28
    1990:	dd 1f       	adc	r29, r29
    1992:	8a 95       	dec	r24
    1994:	e1 f7       	brne	.-8      	; 0x198e <_ZN22navputter_keypad_class5pressEhhh+0x36>
    1996:	ce 01       	movw	r24, r28
    1998:	80 50       	subi	r24, 0x00	; 0
    199a:	9f 4f       	sbci	r25, 0xFF	; 255
    199c:	fc 01       	movw	r30, r24
    199e:	e6 56       	subi	r30, 0x66	; 102
    19a0:	fd 4f       	sbci	r31, 0xFD	; 253
    19a2:	00 81       	ld	r16, Z
    if ( myputter.m_seq_map[seq].hold_action )
    19a4:	8f 55       	subi	r24, 0x5F	; 95
    19a6:	9d 4f       	sbci	r25, 0xFD	; 253
    19a8:	fc 01       	movw	r30, r24
    19aa:	d0 80       	ld	r13, Z
    19ac:	dd 20       	and	r13, r13
    19ae:	09 f4       	brne	.+2      	; 0x19b2 <_ZN22navputter_keypad_class5pressEhhh+0x5a>
    19b0:	9a c0       	rjmp	.+308    	; 0x1ae6 <_ZN22navputter_keypad_class5pressEhhh+0x18e>
        if (event == EVENT_KEYPAD_UP)
    19b2:	61 11       	cpse	r22, r1
    19b4:	4f c0       	rjmp	.+158    	; 0x1a54 <_ZN22navputter_keypad_class5pressEhhh+0xfc>
            uint32_t delta = global_ticks - last_hold;
    19b6:	60 91 be 08 	lds	r22, 0x08BE	; 0x8008be <global_ticks>
    19ba:	70 91 bf 08 	lds	r23, 0x08BF	; 0x8008bf <global_ticks+0x1>
    19be:	80 91 c0 08 	lds	r24, 0x08C0	; 0x8008c0 <global_ticks+0x2>
    19c2:	90 91 c1 08 	lds	r25, 0x08C1	; 0x8008c1 <global_ticks+0x3>
    19c6:	80 90 45 09 	lds	r8, 0x0945	; 0x800945 <_ZZN22navputter_keypad_class5pressEhhhE9last_hold>
    19ca:	90 90 46 09 	lds	r9, 0x0946	; 0x800946 <_ZZN22navputter_keypad_class5pressEhhhE9last_hold+0x1>
    19ce:	a0 90 47 09 	lds	r10, 0x0947	; 0x800947 <_ZZN22navputter_keypad_class5pressEhhhE9last_hold+0x2>
    19d2:	b0 90 48 09 	lds	r11, 0x0948	; 0x800948 <_ZZN22navputter_keypad_class5pressEhhhE9last_hold+0x3>
    19d6:	68 19       	sub	r22, r8
    19d8:	79 09       	sbc	r23, r9
    19da:	8a 09       	sbc	r24, r10
    19dc:	9b 09       	sbc	r25, r11
            delta /= 1000;
    19de:	28 ee       	ldi	r18, 0xE8	; 232
    19e0:	33 e0       	ldi	r19, 0x03	; 3
    19e2:	40 e0       	ldi	r20, 0x00	; 0
    19e4:	50 e0       	ldi	r21, 0x00	; 0
    19e6:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__udivmodsi4>
            if ( delta >= MIN_HOLD_TIME( myputter.m_seq_map[seq].hold_time ) &&  
    19ea:	fe 01       	movw	r30, r28
    19ec:	e0 56       	subi	r30, 0x60	; 96
    19ee:	fc 4f       	sbci	r31, 0xFC	; 252
    19f0:	80 81       	ld	r24, Z
    19f2:	98 2f       	mov	r25, r24
    19f4:	9f 70       	andi	r25, 0x0F	; 15
    19f6:	89 2e       	mov	r8, r25
    19f8:	91 2c       	mov	r9, r1
    19fa:	b1 2c       	mov	r11, r1
    19fc:	a1 2c       	mov	r10, r1
    19fe:	28 15       	cp	r18, r8
    1a00:	39 05       	cpc	r19, r9
    1a02:	4a 05       	cpc	r20, r10
    1a04:	5b 05       	cpc	r21, r11
    1a06:	08 f4       	brcc	.+2      	; 0x1a0a <_ZN22navputter_keypad_class5pressEhhh+0xb2>
    1a08:	d7 c0       	rjmp	.+430    	; 0x1bb8 <_ZN22navputter_keypad_class5pressEhhh+0x260>
            ( delta <= MAX_HOLD_TIME( myputter.m_seq_map[seq].hold_time) ) )
    1a0a:	82 95       	swap	r24
    1a0c:	8f 70       	andi	r24, 0x0F	; 15
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	b0 e0       	ldi	r27, 0x00	; 0
    1a12:	a0 e0       	ldi	r26, 0x00	; 0
            if ( delta >= MIN_HOLD_TIME( myputter.m_seq_map[seq].hold_time ) &&  
    1a14:	82 17       	cp	r24, r18
    1a16:	93 07       	cpc	r25, r19
    1a18:	a4 07       	cpc	r26, r20
    1a1a:	b5 07       	cpc	r27, r21
    1a1c:	08 f0       	brcs	.+2      	; 0x1a20 <_ZN22navputter_keypad_class5pressEhhh+0xc8>
    1a1e:	d8 c0       	rjmp	.+432    	; 0x1bd0 <_ZN22navputter_keypad_class5pressEhhh+0x278>
    switch(action)
    1a20:	07 30       	cpi	r16, 0x07	; 7
    1a22:	09 f4       	brne	.+2      	; 0x1a26 <_ZN22navputter_keypad_class5pressEhhh+0xce>
    1a24:	af c0       	rjmp	.+350    	; 0x1b84 <_ZN22navputter_keypad_class5pressEhhh+0x22c>
    1a26:	08 f0       	brcs	.+2      	; 0x1a2a <_ZN22navputter_keypad_class5pressEhhh+0xd2>
    1a28:	d5 c0       	rjmp	.+426    	; 0x1bd4 <_ZN22navputter_keypad_class5pressEhhh+0x27c>
    1a2a:	00 23       	and	r16, r16
    1a2c:	09 f4       	brne	.+2      	; 0x1a30 <_ZN22navputter_keypad_class5pressEhhh+0xd8>
    1a2e:	59 c0       	rjmp	.+178    	; 0x1ae2 <_ZN22navputter_keypad_class5pressEhhh+0x18a>
    1a30:	03 30       	cpi	r16, 0x03	; 3
    1a32:	08 f4       	brcc	.+2      	; 0x1a36 <_ZN22navputter_keypad_class5pressEhhh+0xde>
    1a34:	71 c0       	rjmp	.+226    	; 0x1b18 <_ZN22navputter_keypad_class5pressEhhh+0x1c0>
            if ( CONFIG.key_arrows == ARROW_CONFIG_MOUSE )
    1a36:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <myputter+0x274>
    1a3a:	81 11       	cpse	r24, r1
    1a3c:	9b c0       	rjmp	.+310    	; 0x1b74 <_ZN22navputter_keypad_class5pressEhhh+0x21c>
                MOUSE.set_dir( KA_TO_NP_MOUSE_DIR(action), (event == EVENT_KEYPAD_DOWN )?CONFIG.mouse_step:0 ); 
    1a3e:	11 30       	cpi	r17, 0x01	; 1
    1a40:	11 f4       	brne	.+4      	; 0x1a46 <_ZN22navputter_keypad_class5pressEhhh+0xee>
    1a42:	80 91 6d 03 	lds	r24, 0x036D	; 0x80036d <myputter+0x26d>
    1a46:	03 50       	subi	r16, 0x03	; 3
            m_mouse_moves[dir] = val;
    1a48:	e0 2f       	mov	r30, r16
    1a4a:	f0 e0       	ldi	r31, 0x00	; 0
    1a4c:	e0 50       	subi	r30, 0x00	; 0
    1a4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a50:	80 83       	st	Z, r24
    1a52:	62 c0       	rjmp	.+196    	; 0x1b18 <_ZN22navputter_keypad_class5pressEhhh+0x1c0>
            last_hold = global_ticks;
    1a54:	80 91 be 08 	lds	r24, 0x08BE	; 0x8008be <global_ticks>
    1a58:	90 91 bf 08 	lds	r25, 0x08BF	; 0x8008bf <global_ticks+0x1>
    1a5c:	a0 91 c0 08 	lds	r26, 0x08C0	; 0x8008c0 <global_ticks+0x2>
    1a60:	b0 91 c1 08 	lds	r27, 0x08C1	; 0x8008c1 <global_ticks+0x3>
    1a64:	80 93 45 09 	sts	0x0945, r24	; 0x800945 <_ZZN22navputter_keypad_class5pressEhhhE9last_hold>
    1a68:	90 93 46 09 	sts	0x0946, r25	; 0x800946 <_ZZN22navputter_keypad_class5pressEhhhE9last_hold+0x1>
    1a6c:	a0 93 47 09 	sts	0x0947, r26	; 0x800947 <_ZZN22navputter_keypad_class5pressEhhhE9last_hold+0x2>
    1a70:	b0 93 48 09 	sts	0x0948, r27	; 0x800948 <_ZZN22navputter_keypad_class5pressEhhhE9last_hold+0x3>
    switch(action)
    1a74:	07 30       	cpi	r16, 0x07	; 7
    1a76:	09 f4       	brne	.+2      	; 0x1a7a <_ZN22navputter_keypad_class5pressEhhh+0x122>
    1a78:	85 c0       	rjmp	.+266    	; 0x1b84 <_ZN22navputter_keypad_class5pressEhhh+0x22c>
    1a7a:	18 f5       	brcc	.+70     	; 0x1ac2 <_ZN22navputter_keypad_class5pressEhhh+0x16a>
    1a7c:	02 30       	cpi	r16, 0x02	; 2
    1a7e:	09 f4       	brne	.+2      	; 0x1a82 <_ZN22navputter_keypad_class5pressEhhh+0x12a>
    1a80:	40 c0       	rjmp	.+128    	; 0x1b02 <_ZN22navputter_keypad_class5pressEhhh+0x1aa>
    1a82:	c8 f6       	brcc	.-78     	; 0x1a36 <_ZN22navputter_keypad_class5pressEhhh+0xde>
    1a84:	01 30       	cpi	r16, 0x01	; 1
    1a86:	69 f5       	brne	.+90     	; 0x1ae2 <_ZN22navputter_keypad_class5pressEhhh+0x18a>
            if ( event == EVENT_KEYPAD_DOWN )
    1a88:	11 30       	cpi	r17, 0x01	; 1
    1a8a:	09 f0       	breq	.+2      	; 0x1a8e <_ZN22navputter_keypad_class5pressEhhh+0x136>
    1a8c:	45 c0       	rjmp	.+138    	; 0x1b18 <_ZN22navputter_keypad_class5pressEhhh+0x1c0>
                KEY.write_scancode( myputter.m_seq_map[seq].key_press[0] );
    1a8e:	c0 50       	subi	r28, 0x00	; 0
    1a90:	df 4f       	sbci	r29, 0xFF	; 255
    1a92:	fe 01       	movw	r30, r28
    1a94:	e4 56       	subi	r30, 0x64	; 100
    1a96:	fd 4f       	sbci	r31, 0xFD	; 253
    1a98:	80 81       	ld	r24, Z
    1a9a:	91 81       	ldd	r25, Z+1	; 0x01
    1a9c:	0e 94 7d 03 	call	0x6fa	; 0x6fa <_ZN18usb_keyboard_class14write_scancodeEj.isra.18>
                KEY.write_scancode( myputter.m_seq_map[seq].key_press[1] );
    1aa0:	c2 56       	subi	r28, 0x62	; 98
    1aa2:	dd 4f       	sbci	r29, 0xFD	; 253
                KEY.write_scancode( myputter.m_seq_map[seq].key_press[1] );
    1aa4:	88 81       	ld	r24, Y
    1aa6:	99 81       	ldd	r25, Y+1	; 0x01
}
    1aa8:	df 91       	pop	r29
    1aaa:	cf 91       	pop	r28
    1aac:	1f 91       	pop	r17
    1aae:	0f 91       	pop	r16
    1ab0:	ff 90       	pop	r15
    1ab2:	ef 90       	pop	r14
    1ab4:	df 90       	pop	r13
    1ab6:	bf 90       	pop	r11
    1ab8:	af 90       	pop	r10
    1aba:	9f 90       	pop	r9
    1abc:	8f 90       	pop	r8
                KEY.write_scancode( myputter.m_seq_map[seq].key_press[1] );
    1abe:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <_ZN18usb_keyboard_class14write_scancodeEj.isra.18>
    1ac2:	0b 30       	cpi	r16, 0x0B	; 11
    1ac4:	09 f4       	brne	.+2      	; 0x1ac8 <_ZN22navputter_keypad_class5pressEhhh+0x170>
    1ac6:	65 c0       	rjmp	.+202    	; 0x1b92 <_ZN22navputter_keypad_class5pressEhhh+0x23a>
    1ac8:	48 f4       	brcc	.+18     	; 0x1adc <_ZN22navputter_keypad_class5pressEhhh+0x184>
    1aca:	08 30       	cpi	r16, 0x08	; 8
    1acc:	51 f4       	brne	.+20     	; 0x1ae2 <_ZN22navputter_keypad_class5pressEhhh+0x18a>
            m_mouse_clicks[button] = ( event == EVENT_KEYPAD_DOWN ) ? 1 : 0;
    1ace:	81 e0       	ldi	r24, 0x01	; 1
    1ad0:	11 30       	cpi	r17, 0x01	; 1
    1ad2:	09 f0       	breq	.+2      	; 0x1ad6 <_ZN22navputter_keypad_class5pressEhhh+0x17e>
    1ad4:	80 e0       	ldi	r24, 0x00	; 0
    1ad6:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <myputter+0x6>
    1ada:	1e c0       	rjmp	.+60     	; 0x1b18 <_ZN22navputter_keypad_class5pressEhhh+0x1c0>
    1adc:	0d 50       	subi	r16, 0x0D	; 13
    1ade:	02 30       	cpi	r16, 0x02	; 2
    1ae0:	d8 f0       	brcs	.+54     	; 0x1b18 <_ZN22navputter_keypad_class5pressEhhh+0x1c0>
            assert(0);
    1ae2:	0e 94 6a 31 	call	0x62d4	; 0x62d4 <abort>
    switch(action)
    1ae6:	07 30       	cpi	r16, 0x07	; 7
    1ae8:	09 f4       	brne	.+2      	; 0x1aec <_ZN22navputter_keypad_class5pressEhhh+0x194>
    1aea:	4c c0       	rjmp	.+152    	; 0x1b84 <_ZN22navputter_keypad_class5pressEhhh+0x22c>
    1aec:	38 f2       	brcs	.-114    	; 0x1a7c <_ZN22navputter_keypad_class5pressEhhh+0x124>
    1aee:	0b 30       	cpi	r16, 0x0B	; 11
    1af0:	09 f4       	brne	.+2      	; 0x1af4 <_ZN22navputter_keypad_class5pressEhhh+0x19c>
    1af2:	4f c0       	rjmp	.+158    	; 0x1b92 <_ZN22navputter_keypad_class5pressEhhh+0x23a>
    1af4:	50 f3       	brcs	.-44     	; 0x1aca <_ZN22navputter_keypad_class5pressEhhh+0x172>
    1af6:	0d 30       	cpi	r16, 0x0D	; 13
    1af8:	09 f4       	brne	.+2      	; 0x1afc <_ZN22navputter_keypad_class5pressEhhh+0x1a4>
    1afa:	52 c0       	rjmp	.+164    	; 0x1ba0 <_ZN22navputter_keypad_class5pressEhhh+0x248>
    1afc:	0e 30       	cpi	r16, 0x0E	; 14
    1afe:	61 f0       	breq	.+24     	; 0x1b18 <_ZN22navputter_keypad_class5pressEhhh+0x1c0>
    1b00:	f0 cf       	rjmp	.-32     	; 0x1ae2 <_ZN22navputter_keypad_class5pressEhhh+0x18a>
            if ( event == EVENT_KEYPAD_DOWN )
    1b02:	11 30       	cpi	r17, 0x01	; 1
    1b04:	49 f4       	brne	.+18     	; 0x1b18 <_ZN22navputter_keypad_class5pressEhhh+0x1c0>
                switch( myputter.m_seq_map[seq].key_press[0] )
    1b06:	c4 56       	subi	r28, 0x64	; 100
    1b08:	dc 4f       	sbci	r29, 0xFC	; 252
    1b0a:	88 81       	ld	r24, Y
    1b0c:	99 81       	ldd	r25, Y+1	; 0x01
    1b0e:	81 30       	cpi	r24, 0x01	; 1
    1b10:	91 05       	cpc	r25, r1
    1b12:	71 f0       	breq	.+28     	; 0x1b30 <_ZN22navputter_keypad_class5pressEhhh+0x1d8>
    1b14:	02 97       	sbiw	r24, 0x02	; 2
    1b16:	b1 f0       	breq	.+44     	; 0x1b44 <_ZN22navputter_keypad_class5pressEhhh+0x1ec>
}
    1b18:	df 91       	pop	r29
    1b1a:	cf 91       	pop	r28
    1b1c:	1f 91       	pop	r17
    1b1e:	0f 91       	pop	r16
    1b20:	ff 90       	pop	r15
    1b22:	ef 90       	pop	r14
    1b24:	df 90       	pop	r13
    1b26:	bf 90       	pop	r11
    1b28:	af 90       	pop	r10
    1b2a:	9f 90       	pop	r9
    1b2c:	8f 90       	pop	r8
    1b2e:	08 95       	ret
                        CONFIG.key_arrows = (CONFIG.key_arrows < ARROW_CONFIG_FAST_KEY ) ?  CONFIG.key_arrows + 1 : 0;
    1b30:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <myputter+0x274>
    1b34:	82 30       	cpi	r24, 0x02	; 2
    1b36:	20 f4       	brcc	.+8      	; 0x1b40 <_ZN22navputter_keypad_class5pressEhhh+0x1e8>
    1b38:	8f 5f       	subi	r24, 0xFF	; 255
    1b3a:	80 93 74 03 	sts	0x0374, r24	; 0x800374 <myputter+0x274>
                        break;
    1b3e:	ec cf       	rjmp	.-40     	; 0x1b18 <_ZN22navputter_keypad_class5pressEhhh+0x1c0>
                        CONFIG.key_arrows = (CONFIG.key_arrows < ARROW_CONFIG_FAST_KEY ) ?  CONFIG.key_arrows + 1 : 0;
    1b40:	80 e0       	ldi	r24, 0x00	; 0
    1b42:	fb cf       	rjmp	.-10     	; 0x1b3a <_ZN22navputter_keypad_class5pressEhhh+0x1e2>
                        SERIAL.print_P( show_key_string, row, col, seq );
    1b44:	1f 92       	push	r1
    1b46:	3f 93       	push	r19
    1b48:	1f 92       	push	r1
    1b4a:	2f 93       	push	r18
    1b4c:	1f 92       	push	r1
    1b4e:	4f 93       	push	r20
    1b50:	8d e6       	ldi	r24, 0x6D	; 109
    1b52:	94 e0       	ldi	r25, 0x04	; 4
    1b54:	9f 93       	push	r25
    1b56:	8f 93       	push	r24
    1b58:	8a e1       	ldi	r24, 0x1A	; 26
    1b5a:	91 e0       	ldi	r25, 0x01	; 1
    1b5c:	9f 93       	push	r25
    1b5e:	8f 93       	push	r24
    1b60:	e5 d9       	rcall	.-3126   	; 0xf2c <_ZN22navputter_serial_class7print_PEPKcz>
                        break;
    1b62:	8d b7       	in	r24, 0x3d	; 61
    1b64:	9e b7       	in	r25, 0x3e	; 62
    1b66:	0a 96       	adiw	r24, 0x0a	; 10
    1b68:	0f b6       	in	r0, 0x3f	; 63
    1b6a:	f8 94       	cli
    1b6c:	9e bf       	out	0x3e, r25	; 62
    1b6e:	0f be       	out	0x3f, r0	; 63
    1b70:	8d bf       	out	0x3d, r24	; 61
    1b72:	d2 cf       	rjmp	.-92     	; 0x1b18 <_ZN22navputter_keypad_class5pressEhhh+0x1c0>
            else if ( CONFIG.key_arrows == ARROW_CONFIG_SLOW_KEY )
    1b74:	81 30       	cpi	r24, 0x01	; 1
    1b76:	19 f4       	brne	.+6      	; 0x1b7e <_ZN22navputter_keypad_class5pressEhhh+0x226>
                KEY.write_scancode( myputter.m_seq_map[seq].key_press[0] );
    1b78:	c4 56       	subi	r28, 0x64	; 100
    1b7a:	dc 4f       	sbci	r29, 0xFC	; 252
    1b7c:	93 cf       	rjmp	.-218    	; 0x1aa4 <_ZN22navputter_keypad_class5pressEhhh+0x14c>
                KEY.write_scancode( myputter.m_seq_map[seq].key_press[1] );
    1b7e:	c2 56       	subi	r28, 0x62	; 98
    1b80:	dc 4f       	sbci	r29, 0xFC	; 252
    1b82:	90 cf       	rjmp	.-224    	; 0x1aa4 <_ZN22navputter_keypad_class5pressEhhh+0x14c>
    1b84:	81 e0       	ldi	r24, 0x01	; 1
    1b86:	11 30       	cpi	r17, 0x01	; 1
    1b88:	09 f0       	breq	.+2      	; 0x1b8c <_ZN22navputter_keypad_class5pressEhhh+0x234>
    1b8a:	80 e0       	ldi	r24, 0x00	; 0
    1b8c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <myputter+0x4>
    1b90:	c3 cf       	rjmp	.-122    	; 0x1b18 <_ZN22navputter_keypad_class5pressEhhh+0x1c0>
    1b92:	81 e0       	ldi	r24, 0x01	; 1
    1b94:	11 30       	cpi	r17, 0x01	; 1
    1b96:	09 f0       	breq	.+2      	; 0x1b9a <_ZN22navputter_keypad_class5pressEhhh+0x242>
    1b98:	80 e0       	ldi	r24, 0x00	; 0
    1b9a:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <myputter+0x5>
    1b9e:	bc cf       	rjmp	.-136    	; 0x1b18 <_ZN22navputter_keypad_class5pressEhhh+0x1c0>
            if ( event == EVENT_KEYPAD_UP )
    1ba0:	61 11       	cpse	r22, r1
    1ba2:	ba cf       	rjmp	.-140    	; 0x1b18 <_ZN22navputter_keypad_class5pressEhhh+0x1c0>
                CONFIG.mouse_step = CONFIG.mouse_step << 1;
    1ba4:	80 91 6d 03 	lds	r24, 0x036D	; 0x80036d <myputter+0x26d>
    1ba8:	88 0f       	add	r24, r24
                if ( CONFIG.mouse_step >= MAX_MOUSE_STEP ) CONFIG.mouse_step = 1;
    1baa:	80 34       	cpi	r24, 0x40	; 64
    1bac:	18 f4       	brcc	.+6      	; 0x1bb4 <_ZN22navputter_keypad_class5pressEhhh+0x25c>
    1bae:	80 93 6d 03 	sts	0x036D, r24	; 0x80036d <myputter+0x26d>
    1bb2:	b2 cf       	rjmp	.-156    	; 0x1b18 <_ZN22navputter_keypad_class5pressEhhh+0x1c0>
    1bb4:	81 e0       	ldi	r24, 0x01	; 1
    1bb6:	fb cf       	rjmp	.-10     	; 0x1bae <_ZN22navputter_keypad_class5pressEhhh+0x256>
    switch(action)
    1bb8:	07 30       	cpi	r16, 0x07	; 7
    1bba:	21 f3       	breq	.-56     	; 0x1b84 <_ZN22navputter_keypad_class5pressEhhh+0x22c>
    1bbc:	58 f4       	brcc	.+22     	; 0x1bd4 <_ZN22navputter_keypad_class5pressEhhh+0x27c>
    1bbe:	02 30       	cpi	r16, 0x02	; 2
    1bc0:	09 f4       	brne	.+2      	; 0x1bc4 <_ZN22navputter_keypad_class5pressEhhh+0x26c>
    1bc2:	aa cf       	rjmp	.-172    	; 0x1b18 <_ZN22navputter_keypad_class5pressEhhh+0x1c0>
    1bc4:	08 f0       	brcs	.+2      	; 0x1bc8 <_ZN22navputter_keypad_class5pressEhhh+0x270>
    1bc6:	37 cf       	rjmp	.-402    	; 0x1a36 <_ZN22navputter_keypad_class5pressEhhh+0xde>
    1bc8:	01 30       	cpi	r16, 0x01	; 1
    1bca:	09 f4       	brne	.+2      	; 0x1bce <_ZN22navputter_keypad_class5pressEhhh+0x276>
    1bcc:	a5 cf       	rjmp	.-182    	; 0x1b18 <_ZN22navputter_keypad_class5pressEhhh+0x1c0>
    1bce:	89 cf       	rjmp	.-238    	; 0x1ae2 <_ZN22navputter_keypad_class5pressEhhh+0x18a>
            if ( delta >= MIN_HOLD_TIME( myputter.m_seq_map[seq].hold_time ) &&  
    1bd0:	0d 2d       	mov	r16, r13
    1bd2:	26 cf       	rjmp	.-436    	; 0x1a20 <_ZN22navputter_keypad_class5pressEhhh+0xc8>
    1bd4:	0b 30       	cpi	r16, 0x0B	; 11
    1bd6:	e9 f2       	breq	.-70     	; 0x1b92 <_ZN22navputter_keypad_class5pressEhhh+0x23a>
    1bd8:	08 f4       	brcc	.+2      	; 0x1bdc <_ZN22navputter_keypad_class5pressEhhh+0x284>
    1bda:	77 cf       	rjmp	.-274    	; 0x1aca <_ZN22navputter_keypad_class5pressEhhh+0x172>
    1bdc:	0d 30       	cpi	r16, 0x0D	; 13
    1bde:	11 f3       	breq	.-60     	; 0x1ba4 <_ZN22navputter_keypad_class5pressEhhh+0x24c>
    1be0:	8d cf       	rjmp	.-230    	; 0x1afc <_ZN22navputter_keypad_class5pressEhhh+0x1a4>

00001be2 <_ZN29navputter_tenkey_keypad_class5beginEv>:
    memset( m_keystate, INVALID_KEYSTATE, sizeof( m_keystate ) );
    1be2:	46 e0       	ldi	r20, 0x06	; 6
    1be4:	50 e0       	ldi	r21, 0x00	; 0
    1be6:	6f ef       	ldi	r22, 0xFF	; 255
    1be8:	70 e0       	ldi	r23, 0x00	; 0
    1bea:	06 96       	adiw	r24, 0x06	; 6
    1bec:	0e 94 b4 31 	call	0x6368	; 0x6368 <memset>
        COL_PINS                                           /* do it for all col bits */
    1bf0:	57 9a       	sbi	0x0a, 7	; 10
    1bf2:	5f 98       	cbi	0x0b, 7	; 11
    1bf4:	21 9a       	sbi	0x04, 1	; 4
    1bf6:	29 98       	cbi	0x05, 1	; 5
    1bf8:	22 9a       	sbi	0x04, 2	; 4
    1bfa:	2a 98       	cbi	0x05, 2	; 5
    1bfc:	23 9a       	sbi	0x04, 3	; 4
    1bfe:	2b 98       	cbi	0x05, 3	; 5
    1c00:	24 9a       	sbi	0x04, 4	; 4
    1c02:	2c 98       	cbi	0x05, 4	; 5
    1c04:	25 9a       	sbi	0x04, 5	; 4
    1c06:	2d 98       	cbi	0x05, 5	; 5
    init_keys();
    1c08:	9d cc       	rjmp	.-1734   	; 0x1544 <_Z9init_keysv>

00001c0a <_ZN29navputter_tenkey_keypad_class7triggerEv>:
{
    1c0a:	6f 92       	push	r6
    1c0c:	7f 92       	push	r7
    1c0e:	8f 92       	push	r8
    1c10:	9f 92       	push	r9
    1c12:	af 92       	push	r10
    1c14:	bf 92       	push	r11
    1c16:	cf 92       	push	r12
    1c18:	df 92       	push	r13
    1c1a:	ef 92       	push	r14
    1c1c:	ff 92       	push	r15
    1c1e:	0f 93       	push	r16
    1c20:	1f 93       	push	r17
    1c22:	cf 93       	push	r28
    1c24:	df 93       	push	r29
    1c26:	7c 01       	movw	r14, r24
    for ( col=0; col< CONFIG.cols; col++ )
    1c28:	61 2c       	mov	r6, r1
                        m_keydown[col] &= ~(1<<row);
    1c2a:	aa 24       	eor	r10, r10
    1c2c:	a3 94       	inc	r10
    1c2e:	b1 2c       	mov	r11, r1
    for ( col=0; col< CONFIG.cols; col++ )
    1c30:	80 91 6a 03 	lds	r24, 0x036A	; 0x80036a <myputter+0x26a>
    1c34:	68 16       	cp	r6, r24
    1c36:	08 f0       	brcs	.+2      	; 0x1c3a <_ZN29navputter_tenkey_keypad_class7triggerEv+0x30>
    1c38:	52 c0       	rjmp	.+164    	; 0x1cde <_ZN29navputter_tenkey_keypad_class7triggerEv+0xd4>
        if ( m_keystate[col] != m_last_keystate[col] )
    1c3a:	e7 01       	movw	r28, r14
    1c3c:	c6 0d       	add	r28, r6
    1c3e:	d1 1d       	adc	r29, r1
    1c40:	6e 01       	movw	r12, r28
    1c42:	86 e0       	ldi	r24, 0x06	; 6
    1c44:	c8 0e       	add	r12, r24
    1c46:	d1 1c       	adc	r13, r1
    1c48:	9e 81       	ldd	r25, Y+6	; 0x06
    1c4a:	8c 85       	ldd	r24, Y+12	; 0x0c
    1c4c:	98 17       	cp	r25, r24
    1c4e:	09 f4       	brne	.+2      	; 0x1c52 <_ZN29navputter_tenkey_keypad_class7triggerEv+0x48>
    1c50:	44 c0       	rjmp	.+136    	; 0x1cda <_ZN29navputter_tenkey_keypad_class7triggerEv+0xd0>
            for ( row=0; row< CONFIG.rows; row++ )
    1c52:	71 2c       	mov	r7, r1
    1c54:	8e 01       	movw	r16, r28
    1c56:	08 5e       	subi	r16, 0xE8	; 232
    1c58:	1f 4f       	sbci	r17, 0xFF	; 255
    1c5a:	f6 01       	movw	r30, r12
    1c5c:	80 81       	ld	r24, Z
    1c5e:	90 91 69 03 	lds	r25, 0x0369	; 0x800369 <myputter+0x269>
    1c62:	79 16       	cp	r7, r25
    1c64:	c8 f5       	brcc	.+114    	; 0x1cd8 <_ZN29navputter_tenkey_keypad_class7triggerEv+0xce>
                if ( !(m_keystate[col] & (1<<row)) )
    1c66:	87 2c       	mov	r8, r7
    1c68:	f8 01       	movw	r30, r16
    1c6a:	40 81       	ld	r20, Z
    1c6c:	24 2f       	mov	r18, r20
    1c6e:	30 e0       	ldi	r19, 0x00	; 0
    1c70:	07 2c       	mov	r0, r7
    1c72:	02 c0       	rjmp	.+4      	; 0x1c78 <_ZN29navputter_tenkey_keypad_class7triggerEv+0x6e>
    1c74:	35 95       	asr	r19
    1c76:	27 95       	ror	r18
    1c78:	0a 94       	dec	r0
    1c7a:	e2 f7       	brpl	.-8      	; 0x1c74 <_ZN29navputter_tenkey_keypad_class7triggerEv+0x6a>
    1c7c:	21 70       	andi	r18, 0x01	; 1
    1c7e:	33 27       	eor	r19, r19
    1c80:	90 e0       	ldi	r25, 0x00	; 0
    1c82:	07 2c       	mov	r0, r7
    1c84:	02 c0       	rjmp	.+4      	; 0x1c8a <_ZN29navputter_tenkey_keypad_class7triggerEv+0x80>
    1c86:	95 95       	asr	r25
    1c88:	87 95       	ror	r24
    1c8a:	0a 94       	dec	r0
    1c8c:	e2 f7       	brpl	.-8      	; 0x1c86 <_ZN29navputter_tenkey_keypad_class7triggerEv+0x7c>
    1c8e:	80 fd       	sbrc	r24, 0
    1c90:	12 c0       	rjmp	.+36     	; 0x1cb6 <_ZN29navputter_tenkey_keypad_class7triggerEv+0xac>
                    if ( !(m_keydown[col] & (1<<row)) )
    1c92:	23 2b       	or	r18, r19
    1c94:	29 f4       	brne	.+10     	; 0x1ca0 <_ZN29navputter_tenkey_keypad_class7triggerEv+0x96>
						press( EVENT_KEYPAD_DOWN, row, col );
    1c96:	26 2d       	mov	r18, r6
    1c98:	47 2d       	mov	r20, r7
    1c9a:	61 e0       	ldi	r22, 0x01	; 1
    1c9c:	c7 01       	movw	r24, r14
    1c9e:	5c de       	rcall	.-840    	; 0x1958 <_ZN22navputter_keypad_class5pressEhhh>
                    m_keydown[col] |= (1<<row);
    1ca0:	95 01       	movw	r18, r10
    1ca2:	01 c0       	rjmp	.+2      	; 0x1ca6 <_ZN29navputter_tenkey_keypad_class7triggerEv+0x9c>
    1ca4:	22 0f       	add	r18, r18
    1ca6:	8a 94       	dec	r8
    1ca8:	ea f7       	brpl	.-6      	; 0x1ca4 <_ZN29navputter_tenkey_keypad_class7triggerEv+0x9a>
    1caa:	f8 01       	movw	r30, r16
    1cac:	80 81       	ld	r24, Z
    1cae:	82 2b       	or	r24, r18
    1cb0:	80 83       	st	Z, r24
            for ( row=0; row< CONFIG.rows; row++ )
    1cb2:	73 94       	inc	r7
    1cb4:	d2 cf       	rjmp	.-92     	; 0x1c5a <_ZN29navputter_tenkey_keypad_class7triggerEv+0x50>
                    if (m_keydown[col] & (1<<row))
    1cb6:	23 2b       	or	r18, r19
    1cb8:	e1 f3       	breq	.-8      	; 0x1cb2 <_ZN29navputter_tenkey_keypad_class7triggerEv+0xa8>
                        m_keydown[col] &= ~(1<<row);
    1cba:	c5 01       	movw	r24, r10
    1cbc:	07 2c       	mov	r0, r7
    1cbe:	01 c0       	rjmp	.+2      	; 0x1cc2 <_ZN29navputter_tenkey_keypad_class7triggerEv+0xb8>
    1cc0:	88 0f       	add	r24, r24
    1cc2:	0a 94       	dec	r0
    1cc4:	ea f7       	brpl	.-6      	; 0x1cc0 <_ZN29navputter_tenkey_keypad_class7triggerEv+0xb6>
    1cc6:	80 95       	com	r24
    1cc8:	84 23       	and	r24, r20
    1cca:	80 83       	st	Z, r24
						press( EVENT_KEYPAD_UP, row, col );
    1ccc:	26 2d       	mov	r18, r6
    1cce:	47 2d       	mov	r20, r7
    1cd0:	60 e0       	ldi	r22, 0x00	; 0
    1cd2:	c7 01       	movw	r24, r14
    1cd4:	41 de       	rcall	.-894    	; 0x1958 <_ZN22navputter_keypad_class5pressEhhh>
    1cd6:	ed cf       	rjmp	.-38     	; 0x1cb2 <_ZN29navputter_tenkey_keypad_class7triggerEv+0xa8>
            m_last_keystate[col] = m_keystate[col]; 
    1cd8:	8c 87       	std	Y+12, r24	; 0x0c
    for ( col=0; col< CONFIG.cols; col++ )
    1cda:	63 94       	inc	r6
    1cdc:	a9 cf       	rjmp	.-174    	; 0x1c30 <_ZN29navputter_tenkey_keypad_class7triggerEv+0x26>
}       
    1cde:	df 91       	pop	r29
    1ce0:	cf 91       	pop	r28
    1ce2:	1f 91       	pop	r17
    1ce4:	0f 91       	pop	r16
    1ce6:	ff 90       	pop	r15
    1ce8:	ef 90       	pop	r14
    1cea:	df 90       	pop	r13
    1cec:	cf 90       	pop	r12
    1cee:	bf 90       	pop	r11
    1cf0:	af 90       	pop	r10
    1cf2:	9f 90       	pop	r9
    1cf4:	8f 90       	pop	r8
    1cf6:	7f 90       	pop	r7
    1cf8:	6f 90       	pop	r6
    1cfa:	08 95       	ret

00001cfc <_ZN29navputter_tenkey_keypad_class4pollEv>:
{
    1cfc:	cf 92       	push	r12
    1cfe:	df 92       	push	r13
    1d00:	ef 92       	push	r14
    1d02:	ff 92       	push	r15
    1d04:	0f 93       	push	r16
    1d06:	1f 93       	push	r17
    1d08:	cf 93       	push	r28
    1d0a:	df 93       	push	r29
    1d0c:	fc 01       	movw	r30, r24
    switch( m_keypad_state )
    1d0e:	80 81       	ld	r24, Z
    1d10:	81 30       	cpi	r24, 0x01	; 1
    1d12:	09 f4       	brne	.+2      	; 0x1d16 <_ZN29navputter_tenkey_keypad_class4pollEv+0x1a>
    1d14:	46 c0       	rjmp	.+140    	; 0x1da2 <_ZN29navputter_tenkey_keypad_class4pollEv+0xa6>
    1d16:	88 23       	and	r24, r24
    1d18:	61 f0       	breq	.+24     	; 0x1d32 <_ZN29navputter_tenkey_keypad_class4pollEv+0x36>
    1d1a:	82 30       	cpi	r24, 0x02	; 2
    1d1c:	09 f4       	brne	.+2      	; 0x1d20 <_ZN29navputter_tenkey_keypad_class4pollEv+0x24>
    1d1e:	56 c0       	rjmp	.+172    	; 0x1dcc <_ZN29navputter_tenkey_keypad_class4pollEv+0xd0>
}
    1d20:	df 91       	pop	r29
    1d22:	cf 91       	pop	r28
    1d24:	1f 91       	pop	r17
    1d26:	0f 91       	pop	r16
    1d28:	ff 90       	pop	r15
    1d2a:	ef 90       	pop	r14
    1d2c:	df 90       	pop	r13
    1d2e:	cf 90       	pop	r12
    1d30:	08 95       	ret
            COL_PINS
    1d32:	82 a1       	ldd	r24, Z+34	; 0x22
    1d34:	81 11       	cpse	r24, r1
    1d36:	29 c0       	rjmp	.+82     	; 0x1d8a <_ZN29navputter_tenkey_keypad_class4pollEv+0x8e>
    1d38:	5f 98       	cbi	0x0b, 7	; 11
    1d3a:	82 a1       	ldd	r24, Z+34	; 0x22
    1d3c:	81 30       	cpi	r24, 0x01	; 1
    1d3e:	39 f5       	brne	.+78     	; 0x1d8e <_ZN29navputter_tenkey_keypad_class4pollEv+0x92>
    1d40:	29 98       	cbi	0x05, 1	; 5
    1d42:	82 a1       	ldd	r24, Z+34	; 0x22
    1d44:	82 30       	cpi	r24, 0x02	; 2
    1d46:	29 f5       	brne	.+74     	; 0x1d92 <_ZN29navputter_tenkey_keypad_class4pollEv+0x96>
    1d48:	2a 98       	cbi	0x05, 2	; 5
    1d4a:	82 a1       	ldd	r24, Z+34	; 0x22
    1d4c:	83 30       	cpi	r24, 0x03	; 3
    1d4e:	19 f5       	brne	.+70     	; 0x1d96 <_ZN29navputter_tenkey_keypad_class4pollEv+0x9a>
    1d50:	2b 98       	cbi	0x05, 3	; 5
    1d52:	82 a1       	ldd	r24, Z+34	; 0x22
    1d54:	84 30       	cpi	r24, 0x04	; 4
    1d56:	09 f5       	brne	.+66     	; 0x1d9a <_ZN29navputter_tenkey_keypad_class4pollEv+0x9e>
    1d58:	2c 98       	cbi	0x05, 4	; 5
    1d5a:	82 a1       	ldd	r24, Z+34	; 0x22
    1d5c:	85 30       	cpi	r24, 0x05	; 5
    1d5e:	f9 f4       	brne	.+62     	; 0x1d9e <_ZN29navputter_tenkey_keypad_class4pollEv+0xa2>
    1d60:	2d 98       	cbi	0x05, 5	; 5
            m_keypad_state = KP_WAIT;
    1d62:	81 e0       	ldi	r24, 0x01	; 1
    1d64:	80 83       	st	Z, r24
            m_until = global_ticks + SETTLE_KEY_BOUNCE;
    1d66:	80 91 be 08 	lds	r24, 0x08BE	; 0x8008be <global_ticks>
    1d6a:	90 91 bf 08 	lds	r25, 0x08BF	; 0x8008bf <global_ticks+0x1>
    1d6e:	a0 91 c0 08 	lds	r26, 0x08C0	; 0x8008c0 <global_ticks+0x2>
    1d72:	b0 91 c1 08 	lds	r27, 0x08C1	; 0x8008c1 <global_ticks+0x3>
    1d76:	01 96       	adiw	r24, 0x01	; 1
    1d78:	a1 1d       	adc	r26, r1
    1d7a:	b1 1d       	adc	r27, r1
    1d7c:	81 83       	std	Z+1, r24	; 0x01
    1d7e:	92 83       	std	Z+2, r25	; 0x02
    1d80:	a3 83       	std	Z+3, r26	; 0x03
    1d82:	b4 83       	std	Z+4, r27	; 0x04
            m_next_state = KP_READ_ROWS;
    1d84:	82 e0       	ldi	r24, 0x02	; 2
    1d86:	85 83       	std	Z+5, r24	; 0x05
            break;
    1d88:	cb cf       	rjmp	.-106    	; 0x1d20 <_ZN29navputter_tenkey_keypad_class4pollEv+0x24>
            COL_PINS
    1d8a:	5f 9a       	sbi	0x0b, 7	; 11
    1d8c:	d6 cf       	rjmp	.-84     	; 0x1d3a <_ZN29navputter_tenkey_keypad_class4pollEv+0x3e>
    1d8e:	29 9a       	sbi	0x05, 1	; 5
    1d90:	d8 cf       	rjmp	.-80     	; 0x1d42 <_ZN29navputter_tenkey_keypad_class4pollEv+0x46>
    1d92:	2a 9a       	sbi	0x05, 2	; 5
    1d94:	da cf       	rjmp	.-76     	; 0x1d4a <_ZN29navputter_tenkey_keypad_class4pollEv+0x4e>
    1d96:	2b 9a       	sbi	0x05, 3	; 5
    1d98:	dc cf       	rjmp	.-72     	; 0x1d52 <_ZN29navputter_tenkey_keypad_class4pollEv+0x56>
    1d9a:	2c 9a       	sbi	0x05, 4	; 5
    1d9c:	de cf       	rjmp	.-68     	; 0x1d5a <_ZN29navputter_tenkey_keypad_class4pollEv+0x5e>
    1d9e:	2d 9a       	sbi	0x05, 5	; 5
    1da0:	e0 cf       	rjmp	.-64     	; 0x1d62 <_ZN29navputter_tenkey_keypad_class4pollEv+0x66>
            if ( global_ticks < m_until ) return;
    1da2:	80 91 be 08 	lds	r24, 0x08BE	; 0x8008be <global_ticks>
    1da6:	90 91 bf 08 	lds	r25, 0x08BF	; 0x8008bf <global_ticks+0x1>
    1daa:	a0 91 c0 08 	lds	r26, 0x08C0	; 0x8008c0 <global_ticks+0x2>
    1dae:	b0 91 c1 08 	lds	r27, 0x08C1	; 0x8008c1 <global_ticks+0x3>
    1db2:	41 81       	ldd	r20, Z+1	; 0x01
    1db4:	52 81       	ldd	r21, Z+2	; 0x02
    1db6:	63 81       	ldd	r22, Z+3	; 0x03
    1db8:	74 81       	ldd	r23, Z+4	; 0x04
    1dba:	84 17       	cp	r24, r20
    1dbc:	95 07       	cpc	r25, r21
    1dbe:	a6 07       	cpc	r26, r22
    1dc0:	b7 07       	cpc	r27, r23
    1dc2:	08 f4       	brcc	.+2      	; 0x1dc6 <_ZN29navputter_tenkey_keypad_class4pollEv+0xca>
    1dc4:	ad cf       	rjmp	.-166    	; 0x1d20 <_ZN29navputter_tenkey_keypad_class4pollEv+0x24>
            m_keypad_state = m_next_state;
    1dc6:	85 81       	ldd	r24, Z+5	; 0x05
    1dc8:	80 83       	st	Z, r24
            break;
    1dca:	aa cf       	rjmp	.-172    	; 0x1d20 <_ZN29navputter_tenkey_keypad_class4pollEv+0x24>
            ROW_PINS
    1dcc:	99 b1       	in	r25, 0x09	; 9
    1dce:	82 a1       	ldd	r24, Z+34	; 0x22
    1dd0:	48 2f       	mov	r20, r24
    1dd2:	50 e0       	ldi	r21, 0x00	; 0
    1dd4:	df 01       	movw	r26, r30
    1dd6:	a4 0f       	add	r26, r20
    1dd8:	b5 1f       	adc	r27, r21
    1dda:	16 96       	adiw	r26, 0x06	; 6
    1ddc:	2c 91       	ld	r18, X
    1dde:	16 97       	sbiw	r26, 0x06	; 6
    1de0:	2e 7f       	andi	r18, 0xFE	; 254
    1de2:	91 70       	andi	r25, 0x01	; 1
    1de4:	29 2b       	or	r18, r25
    1de6:	16 96       	adiw	r26, 0x06	; 6
    1de8:	2c 93       	st	X, r18
    1dea:	16 97       	sbiw	r26, 0x06	; 6
    1dec:	99 b1       	in	r25, 0x09	; 9
    1dee:	91 fb       	bst	r25, 1
    1df0:	cc 24       	eor	r12, r12
    1df2:	c0 f8       	bld	r12, 0
    1df4:	d1 2c       	mov	r13, r1
    1df6:	cc 0c       	add	r12, r12
    1df8:	dd 1c       	adc	r13, r13
    1dfa:	92 2f       	mov	r25, r18
    1dfc:	9d 7f       	andi	r25, 0xFD	; 253
    1dfe:	9c 29       	or	r25, r12
    1e00:	16 96       	adiw	r26, 0x06	; 6
    1e02:	9c 93       	st	X, r25
    1e04:	16 97       	sbiw	r26, 0x06	; 6
    1e06:	29 b1       	in	r18, 0x09	; 9
    1e08:	22 fb       	bst	r18, 2
    1e0a:	ee 24       	eor	r14, r14
    1e0c:	e0 f8       	bld	r14, 0
    1e0e:	f1 2c       	mov	r15, r1
    1e10:	ee 0c       	add	r14, r14
    1e12:	ff 1c       	adc	r15, r15
    1e14:	ee 0c       	add	r14, r14
    1e16:	ff 1c       	adc	r15, r15
    1e18:	9b 7f       	andi	r25, 0xFB	; 251
    1e1a:	9e 29       	or	r25, r14
    1e1c:	16 96       	adiw	r26, 0x06	; 6
    1e1e:	9c 93       	st	X, r25
    1e20:	16 97       	sbiw	r26, 0x06	; 6
    1e22:	29 b1       	in	r18, 0x09	; 9
    1e24:	23 fb       	bst	r18, 3
    1e26:	00 27       	eor	r16, r16
    1e28:	00 f9       	bld	r16, 0
    1e2a:	10 e0       	ldi	r17, 0x00	; 0
    1e2c:	33 e0       	ldi	r19, 0x03	; 3
    1e2e:	00 0f       	add	r16, r16
    1e30:	11 1f       	adc	r17, r17
    1e32:	3a 95       	dec	r19
    1e34:	e1 f7       	brne	.-8      	; 0x1e2e <_ZN29navputter_tenkey_keypad_class4pollEv+0x132>
    1e36:	97 7f       	andi	r25, 0xF7	; 247
    1e38:	90 2b       	or	r25, r16
    1e3a:	16 96       	adiw	r26, 0x06	; 6
    1e3c:	9c 93       	st	X, r25
    1e3e:	16 97       	sbiw	r26, 0x06	; 6
    1e40:	29 b1       	in	r18, 0x09	; 9
    1e42:	22 95       	swap	r18
    1e44:	21 70       	andi	r18, 0x01	; 1
    1e46:	c2 2f       	mov	r28, r18
    1e48:	20 e0       	ldi	r18, 0x00	; 0
    1e4a:	d2 2f       	mov	r29, r18
    1e4c:	64 e0       	ldi	r22, 0x04	; 4
    1e4e:	cc 0f       	add	r28, r28
    1e50:	dd 1f       	adc	r29, r29
    1e52:	6a 95       	dec	r22
    1e54:	e1 f7       	brne	.-8      	; 0x1e4e <_ZN29navputter_tenkey_keypad_class4pollEv+0x152>
    1e56:	9f 7e       	andi	r25, 0xEF	; 239
    1e58:	9c 2b       	or	r25, r28
    1e5a:	16 96       	adiw	r26, 0x06	; 6
    1e5c:	9c 93       	st	X, r25
    1e5e:	16 97       	sbiw	r26, 0x06	; 6
    1e60:	29 b1       	in	r18, 0x09	; 9
    1e62:	26 fb       	bst	r18, 6
    1e64:	66 27       	eor	r22, r22
    1e66:	60 f9       	bld	r22, 0
    1e68:	70 e0       	ldi	r23, 0x00	; 0
    1e6a:	c5 e0       	ldi	r28, 0x05	; 5
    1e6c:	66 0f       	add	r22, r22
    1e6e:	77 1f       	adc	r23, r23
    1e70:	ca 95       	dec	r28
    1e72:	e1 f7       	brne	.-8      	; 0x1e6c <_ZN29navputter_tenkey_keypad_class4pollEv+0x170>
    1e74:	9f 7d       	andi	r25, 0xDF	; 223
    1e76:	96 2b       	or	r25, r22
    1e78:	16 96       	adiw	r26, 0x06	; 6
    1e7a:	9c 93       	st	X, r25
            m_col = ((m_col+1) < CONFIG.cols )? m_col + 1 : 0;
    1e7c:	4f 5f       	subi	r20, 0xFF	; 255
    1e7e:	5f 4f       	sbci	r21, 0xFF	; 255
    1e80:	90 91 6a 03 	lds	r25, 0x036A	; 0x80036a <myputter+0x26a>
    1e84:	8f 5f       	subi	r24, 0xFF	; 255
    1e86:	94 17       	cp	r25, r20
    1e88:	15 06       	cpc	r1, r21
    1e8a:	09 f0       	breq	.+2      	; 0x1e8e <_ZN29navputter_tenkey_keypad_class4pollEv+0x192>
    1e8c:	0c f4       	brge	.+2      	; 0x1e90 <_ZN29navputter_tenkey_keypad_class4pollEv+0x194>
    1e8e:	80 e0       	ldi	r24, 0x00	; 0
    1e90:	82 a3       	std	Z+34, r24	; 0x22
            m_keypad_state =KP_SET_COLS;
    1e92:	10 82       	st	Z, r1
            if ( m_col == 0 ) trigger();
    1e94:	81 11       	cpse	r24, r1
    1e96:	44 cf       	rjmp	.-376    	; 0x1d20 <_ZN29navputter_tenkey_keypad_class4pollEv+0x24>
    1e98:	cf 01       	movw	r24, r30
}
    1e9a:	df 91       	pop	r29
    1e9c:	cf 91       	pop	r28
    1e9e:	1f 91       	pop	r17
    1ea0:	0f 91       	pop	r16
    1ea2:	ff 90       	pop	r15
    1ea4:	ef 90       	pop	r14
    1ea6:	df 90       	pop	r13
    1ea8:	cf 90       	pop	r12
            if ( m_col == 0 ) trigger();
    1eaa:	af ce       	rjmp	.-674    	; 0x1c0a <_ZN29navputter_tenkey_keypad_class7triggerEv>

00001eac <_ZN15navputter_class18read_eeprom_keymapEv>:
{
    1eac:	ff 92       	push	r15
    1eae:	0f 93       	push	r16
    1eb0:	1f 93       	push	r17
    1eb2:	cf 93       	push	r28
    1eb4:	df 93       	push	r29
    1eb6:	ec 01       	movw	r28, r24
    PROM.read( (void *)m_cur_map, sizeof(m_cur_map), EEPROM_KEYMAP_START + CONFIG.default_keymap * KEY_MAP_SIZE ); 
    1eb8:	05 e7       	ldi	r16, 0x75	; 117
    1eba:	13 e0       	ldi	r17, 0x03	; 3
    1ebc:	f8 01       	movw	r30, r16
    1ebe:	60 81       	ld	r22, Z
    1ec0:	84 e2       	ldi	r24, 0x24	; 36
    1ec2:	f8 2e       	mov	r15, r24
    1ec4:	6f 9d       	mul	r22, r15
    1ec6:	b0 01       	movw	r22, r0
    1ec8:	11 24       	eor	r1, r1
    1eca:	68 54       	subi	r22, 0x48	; 72
    1ecc:	7f 4f       	sbci	r23, 0xFF	; 255
    eeprom_read_block( buf, (void *)((uint8_t *)eeprom_start + offset), len );
    1ece:	80 91 ba 08 	lds	r24, 0x08BA	; 0x8008ba <__data_end>
    1ed2:	90 91 bb 08 	lds	r25, 0x08BB	; 0x8008bb <__data_end+0x1>
    1ed6:	68 0f       	add	r22, r24
    1ed8:	79 1f       	adc	r23, r25
    1eda:	44 e2       	ldi	r20, 0x24	; 36
    1edc:	50 e0       	ldi	r21, 0x00	; 0
    1ede:	ce 01       	movw	r24, r28
    1ee0:	8a 58       	subi	r24, 0x8A	; 138
    1ee2:	9d 4f       	sbci	r25, 0xFD	; 253
    1ee4:	0e 94 7f 34 	call	0x68fe	; 0x68fe <eeprom_read_block>
    PROM.read( (void *)m_seq_map, sizeof(m_seq_map), EEPROM_KEYMAP_START + CONFIG.default_keymap * KEY_MAP_SIZE + sizeof(m_cur_map)); 
    1ee8:	f8 01       	movw	r30, r16
    1eea:	60 81       	ld	r22, Z
    1eec:	6f 9d       	mul	r22, r15
    1eee:	b0 01       	movw	r22, r0
    1ef0:	11 24       	eor	r1, r1
    1ef2:	64 52       	subi	r22, 0x24	; 36
    1ef4:	7f 4f       	sbci	r23, 0xFF	; 255
    eeprom_read_block( buf, (void *)((uint8_t *)eeprom_start + offset), len );
    1ef6:	80 91 ba 08 	lds	r24, 0x08BA	; 0x8008ba <__data_end>
    1efa:	90 91 bb 08 	lds	r25, 0x08BB	; 0x8008bb <__data_end+0x1>
    1efe:	68 0f       	add	r22, r24
    1f00:	79 1f       	adc	r23, r25
    1f02:	48 e9       	ldi	r20, 0x98	; 152
    1f04:	50 e0       	ldi	r21, 0x00	; 0
    1f06:	ce 01       	movw	r24, r28
    1f08:	86 56       	subi	r24, 0x66	; 102
    1f0a:	9d 4f       	sbci	r25, 0xFD	; 253
}
    1f0c:	df 91       	pop	r29
    1f0e:	cf 91       	pop	r28
    1f10:	1f 91       	pop	r17
    1f12:	0f 91       	pop	r16
    1f14:	ff 90       	pop	r15
    eeprom_read_block( buf, (void *)((uint8_t *)eeprom_start + offset), len );
    1f16:	0c 94 7f 34 	jmp	0x68fe	; 0x68fe <eeprom_read_block>

00001f1a <_ZN22navputter_eeprom_class4initEv>:
{
    1f1a:	cf 92       	push	r12
    1f1c:	df 92       	push	r13
    1f1e:	ef 92       	push	r14
    1f20:	ff 92       	push	r15
    1f22:	0f 93       	push	r16
    1f24:	1f 93       	push	r17
    1f26:	cf 93       	push	r28
    1f28:	df 93       	push	r29
    1f2a:	cd b7       	in	r28, 0x3d	; 61
    1f2c:	de b7       	in	r29, 0x3e	; 62
    1f2e:	6e 97       	sbiw	r28, 0x1e	; 30
    1f30:	0f b6       	in	r0, 0x3f	; 63
    1f32:	f8 94       	cli
    1f34:	de bf       	out	0x3e, r29	; 62
    1f36:	0f be       	out	0x3f, r0	; 63
    1f38:	cd bf       	out	0x3d, r28	; 61
    1f3a:	6c 01       	movw	r12, r24
    eeprom_header_t hdr={0};
    1f3c:	7e 01       	movw	r14, r28
    1f3e:	20 e1       	ldi	r18, 0x10	; 16
    1f40:	e2 0e       	add	r14, r18
    1f42:	f1 1c       	adc	r15, r1
    1f44:	8f e0       	ldi	r24, 0x0F	; 15
    1f46:	d7 01       	movw	r26, r14
    1f48:	1d 92       	st	X+, r1
    1f4a:	8a 95       	dec	r24
    1f4c:	e9 f7       	brne	.-6      	; 0x1f48 <_ZN22navputter_eeprom_class4initEv+0x2e>
    read((void *)&hdr, sizeof( hdr ));
    1f4e:	d6 01       	movw	r26, r12
    1f50:	ed 91       	ld	r30, X+
    1f52:	fc 91       	ld	r31, X
    1f54:	01 90       	ld	r0, Z+
    1f56:	f0 81       	ld	r31, Z
    1f58:	e0 2d       	mov	r30, r0
    1f5a:	10 e0       	ldi	r17, 0x00	; 0
    1f5c:	00 e0       	ldi	r16, 0x00	; 0
    1f5e:	2f e0       	ldi	r18, 0x0F	; 15
    1f60:	30 e0       	ldi	r19, 0x00	; 0
    1f62:	40 e0       	ldi	r20, 0x00	; 0
    1f64:	50 e0       	ldi	r21, 0x00	; 0
    1f66:	b7 01       	movw	r22, r14
    1f68:	c6 01       	movw	r24, r12
    1f6a:	09 95       	icall
    if ( hdr_default.version != hdr.version )
    1f6c:	88 89       	ldd	r24, Y+16	; 0x10
    1f6e:	99 89       	ldd	r25, Y+17	; 0x11
    1f70:	84 30       	cpi	r24, 0x04	; 4
    1f72:	91 40       	sbci	r25, 0x01	; 1
    1f74:	09 f4       	brne	.+2      	; 0x1f78 <_ZN22navputter_eeprom_class4initEv+0x5e>
    1f76:	5a c0       	rjmp	.+180    	; 0x202c <_ZN22navputter_eeprom_class4initEv+0x112>
        memcpy( (void *)&CONFIG, (void *)&hdr_default, sizeof( hdr_default ) );
    1f78:	84 e0       	ldi	r24, 0x04	; 4
    1f7a:	91 e0       	ldi	r25, 0x01	; 1
    1f7c:	9a 83       	std	Y+2, r25	; 0x02
    1f7e:	89 83       	std	Y+1, r24	; 0x01
    1f80:	86 e0       	ldi	r24, 0x06	; 6
    1f82:	8b 83       	std	Y+3, r24	; 0x03
    1f84:	8c 83       	std	Y+4, r24	; 0x04
    1f86:	ff 24       	eor	r15, r15
    1f88:	f3 94       	inc	r15
    1f8a:	fd 82       	std	Y+5, r15	; 0x05
    1f8c:	fe 82       	std	Y+6, r15	; 0x06
    1f8e:	82 e0       	ldi	r24, 0x02	; 2
    1f90:	8f 83       	std	Y+7, r24	; 0x07
    1f92:	18 86       	std	Y+8, r1	; 0x08
    1f94:	80 e8       	ldi	r24, 0x80	; 128
    1f96:	97 e0       	ldi	r25, 0x07	; 7
    1f98:	9a 87       	std	Y+10, r25	; 0x0a
    1f9a:	89 87       	std	Y+9, r24	; 0x09
    1f9c:	88 e3       	ldi	r24, 0x38	; 56
    1f9e:	94 e0       	ldi	r25, 0x04	; 4
    1fa0:	9c 87       	std	Y+12, r25	; 0x0c
    1fa2:	8b 87       	std	Y+11, r24	; 0x0b
    1fa4:	fd 86       	std	Y+13, r15	; 0x0d
    1fa6:	1e 86       	std	Y+14, r1	; 0x0e
    1fa8:	8f ef       	ldi	r24, 0xFF	; 255
    1faa:	8f 87       	std	Y+15, r24	; 0x0f
    1fac:	8f e0       	ldi	r24, 0x0F	; 15
    1fae:	fe 01       	movw	r30, r28
    1fb0:	31 96       	adiw	r30, 0x01	; 1
    1fb2:	a7 e6       	ldi	r26, 0x67	; 103
    1fb4:	b3 e0       	ldi	r27, 0x03	; 3
    1fb6:	01 90       	ld	r0, Z+
    1fb8:	0d 92       	st	X+, r0
    1fba:	8a 95       	dec	r24
    1fbc:	e1 f7       	brne	.-8      	; 0x1fb6 <_ZN22navputter_eeprom_class4initEv+0x9c>
        write((void *)&CONFIG, sizeof(CONFIG));
    1fbe:	d6 01       	movw	r26, r12
    1fc0:	ed 91       	ld	r30, X+
    1fc2:	fc 91       	ld	r31, X
    1fc4:	02 80       	ldd	r0, Z+2	; 0x02
    1fc6:	f3 81       	ldd	r31, Z+3	; 0x03
    1fc8:	e0 2d       	mov	r30, r0
    1fca:	2f e0       	ldi	r18, 0x0F	; 15
    1fcc:	30 e0       	ldi	r19, 0x00	; 0
    1fce:	40 e0       	ldi	r20, 0x00	; 0
    1fd0:	50 e0       	ldi	r21, 0x00	; 0
    1fd2:	67 e6       	ldi	r22, 0x67	; 103
    1fd4:	73 e0       	ldi	r23, 0x03	; 3
    1fd6:	c6 01       	movw	r24, r12
    1fd8:	09 95       	icall
        SERIAL.print_P( global_eeprom_string,  "RESET.", hdr_default.version, EOLN);
    1fda:	83 e3       	ldi	r24, 0x33	; 51
    1fdc:	94 e0       	ldi	r25, 0x04	; 4
    1fde:	9f 93       	push	r25
    1fe0:	8f 93       	push	r24
    1fe2:	ff 92       	push	r15
    1fe4:	84 e0       	ldi	r24, 0x04	; 4
    1fe6:	8f 93       	push	r24
    1fe8:	85 e9       	ldi	r24, 0x95	; 149
    1fea:	96 e0       	ldi	r25, 0x06	; 6
    1fec:	9f 93       	push	r25
    1fee:	8f 93       	push	r24
    1ff0:	89 e5       	ldi	r24, 0x59	; 89
    1ff2:	94 e0       	ldi	r25, 0x04	; 4
    1ff4:	9f 93       	push	r25
    1ff6:	8f 93       	push	r24
    1ff8:	8a e1       	ldi	r24, 0x1A	; 26
    1ffa:	91 e0       	ldi	r25, 0x01	; 1
    1ffc:	9f 93       	push	r25
    1ffe:	8f 93       	push	r24
    2000:	0e 94 96 07 	call	0xf2c	; 0xf2c <_ZN22navputter_serial_class7print_PEPKcz>
    2004:	0f b6       	in	r0, 0x3f	; 63
    2006:	f8 94       	cli
    2008:	de bf       	out	0x3e, r29	; 62
    200a:	0f be       	out	0x3f, r0	; 63
    200c:	cd bf       	out	0x3d, r28	; 61
}
    200e:	6e 96       	adiw	r28, 0x1e	; 30
    2010:	0f b6       	in	r0, 0x3f	; 63
    2012:	f8 94       	cli
    2014:	de bf       	out	0x3e, r29	; 62
    2016:	0f be       	out	0x3f, r0	; 63
    2018:	cd bf       	out	0x3d, r28	; 61
    201a:	df 91       	pop	r29
    201c:	cf 91       	pop	r28
    201e:	1f 91       	pop	r17
    2020:	0f 91       	pop	r16
    2022:	ff 90       	pop	r15
    2024:	ef 90       	pop	r14
    2026:	df 90       	pop	r13
    2028:	cf 90       	pop	r12
    202a:	08 95       	ret
        memcpy( (void *)&CONFIG, (void *)&hdr, sizeof( hdr_default ) );
    202c:	8f e0       	ldi	r24, 0x0F	; 15
    202e:	f7 01       	movw	r30, r14
    2030:	a7 e6       	ldi	r26, 0x67	; 103
    2032:	b3 e0       	ldi	r27, 0x03	; 3
    2034:	01 90       	ld	r0, Z+
    2036:	0d 92       	st	X+, r0
    2038:	8a 95       	dec	r24
    203a:	e1 f7       	brne	.-8      	; 0x2034 <_ZN22navputter_eeprom_class4initEv+0x11a>
        SERIAL.print_P( global_eeprom_string, "read.",  hdr.version, EOLN );
    203c:	83 e3       	ldi	r24, 0x33	; 51
    203e:	94 e0       	ldi	r25, 0x04	; 4
    2040:	9f 93       	push	r25
    2042:	8f 93       	push	r24
    2044:	81 e0       	ldi	r24, 0x01	; 1
    2046:	8f 93       	push	r24
    2048:	84 e0       	ldi	r24, 0x04	; 4
    204a:	8f 93       	push	r24
    204c:	8c e9       	ldi	r24, 0x9C	; 156
    204e:	96 e0       	ldi	r25, 0x06	; 6
    2050:	9f 93       	push	r25
    2052:	8f 93       	push	r24
    2054:	89 e5       	ldi	r24, 0x59	; 89
    2056:	94 e0       	ldi	r25, 0x04	; 4
    2058:	9f 93       	push	r25
    205a:	8f 93       	push	r24
    205c:	8a e1       	ldi	r24, 0x1A	; 26
    205e:	91 e0       	ldi	r25, 0x01	; 1
    2060:	9f 93       	push	r25
    2062:	8f 93       	push	r24
    2064:	0e 94 96 07 	call	0xf2c	; 0xf2c <_ZN22navputter_serial_class7print_PEPKcz>
        if ( CONFIG.default_keymap != BUILT_IN_MAP )
    2068:	0f b6       	in	r0, 0x3f	; 63
    206a:	f8 94       	cli
    206c:	de bf       	out	0x3e, r29	; 62
    206e:	0f be       	out	0x3f, r0	; 63
    2070:	cd bf       	out	0x3d, r28	; 61
    2072:	80 91 75 03 	lds	r24, 0x0375	; 0x800375 <myputter+0x275>
    2076:	8f 3f       	cpi	r24, 0xFF	; 255
    2078:	51 f2       	breq	.-108    	; 0x200e <_ZN22navputter_eeprom_class4initEv+0xf4>
            myputter.read_eeprom_keymap();
    207a:	80 e0       	ldi	r24, 0x00	; 0
    207c:	91 e0       	ldi	r25, 0x01	; 1
    207e:	16 df       	rcall	.-468    	; 0x1eac <_ZN15navputter_class18read_eeprom_keymapEv>
}
    2080:	c6 cf       	rjmp	.-116    	; 0x200e <_ZN22navputter_eeprom_class4initEv+0xf4>

00002082 <_ZN15navputter_class5beginEv>:
    void begin()
    2082:	0f 93       	push	r16
    2084:	1f 93       	push	r17
    2086:	cf 93       	push	r28
    2088:	df 93       	push	r29
    208a:	ec 01       	movw	r28, r24
        memset( &m_config, 0, sizeof( m_config ) );
    208c:	fc 01       	movw	r30, r24
    208e:	e9 59       	subi	r30, 0x99	; 153
    2090:	fd 4f       	sbci	r31, 0xFD	; 253
    2092:	8f e0       	ldi	r24, 0x0F	; 15
    2094:	df 01       	movw	r26, r30
    2096:	1d 92       	st	X+, r1
    2098:	8a 95       	dec	r24
    209a:	e9 f7       	brne	.-6      	; 0x2096 <_ZN15navputter_class5beginEv+0x14>
        memset( m_cur_map, 0, sizeof( m_cur_map) );
    209c:	3f 96       	adiw	r30, 0x0f	; 15
    209e:	84 e2       	ldi	r24, 0x24	; 36
    20a0:	df 01       	movw	r26, r30
    20a2:	1d 92       	st	X+, r1
    20a4:	8a 95       	dec	r24
    20a6:	e9 f7       	brne	.-6      	; 0x20a2 <_ZN15navputter_class5beginEv+0x20>
        memset( m_seq_map, 0, sizeof( m_seq_map) );
    20a8:	b4 96       	adiw	r30, 0x24	; 36
    20aa:	88 e9       	ldi	r24, 0x98	; 152
    20ac:	df 01       	movw	r26, r30
    20ae:	1d 92       	st	X+, r1
    20b0:	8a 95       	dec	r24
    20b2:	e9 f7       	brne	.-6      	; 0x20ae <_ZN15navputter_class5beginEv+0x2c>
	    SetupHardware();
    20b4:	0e 94 d5 25 	call	0x4baa	; 0x4baa <SetupHardware>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    20b8:	78 94       	sei
            CDC_Device_CreateStream(&VirtualSerial_CDC_Interface, &m_stream_obj);
    20ba:	8e 01       	movw	r16, r28
    20bc:	04 5e       	subi	r16, 0xE4	; 228
    20be:	1f 4f       	sbci	r17, 0xFF	; 255
    20c0:	b8 01       	movw	r22, r16
    20c2:	8c e4       	ldi	r24, 0x4C	; 76
    20c4:	94 e0       	ldi	r25, 0x04	; 4
    20c6:	0e 94 4f 2c 	call	0x589e	; 0x589e <CDC_Device_CreateStream>
            m_stream = &m_stream_obj;
    20ca:	1f a7       	std	Y+47, r17	; 0x2f
    20cc:	0e a7       	std	Y+46, r16	; 0x2e
            m_ready_after = global_ticks + SERIAL_STARTUP_DELAY_MS;
    20ce:	80 91 be 08 	lds	r24, 0x08BE	; 0x8008be <global_ticks>
    20d2:	90 91 bf 08 	lds	r25, 0x08BF	; 0x8008bf <global_ticks+0x1>
    20d6:	a0 91 c0 08 	lds	r26, 0x08C0	; 0x8008c0 <global_ticks+0x2>
    20da:	b0 91 c1 08 	lds	r27, 0x08C1	; 0x8008c1 <global_ticks+0x3>
    20de:	80 56       	subi	r24, 0x60	; 96
    20e0:	90 4f       	sbci	r25, 0xF0	; 240
    20e2:	af 4f       	sbci	r26, 0xFF	; 255
    20e4:	bf 4f       	sbci	r27, 0xFF	; 255
    20e6:	8a a7       	std	Y+42, r24	; 0x2a
    20e8:	9b a7       	std	Y+43, r25	; 0x2b
    20ea:	ac a7       	std	Y+44, r26	; 0x2c
    20ec:	bd a7       	std	Y+45, r27	; 0x2d
            m_head = m_tail = 0;
    20ee:	fe 01       	movw	r30, r28
    20f0:	ef 5b       	subi	r30, 0xBF	; 191
    20f2:	ff 4f       	sbci	r31, 0xFF	; 255
    20f4:	10 82       	st	Z, r1
    20f6:	31 97       	sbiw	r30, 0x01	; 1
    20f8:	10 82       	st	Z, r1
        m_callback = t;
    20fa:	18 86       	std	Y+8, r1	; 0x08
    20fc:	1f 82       	std	Y+7, r1	; 0x07
        m_interval = milliseconds;
    20fe:	88 ee       	ldi	r24, 0xE8	; 232
    2100:	93 e0       	ldi	r25, 0x03	; 3
    2102:	a0 e0       	ldi	r26, 0x00	; 0
    2104:	b0 e0       	ldi	r27, 0x00	; 0
    2106:	89 8b       	std	Y+17, r24	; 0x11
    2108:	9a 8b       	std	Y+18, r25	; 0x12
    210a:	ab 8b       	std	Y+19, r26	; 0x13
    210c:	bc 8b       	std	Y+20, r27	; 0x14
        m_call_next = global_ticks+m_interval;
    210e:	80 91 be 08 	lds	r24, 0x08BE	; 0x8008be <global_ticks>
    2112:	90 91 bf 08 	lds	r25, 0x08BF	; 0x8008bf <global_ticks+0x1>
    2116:	a0 91 c0 08 	lds	r26, 0x08C0	; 0x8008c0 <global_ticks+0x2>
    211a:	b0 91 c1 08 	lds	r27, 0x08C1	; 0x8008c1 <global_ticks+0x3>
    211e:	88 51       	subi	r24, 0x18	; 24
    2120:	9c 4f       	sbci	r25, 0xFC	; 252
    2122:	af 4f       	sbci	r26, 0xFF	; 255
    2124:	bf 4f       	sbci	r27, 0xFF	; 255
    2126:	89 87       	std	Y+9, r24	; 0x09
    2128:	9a 87       	std	Y+10, r25	; 0x0a
    212a:	ab 87       	std	Y+11, r26	; 0x0b
    212c:	bc 87       	std	Y+12, r27	; 0x0c
        start_timer(milliseconds);
    212e:	68 ee       	ldi	r22, 0xE8	; 232
    2130:	73 e0       	ldi	r23, 0x03	; 3
    2132:	80 e0       	ldi	r24, 0x00	; 0
    2134:	90 e0       	ldi	r25, 0x00	; 0
    2136:	d6 db       	rcall	.-2132   	; 0x18e4 <start_timer>
        m_job_head = NULL;
    2138:	1e 8a       	std	Y+22, r1	; 0x16
    213a:	1d 8a       	std	Y+21, r1	; 0x15
        m_job_tail = NULL;
    213c:	18 8e       	std	Y+24, r1	; 0x18
    213e:	1f 8a       	std	Y+23, r1	; 0x17
            wdt_reset();
    2140:	a8 95       	wdr
				: "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
						_BV(WDE) | (value & 0x07)) )
				: "r0"
		);
    2142:	88 e1       	ldi	r24, 0x18	; 24
    2144:	9c e0       	ldi	r25, 0x0C	; 12
    2146:	0f b6       	in	r0, 0x3f	; 63
    2148:	f8 94       	cli
    214a:	a8 95       	wdr
    214c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    2150:	0f be       	out	0x3f, r0	; 63
    2152:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
        m_keypad.begin();
    2156:	ce 01       	movw	r24, r28
    2158:	80 5c       	subi	r24, 0xC0	; 192
    215a:	9d 4f       	sbci	r25, 0xFD	; 253
    215c:	42 dd       	rcall	.-1404   	; 0x1be2 <_ZN29navputter_tenkey_keypad_class5beginEv>
            memset( m_mouse_moves, 0, sizeof( m_mouse_moves ) );
    215e:	84 e0       	ldi	r24, 0x04	; 4
    2160:	fe 01       	movw	r30, r28
    2162:	11 92       	st	Z+, r1
    2164:	8a 95       	dec	r24
    2166:	e9 f7       	brne	.-6      	; 0x2162 <_ZN15navputter_class5beginEv+0xe0>
            memset( m_mouse_clicks, 0, sizeof( m_mouse_clicks) );
    2168:	fe 01       	movw	r30, r28
    216a:	34 96       	adiw	r30, 0x04	; 4
    216c:	83 e0       	ldi	r24, 0x03	; 3
    216e:	df 01       	movw	r26, r30
    2170:	1d 92       	st	X+, r1
    2172:	8a 95       	dec	r24
    2174:	e9 f7       	brne	.-6      	; 0x2170 <_ZN15navputter_class5beginEv+0xee>
            return ( global_ticks >= m_ready_after ); 
    2176:	80 91 be 08 	lds	r24, 0x08BE	; 0x8008be <global_ticks>
    217a:	90 91 bf 08 	lds	r25, 0x08BF	; 0x8008bf <global_ticks+0x1>
    217e:	a0 91 c0 08 	lds	r26, 0x08C0	; 0x8008c0 <global_ticks+0x2>
    2182:	b0 91 c1 08 	lds	r27, 0x08C1	; 0x8008c1 <global_ticks+0x3>
        while( !m_serial.available() ) m_watchdog.kick();
    2186:	4a a5       	ldd	r20, Y+42	; 0x2a
    2188:	5b a5       	ldd	r21, Y+43	; 0x2b
    218a:	6c a5       	ldd	r22, Y+44	; 0x2c
    218c:	7d a5       	ldd	r23, Y+45	; 0x2d
    218e:	84 17       	cp	r24, r20
    2190:	95 07       	cpc	r25, r21
    2192:	a6 07       	cpc	r26, r22
    2194:	b7 07       	cpc	r27, r23
    2196:	10 f4       	brcc	.+4      	; 0x219c <_ZN15navputter_class5beginEv+0x11a>
            wdt_reset();
    2198:	a8 95       	wdr
    219a:	ed cf       	rjmp	.-38     	; 0x2176 <_ZN15navputter_class5beginEv+0xf4>
        m_eeprom.begin();
    219c:	8e 01       	movw	r16, r28
    219e:	0d 59       	subi	r16, 0x9D	; 157
    21a0:	1d 4f       	sbci	r17, 0xFD	; 253
    21a2:	c8 01       	movw	r24, r16
        m_eeprom.init();
    21a4:	d4 db       	rcall	.-2136   	; 0x194e <_ZN22navputter_eeprom_class5beginEv>
    21a6:	c8 01       	movw	r24, r16
    21a8:	b8 de       	rcall	.-656    	; 0x1f1a <_ZN22navputter_eeprom_class4initEv>
        m_cur_menu = NULL;
    21aa:	fe 01       	movw	r30, r28
    21ac:	eb 59       	subi	r30, 0x9B	; 155
    21ae:	fd 4f       	sbci	r31, 0xFD	; 253
    21b0:	11 82       	std	Z+1, r1	; 0x01
    21b2:	10 82       	st	Z, r1
        m_eeprom_dirty = false;
    21b4:	ce 5c       	subi	r28, 0xCE	; 206
    21b6:	dc 4f       	sbci	r29, 0xFC	; 252
    21b8:	18 82       	st	Y, r1
    }
    21ba:	df 91       	pop	r29
    21bc:	cf 91       	pop	r28
    21be:	1f 91       	pop	r17
    21c0:	0f 91       	pop	r16
    21c2:	08 95       	ret

000021c4 <_ZN25navputter_main_menu_class13handle_eepromEv>:
    myputter.clear_menu();
    21c4:	0e 94 82 03 	call	0x704	; 0x704 <_ZN15navputter_class10clear_menuEv.isra.25.constprop.30>
    return malloc(objsize); 
    21c8:	8f e0       	ldi	r24, 0x0F	; 15
    21ca:	90 e0       	ldi	r25, 0x00	; 0
    21cc:	0e 94 35 2f 	call	0x5e6a	; 0x5e6a <malloc>
    navputter_eeprom_menu_class *em = new navputter_eeprom_menu_class( );
    21d0:	2f e0       	ldi	r18, 0x0F	; 15
    21d2:	fc 01       	movw	r30, r24
    21d4:	11 92       	st	Z+, r1
    21d6:	2a 95       	dec	r18
    21d8:	e9 f7       	brne	.-6      	; 0x21d4 <_ZN25navputter_main_menu_class13handle_eepromEv+0x10>
class navputter_eeprom_menu_class : public navputter_menu_base_class
    21da:	2c e8       	ldi	r18, 0x8C	; 140
    21dc:	38 e0       	ldi	r19, 0x08	; 8
    21de:	fc 01       	movw	r30, r24
    21e0:	31 83       	std	Z+1, r19	; 0x01
    21e2:	20 83       	st	Z, r18
    myputter.set_menu(em);
    21e4:	bc 01       	movw	r22, r24
    21e6:	80 e0       	ldi	r24, 0x00	; 0
    21e8:	91 e0       	ldi	r25, 0x01	; 1
    21ea:	0c 94 be 08 	jmp	0x117c	; 0x117c <_ZN15navputter_class8set_menuEP25navputter_menu_base_class>

000021ee <_ZN25navputter_main_menu_class11serial_gpioEv>:
    myputter.clear_menu();
    21ee:	0e 94 82 03 	call	0x704	; 0x704 <_ZN15navputter_class10clear_menuEv.isra.25.constprop.30>
    return malloc(objsize); 
    21f2:	81 e1       	ldi	r24, 0x11	; 17
    21f4:	90 e0       	ldi	r25, 0x00	; 0
    21f6:	0e 94 35 2f 	call	0x5e6a	; 0x5e6a <malloc>
    navputter_gpio_menu_class *gm = new navputter_gpio_menu_class();
    21fa:	21 e1       	ldi	r18, 0x11	; 17
    21fc:	fc 01       	movw	r30, r24
    21fe:	11 92       	st	Z+, r1
    2200:	2a 95       	dec	r18
    2202:	e9 f7       	brne	.-6      	; 0x21fe <_ZN25navputter_main_menu_class11serial_gpioEv+0x10>
class navputter_gpio_menu_class: public navputter_menu_base_class
    2204:	28 e9       	ldi	r18, 0x98	; 152
    2206:	38 e0       	ldi	r19, 0x08	; 8
    2208:	fc 01       	movw	r30, r24
    220a:	31 83       	std	Z+1, r19	; 0x01
    220c:	20 83       	st	Z, r18
    assert(gm);
    220e:	00 97       	sbiw	r24, 0x00	; 0
    2210:	11 f4       	brne	.+4      	; 0x2216 <_ZN25navputter_main_menu_class11serial_gpioEv+0x28>
    2212:	0e 94 6a 31 	call	0x62d4	; 0x62d4 <abort>
    myputter.set_menu(gm);
    2216:	bc 01       	movw	r22, r24
    2218:	80 e0       	ldi	r24, 0x00	; 0
    221a:	91 e0       	ldi	r25, 0x01	; 1
    221c:	0c 94 be 08 	jmp	0x117c	; 0x117c <_ZN15navputter_class8set_menuEP25navputter_menu_base_class>

00002220 <_ZN25navputter_main_menu_class12write_eepromEv>:
{
    2220:	0f 93       	push	r16
    2222:	1f 93       	push	r17
    PROM.write( &CONFIG, sizeof( CONFIG ) );
    2224:	10 e0       	ldi	r17, 0x00	; 0
    2226:	00 e0       	ldi	r16, 0x00	; 0
    2228:	2f e0       	ldi	r18, 0x0F	; 15
    222a:	30 e0       	ldi	r19, 0x00	; 0
    222c:	40 e0       	ldi	r20, 0x00	; 0
    222e:	50 e0       	ldi	r21, 0x00	; 0
    2230:	67 e6       	ldi	r22, 0x67	; 103
    2232:	73 e0       	ldi	r23, 0x03	; 3
    2234:	83 e6       	ldi	r24, 0x63	; 99
    2236:	93 e0       	ldi	r25, 0x03	; 3
    2238:	0e 94 43 03 	call	0x686	; 0x686 <_ZN22navputter_eeprom_class5writeEPvmj>
    SERIAL.print_P( global_eeprom_string_1, EOLN, EOLN );
    223c:	83 e3       	ldi	r24, 0x33	; 51
    223e:	94 e0       	ldi	r25, 0x04	; 4
    2240:	9f 93       	push	r25
    2242:	8f 93       	push	r24
    2244:	9f 93       	push	r25
    2246:	8f 93       	push	r24
    2248:	88 e3       	ldi	r24, 0x38	; 56
    224a:	94 e0       	ldi	r25, 0x04	; 4
    224c:	9f 93       	push	r25
    224e:	8f 93       	push	r24
    2250:	8a e1       	ldi	r24, 0x1A	; 26
    2252:	91 e0       	ldi	r25, 0x01	; 1
    2254:	9f 93       	push	r25
    2256:	8f 93       	push	r24
    2258:	0e 94 96 07 	call	0xf2c	; 0xf2c <_ZN22navputter_serial_class7print_PEPKcz>
}
    225c:	8d b7       	in	r24, 0x3d	; 61
    225e:	9e b7       	in	r25, 0x3e	; 62
    2260:	08 96       	adiw	r24, 0x08	; 8
    2262:	0f b6       	in	r0, 0x3f	; 63
    2264:	f8 94       	cli
    2266:	9e bf       	out	0x3e, r25	; 62
    2268:	0f be       	out	0x3f, r0	; 63
    226a:	8d bf       	out	0x3d, r24	; 61
    226c:	1f 91       	pop	r17
    226e:	0f 91       	pop	r16
    2270:	08 95       	ret

00002272 <_ZN25navputter_main_menu_class14handle_keymapsEv>:
    myputter.clear_menu();
    2272:	0e 94 82 03 	call	0x704	; 0x704 <_ZN15navputter_class10clear_menuEv.isra.25.constprop.30>
    return malloc(objsize); 
    2276:	85 ed       	ldi	r24, 0xD5	; 213
    2278:	90 e0       	ldi	r25, 0x00	; 0
    227a:	0e 94 35 2f 	call	0x5e6a	; 0x5e6a <malloc>
    navputter_keycode_menu_class *km = new navputter_keycode_menu_class();
    227e:	25 ed       	ldi	r18, 0xD5	; 213
    2280:	fc 01       	movw	r30, r24
    2282:	11 92       	st	Z+, r1
    2284:	2a 95       	dec	r18
    2286:	e9 f7       	brne	.-6      	; 0x2282 <_ZN25navputter_main_menu_class14handle_keymapsEv+0x10>
class navputter_keycode_menu_class: public navputter_menu_base_class
    2288:	24 ea       	ldi	r18, 0xA4	; 164
    228a:	38 e0       	ldi	r19, 0x08	; 8
    228c:	fc 01       	movw	r30, r24
    228e:	31 83       	std	Z+1, r19	; 0x01
    2290:	20 83       	st	Z, r18
    assert(km);
    2292:	00 97       	sbiw	r24, 0x00	; 0
    2294:	11 f4       	brne	.+4      	; 0x229a <_ZN25navputter_main_menu_class14handle_keymapsEv+0x28>
    2296:	0e 94 6a 31 	call	0x62d4	; 0x62d4 <abort>
    myputter.set_menu(km);
    229a:	bc 01       	movw	r22, r24
    229c:	80 e0       	ldi	r24, 0x00	; 0
    229e:	91 e0       	ldi	r25, 0x01	; 1
    22a0:	0c 94 be 08 	jmp	0x117c	; 0x117c <_ZN15navputter_class8set_menuEP25navputter_menu_base_class>

000022a4 <_ZN25navputter_main_menu_class4pollEv>:
{
    22a4:	cf 93       	push	r28
    22a6:	df 93       	push	r29
    22a8:	ec 01       	movw	r28, r24
    char c = SERIAL.read();
    22aa:	8a e1       	ldi	r24, 0x1A	; 26
    22ac:	91 e0       	ldi	r25, 0x01	; 1
    22ae:	0e 94 0d 03 	call	0x61a	; 0x61a <_ZN22navputter_serial_class4readEv>
    if ( c != 0xff )
    22b2:	8f 3f       	cpi	r24, 0xFF	; 255
    22b4:	31 f1       	breq	.+76     	; 0x2302 <_ZN25navputter_main_menu_class4pollEv+0x5e>
    _SER_CMDS_
    22b6:	88 36       	cpi	r24, 0x68	; 104
    22b8:	81 f4       	brne	.+32     	; 0x22da <_ZN25navputter_main_menu_class4pollEv+0x36>
    22ba:	e8 81       	ld	r30, Y
    22bc:	f9 81       	ldd	r31, Y+1	; 0x01
    22be:	06 80       	ldd	r0, Z+6	; 0x06
    22c0:	f7 81       	ldd	r31, Z+7	; 0x07
    22c2:	e0 2d       	mov	r30, r0
    22c4:	ce 01       	movw	r24, r28
    22c6:	09 95       	icall
        usage();    
    22c8:	e8 81       	ld	r30, Y
    22ca:	f9 81       	ldd	r31, Y+1	; 0x01
    22cc:	06 80       	ldd	r0, Z+6	; 0x06
    22ce:	f7 81       	ldd	r31, Z+7	; 0x07
    22d0:	e0 2d       	mov	r30, r0
    22d2:	ce 01       	movw	r24, r28
}
    22d4:	df 91       	pop	r29
    22d6:	cf 91       	pop	r28
        usage();    
    22d8:	09 94       	ijmp
    _SER_CMDS_
    22da:	85 36       	cpi	r24, 0x65	; 101
    22dc:	19 f4       	brne	.+6      	; 0x22e4 <_ZN25navputter_main_menu_class4pollEv+0x40>
    22de:	ce 01       	movw	r24, r28
    22e0:	71 df       	rcall	.-286    	; 0x21c4 <_ZN25navputter_main_menu_class13handle_eepromEv>
    22e2:	f2 cf       	rjmp	.-28     	; 0x22c8 <_ZN25navputter_main_menu_class4pollEv+0x24>
    22e4:	87 36       	cpi	r24, 0x67	; 103
    22e6:	19 f4       	brne	.+6      	; 0x22ee <_ZN25navputter_main_menu_class4pollEv+0x4a>
    22e8:	ce 01       	movw	r24, r28
    22ea:	81 df       	rcall	.-254    	; 0x21ee <_ZN25navputter_main_menu_class11serial_gpioEv>
    22ec:	ed cf       	rjmp	.-38     	; 0x22c8 <_ZN25navputter_main_menu_class4pollEv+0x24>
    22ee:	87 37       	cpi	r24, 0x77	; 119
    22f0:	19 f4       	brne	.+6      	; 0x22f8 <_ZN25navputter_main_menu_class4pollEv+0x54>
    22f2:	ce 01       	movw	r24, r28
    22f4:	95 df       	rcall	.-214    	; 0x2220 <_ZN25navputter_main_menu_class12write_eepromEv>
    22f6:	e8 cf       	rjmp	.-48     	; 0x22c8 <_ZN25navputter_main_menu_class4pollEv+0x24>
    22f8:	8b 36       	cpi	r24, 0x6B	; 107
    22fa:	31 f7       	brne	.-52     	; 0x22c8 <_ZN25navputter_main_menu_class4pollEv+0x24>
    22fc:	ce 01       	movw	r24, r28
    22fe:	b9 df       	rcall	.-142    	; 0x2272 <_ZN25navputter_main_menu_class14handle_keymapsEv>
    2300:	e3 cf       	rjmp	.-58     	; 0x22c8 <_ZN25navputter_main_menu_class4pollEv+0x24>
}
    2302:	df 91       	pop	r29
    2304:	cf 91       	pop	r28
    2306:	08 95       	ret

00002308 <_ZN25navputter_gpio_menu_class12gpio_in_maskEv>:
{
    2308:	fc 01       	movw	r30, r24
    GPIO_PORTS
    230a:	80 89       	ldd	r24, Z+16	; 0x10
    230c:	82 36       	cpi	r24, 0x62	; 98
    230e:	09 f5       	brne	.+66     	; 0x2352 <_ZN25navputter_gpio_menu_class12gpio_in_maskEv+0x4a>
    2310:	93 b1       	in	r25, 0x03	; 3
    2312:	85 85       	ldd	r24, Z+13	; 0x0d
    2314:	89 23       	and	r24, r25
    SERIAL.print("%x.%s",v, EOLN);
    2316:	23 e3       	ldi	r18, 0x33	; 51
    2318:	34 e0       	ldi	r19, 0x04	; 4
    231a:	3f 93       	push	r19
    231c:	2f 93       	push	r18
    231e:	1f 92       	push	r1
    2320:	8f 93       	push	r24
    2322:	82 ea       	ldi	r24, 0xA2	; 162
    2324:	96 e0       	ldi	r25, 0x06	; 6
    2326:	9f 93       	push	r25
    2328:	8f 93       	push	r24
    232a:	8a e1       	ldi	r24, 0x1A	; 26
    232c:	91 e0       	ldi	r25, 0x01	; 1
    232e:	9f 93       	push	r25
    2330:	8f 93       	push	r24
    2332:	0e 94 94 03 	call	0x728	; 0x728 <_ZN22navputter_serial_class5printEPKcz>
    SERIAL.write( OK_STR );
    2336:	8d b7       	in	r24, 0x3d	; 61
    2338:	9e b7       	in	r25, 0x3e	; 62
    233a:	08 96       	adiw	r24, 0x08	; 8
    233c:	0f b6       	in	r0, 0x3f	; 63
    233e:	f8 94       	cli
    2340:	9e bf       	out	0x3e, r25	; 62
    2342:	0f be       	out	0x3f, r0	; 63
    2344:	8d bf       	out	0x3d, r24	; 61
    2346:	66 e3       	ldi	r22, 0x36	; 54
    2348:	74 e0       	ldi	r23, 0x04	; 4
    234a:	8a e1       	ldi	r24, 0x1A	; 26
    234c:	91 e0       	ldi	r25, 0x01	; 1
    234e:	0c 94 2f 03 	jmp	0x65e	; 0x65e <_ZN16usb_serial_class5writeEPKc>
    GPIO_PORTS
    2352:	83 36       	cpi	r24, 0x63	; 99
    2354:	11 f4       	brne	.+4      	; 0x235a <_ZN25navputter_gpio_menu_class12gpio_in_maskEv+0x52>
    2356:	96 b1       	in	r25, 0x06	; 6
    2358:	dc cf       	rjmp	.-72     	; 0x2312 <_ZN25navputter_gpio_menu_class12gpio_in_maskEv+0xa>
    235a:	84 36       	cpi	r24, 0x64	; 100
    235c:	11 f4       	brne	.+4      	; 0x2362 <_ZN25navputter_gpio_menu_class12gpio_in_maskEv+0x5a>
    235e:	99 b1       	in	r25, 0x09	; 9
    2360:	d8 cf       	rjmp	.-80     	; 0x2312 <_ZN25navputter_gpio_menu_class12gpio_in_maskEv+0xa>
    uint8_t v=0;
    2362:	80 e0       	ldi	r24, 0x00	; 0
    2364:	d8 cf       	rjmp	.-80     	; 0x2316 <_ZN25navputter_gpio_menu_class12gpio_in_maskEv+0xe>

00002366 <_ZN25navputter_gpio_menu_class7gpio_inEv>:
    GPIO_PORTS
    2366:	fc 01       	movw	r30, r24
    2368:	80 89       	ldd	r24, Z+16	; 0x10
    236a:	82 36       	cpi	r24, 0x62	; 98
    236c:	f9 f4       	brne	.+62     	; 0x23ac <_ZN25navputter_gpio_menu_class7gpio_inEv+0x46>
    236e:	83 b1       	in	r24, 0x03	; 3
    SERIAL.print("%x.%s",v, EOLN);
    2370:	23 e3       	ldi	r18, 0x33	; 51
    2372:	34 e0       	ldi	r19, 0x04	; 4
    2374:	3f 93       	push	r19
    2376:	2f 93       	push	r18
    2378:	1f 92       	push	r1
    237a:	8f 93       	push	r24
    237c:	82 ea       	ldi	r24, 0xA2	; 162
    237e:	96 e0       	ldi	r25, 0x06	; 6
    2380:	9f 93       	push	r25
    2382:	8f 93       	push	r24
    2384:	8a e1       	ldi	r24, 0x1A	; 26
    2386:	91 e0       	ldi	r25, 0x01	; 1
    2388:	9f 93       	push	r25
    238a:	8f 93       	push	r24
    238c:	0e 94 94 03 	call	0x728	; 0x728 <_ZN22navputter_serial_class5printEPKcz>
    SERIAL.write( OK_STR );
    2390:	8d b7       	in	r24, 0x3d	; 61
    2392:	9e b7       	in	r25, 0x3e	; 62
    2394:	08 96       	adiw	r24, 0x08	; 8
    2396:	0f b6       	in	r0, 0x3f	; 63
    2398:	f8 94       	cli
    239a:	9e bf       	out	0x3e, r25	; 62
    239c:	0f be       	out	0x3f, r0	; 63
    239e:	8d bf       	out	0x3d, r24	; 61
    23a0:	66 e3       	ldi	r22, 0x36	; 54
    23a2:	74 e0       	ldi	r23, 0x04	; 4
    23a4:	8a e1       	ldi	r24, 0x1A	; 26
    23a6:	91 e0       	ldi	r25, 0x01	; 1
    23a8:	0c 94 2f 03 	jmp	0x65e	; 0x65e <_ZN16usb_serial_class5writeEPKc>
    GPIO_PORTS
    23ac:	83 36       	cpi	r24, 0x63	; 99
    23ae:	11 f4       	brne	.+4      	; 0x23b4 <_ZN25navputter_gpio_menu_class7gpio_inEv+0x4e>
    23b0:	86 b1       	in	r24, 0x06	; 6
    23b2:	de cf       	rjmp	.-68     	; 0x2370 <_ZN25navputter_gpio_menu_class7gpio_inEv+0xa>
    23b4:	84 36       	cpi	r24, 0x64	; 100
    23b6:	11 f4       	brne	.+4      	; 0x23bc <_ZN25navputter_gpio_menu_class7gpio_inEv+0x56>
    23b8:	89 b1       	in	r24, 0x09	; 9
    23ba:	da cf       	rjmp	.-76     	; 0x2370 <_ZN25navputter_gpio_menu_class7gpio_inEv+0xa>
    uint8_t v=0;
    23bc:	80 e0       	ldi	r24, 0x00	; 0
    23be:	d8 cf       	rjmp	.-80     	; 0x2370 <_ZN25navputter_gpio_menu_class7gpio_inEv+0xa>

000023c0 <_ZN25navputter_gpio_menu_class11gpio_in_bitEv>:
{
    23c0:	cf 93       	push	r28
    23c2:	fc 01       	movw	r30, r24
    GPIO_PORTS
    23c4:	80 89       	ldd	r24, Z+16	; 0x10
    23c6:	82 36       	cpi	r24, 0x62	; 98
    23c8:	99 f5       	brne	.+102    	; 0x2430 <_ZN25navputter_gpio_menu_class11gpio_in_bitEv+0x70>
    23ca:	23 b1       	in	r18, 0x03	; 3
    23cc:	45 85       	ldd	r20, Z+13	; 0x0d
    23ce:	81 e0       	ldi	r24, 0x01	; 1
    23d0:	90 e0       	ldi	r25, 0x00	; 0
    23d2:	04 2e       	mov	r0, r20
    23d4:	02 c0       	rjmp	.+4      	; 0x23da <_ZN25navputter_gpio_menu_class11gpio_in_bitEv+0x1a>
    23d6:	88 0f       	add	r24, r24
    23d8:	99 1f       	adc	r25, r25
    23da:	0a 94       	dec	r0
    23dc:	e2 f7       	brpl	.-8      	; 0x23d6 <_ZN25navputter_gpio_menu_class11gpio_in_bitEv+0x16>
    23de:	30 e0       	ldi	r19, 0x00	; 0
    23e0:	82 23       	and	r24, r18
    23e2:	93 23       	and	r25, r19
    23e4:	02 c0       	rjmp	.+4      	; 0x23ea <_ZN25navputter_gpio_menu_class11gpio_in_bitEv+0x2a>
    23e6:	95 95       	asr	r25
    23e8:	87 95       	ror	r24
    23ea:	4a 95       	dec	r20
    23ec:	e2 f7       	brpl	.-8      	; 0x23e6 <_ZN25navputter_gpio_menu_class11gpio_in_bitEv+0x26>
    23ee:	c8 2f       	mov	r28, r24
    SERIAL.write( OK_STR );
    23f0:	66 e3       	ldi	r22, 0x36	; 54
    23f2:	74 e0       	ldi	r23, 0x04	; 4
    23f4:	8a e1       	ldi	r24, 0x1A	; 26
    23f6:	91 e0       	ldi	r25, 0x01	; 1
    23f8:	0e 94 2f 03 	call	0x65e	; 0x65e <_ZN16usb_serial_class5writeEPKc>
    SERIAL.print("%x.%s",v, EOLN);
    23fc:	83 e3       	ldi	r24, 0x33	; 51
    23fe:	94 e0       	ldi	r25, 0x04	; 4
    2400:	9f 93       	push	r25
    2402:	8f 93       	push	r24
    2404:	1f 92       	push	r1
    2406:	cf 93       	push	r28
    2408:	82 ea       	ldi	r24, 0xA2	; 162
    240a:	96 e0       	ldi	r25, 0x06	; 6
    240c:	9f 93       	push	r25
    240e:	8f 93       	push	r24
    2410:	8a e1       	ldi	r24, 0x1A	; 26
    2412:	91 e0       	ldi	r25, 0x01	; 1
    2414:	9f 93       	push	r25
    2416:	8f 93       	push	r24
    2418:	0e 94 94 03 	call	0x728	; 0x728 <_ZN22navputter_serial_class5printEPKcz>
}    
    241c:	8d b7       	in	r24, 0x3d	; 61
    241e:	9e b7       	in	r25, 0x3e	; 62
    2420:	08 96       	adiw	r24, 0x08	; 8
    2422:	0f b6       	in	r0, 0x3f	; 63
    2424:	f8 94       	cli
    2426:	9e bf       	out	0x3e, r25	; 62
    2428:	0f be       	out	0x3f, r0	; 63
    242a:	8d bf       	out	0x3d, r24	; 61
    242c:	cf 91       	pop	r28
    242e:	08 95       	ret
    GPIO_PORTS
    2430:	83 36       	cpi	r24, 0x63	; 99
    2432:	11 f4       	brne	.+4      	; 0x2438 <_ZN25navputter_gpio_menu_class11gpio_in_bitEv+0x78>
    2434:	26 b1       	in	r18, 0x06	; 6
    2436:	ca cf       	rjmp	.-108    	; 0x23cc <_ZN25navputter_gpio_menu_class11gpio_in_bitEv+0xc>
    uint8_t v=0;
    2438:	c0 e0       	ldi	r28, 0x00	; 0
    GPIO_PORTS
    243a:	84 36       	cpi	r24, 0x64	; 100
    243c:	c9 f6       	brne	.-78     	; 0x23f0 <_ZN25navputter_gpio_menu_class11gpio_in_bitEv+0x30>
    243e:	29 b1       	in	r18, 0x09	; 9
    2440:	c5 cf       	rjmp	.-118    	; 0x23cc <_ZN25navputter_gpio_menu_class11gpio_in_bitEv+0xc>

00002442 <_ZN25navputter_gpio_menu_class8gpio_xorEv>:
{
    2442:	cf 93       	push	r28
    2444:	df 93       	push	r29
    2446:	ec 01       	movw	r28, r24
    GPIO_PORTS
    2448:	88 89       	ldd	r24, Y+16	; 0x10
    244a:	82 36       	cpi	r24, 0x62	; 98
    244c:	51 f4       	brne	.+20     	; 0x2462 <_ZN25navputter_gpio_menu_class8gpio_xorEv+0x20>
    244e:	85 b1       	in	r24, 0x05	; 5
    2450:	91 e0       	ldi	r25, 0x01	; 1
    2452:	89 27       	eor	r24, r25
    2454:	85 b9       	out	0x05, r24	; 5
    2456:	66 e3       	ldi	r22, 0x36	; 54
    2458:	74 e0       	ldi	r23, 0x04	; 4
    245a:	8a e1       	ldi	r24, 0x1A	; 26
    245c:	91 e0       	ldi	r25, 0x01	; 1
    245e:	0e 94 2f 03 	call	0x65e	; 0x65e <_ZN16usb_serial_class5writeEPKc>
    2462:	88 89       	ldd	r24, Y+16	; 0x10
    2464:	83 36       	cpi	r24, 0x63	; 99
    2466:	51 f4       	brne	.+20     	; 0x247c <_ZN25navputter_gpio_menu_class8gpio_xorEv+0x3a>
    2468:	88 b1       	in	r24, 0x08	; 8
    246a:	91 e0       	ldi	r25, 0x01	; 1
    246c:	89 27       	eor	r24, r25
    246e:	88 b9       	out	0x08, r24	; 8
    2470:	66 e3       	ldi	r22, 0x36	; 54
    2472:	74 e0       	ldi	r23, 0x04	; 4
    2474:	8a e1       	ldi	r24, 0x1A	; 26
    2476:	91 e0       	ldi	r25, 0x01	; 1
    2478:	0e 94 2f 03 	call	0x65e	; 0x65e <_ZN16usb_serial_class5writeEPKc>
    247c:	88 89       	ldd	r24, Y+16	; 0x10
    247e:	84 36       	cpi	r24, 0x64	; 100
    2480:	61 f4       	brne	.+24     	; 0x249a <_ZN25navputter_gpio_menu_class8gpio_xorEv+0x58>
    2482:	8b b1       	in	r24, 0x0b	; 11
    2484:	91 e0       	ldi	r25, 0x01	; 1
    2486:	89 27       	eor	r24, r25
    2488:	8b b9       	out	0x0b, r24	; 11
    248a:	66 e3       	ldi	r22, 0x36	; 54
    248c:	74 e0       	ldi	r23, 0x04	; 4
    248e:	8a e1       	ldi	r24, 0x1A	; 26
    2490:	91 e0       	ldi	r25, 0x01	; 1
}
    2492:	df 91       	pop	r29
    2494:	cf 91       	pop	r28
    GPIO_PORTS
    2496:	0c 94 2f 03 	jmp	0x65e	; 0x65e <_ZN16usb_serial_class5writeEPKc>
}
    249a:	df 91       	pop	r29
    249c:	cf 91       	pop	r28
    249e:	08 95       	ret

000024a0 <_ZN25navputter_gpio_menu_class8gpio_ddrEv>:
{
    24a0:	cf 93       	push	r28
    24a2:	df 93       	push	r29
    24a4:	ec 01       	movw	r28, r24
    GPIO_PORTS
    24a6:	88 89       	ldd	r24, Y+16	; 0x10
    24a8:	82 36       	cpi	r24, 0x62	; 98
    24aa:	41 f4       	brne	.+16     	; 0x24bc <_ZN25navputter_gpio_menu_class8gpio_ddrEv+0x1c>
    24ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    24ae:	84 b9       	out	0x04, r24	; 4
    24b0:	66 e3       	ldi	r22, 0x36	; 54
    24b2:	74 e0       	ldi	r23, 0x04	; 4
    24b4:	8a e1       	ldi	r24, 0x1A	; 26
    24b6:	91 e0       	ldi	r25, 0x01	; 1
    24b8:	0e 94 2f 03 	call	0x65e	; 0x65e <_ZN16usb_serial_class5writeEPKc>
    24bc:	88 89       	ldd	r24, Y+16	; 0x10
    24be:	83 36       	cpi	r24, 0x63	; 99
    24c0:	41 f4       	brne	.+16     	; 0x24d2 <_ZN25navputter_gpio_menu_class8gpio_ddrEv+0x32>
    24c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    24c4:	87 b9       	out	0x07, r24	; 7
    24c6:	66 e3       	ldi	r22, 0x36	; 54
    24c8:	74 e0       	ldi	r23, 0x04	; 4
    24ca:	8a e1       	ldi	r24, 0x1A	; 26
    24cc:	91 e0       	ldi	r25, 0x01	; 1
    24ce:	0e 94 2f 03 	call	0x65e	; 0x65e <_ZN16usb_serial_class5writeEPKc>
    24d2:	88 89       	ldd	r24, Y+16	; 0x10
    24d4:	84 36       	cpi	r24, 0x64	; 100
    24d6:	51 f4       	brne	.+20     	; 0x24ec <_ZN25navputter_gpio_menu_class8gpio_ddrEv+0x4c>
    24d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    24da:	8a b9       	out	0x0a, r24	; 10
    24dc:	66 e3       	ldi	r22, 0x36	; 54
    24de:	74 e0       	ldi	r23, 0x04	; 4
    24e0:	8a e1       	ldi	r24, 0x1A	; 26
    24e2:	91 e0       	ldi	r25, 0x01	; 1
}
    24e4:	df 91       	pop	r29
    24e6:	cf 91       	pop	r28
    GPIO_PORTS
    24e8:	0c 94 2f 03 	jmp	0x65e	; 0x65e <_ZN16usb_serial_class5writeEPKc>
}
    24ec:	df 91       	pop	r29
    24ee:	cf 91       	pop	r28
    24f0:	08 95       	ret

000024f2 <_ZN25navputter_gpio_menu_class16gpio_set_ddr_bitEv>:
{
    24f2:	cf 93       	push	r28
    24f4:	df 93       	push	r29
    24f6:	ec 01       	movw	r28, r24
    GPIO_PORTS
    24f8:	88 89       	ldd	r24, Y+16	; 0x10
    24fa:	82 36       	cpi	r24, 0x62	; 98
    24fc:	81 f4       	brne	.+32     	; 0x251e <_ZN25navputter_gpio_menu_class16gpio_set_ddr_bitEv+0x2c>
    24fe:	84 b1       	in	r24, 0x04	; 4
    2500:	9d 85       	ldd	r25, Y+13	; 0x0d
    2502:	21 e0       	ldi	r18, 0x01	; 1
    2504:	30 e0       	ldi	r19, 0x00	; 0
    2506:	01 c0       	rjmp	.+2      	; 0x250a <_ZN25navputter_gpio_menu_class16gpio_set_ddr_bitEv+0x18>
    2508:	22 0f       	add	r18, r18
    250a:	9a 95       	dec	r25
    250c:	ea f7       	brpl	.-6      	; 0x2508 <_ZN25navputter_gpio_menu_class16gpio_set_ddr_bitEv+0x16>
    250e:	82 2b       	or	r24, r18
    2510:	84 b9       	out	0x04, r24	; 4
    2512:	66 e3       	ldi	r22, 0x36	; 54
    2514:	74 e0       	ldi	r23, 0x04	; 4
    2516:	8a e1       	ldi	r24, 0x1A	; 26
    2518:	91 e0       	ldi	r25, 0x01	; 1
    251a:	0e 94 2f 03 	call	0x65e	; 0x65e <_ZN16usb_serial_class5writeEPKc>
    251e:	88 89       	ldd	r24, Y+16	; 0x10
    2520:	83 36       	cpi	r24, 0x63	; 99
    2522:	81 f4       	brne	.+32     	; 0x2544 <_ZN25navputter_gpio_menu_class16gpio_set_ddr_bitEv+0x52>
    2524:	87 b1       	in	r24, 0x07	; 7
    2526:	9d 85       	ldd	r25, Y+13	; 0x0d
    2528:	21 e0       	ldi	r18, 0x01	; 1
    252a:	30 e0       	ldi	r19, 0x00	; 0
    252c:	01 c0       	rjmp	.+2      	; 0x2530 <_ZN25navputter_gpio_menu_class16gpio_set_ddr_bitEv+0x3e>
    252e:	22 0f       	add	r18, r18
    2530:	9a 95       	dec	r25
    2532:	ea f7       	brpl	.-6      	; 0x252e <_ZN25navputter_gpio_menu_class16gpio_set_ddr_bitEv+0x3c>
    2534:	82 2b       	or	r24, r18
    2536:	87 b9       	out	0x07, r24	; 7
    2538:	66 e3       	ldi	r22, 0x36	; 54
    253a:	74 e0       	ldi	r23, 0x04	; 4
    253c:	8a e1       	ldi	r24, 0x1A	; 26
    253e:	91 e0       	ldi	r25, 0x01	; 1
    2540:	0e 94 2f 03 	call	0x65e	; 0x65e <_ZN16usb_serial_class5writeEPKc>
    2544:	88 89       	ldd	r24, Y+16	; 0x10
    2546:	84 36       	cpi	r24, 0x64	; 100
    2548:	91 f4       	brne	.+36     	; 0x256e <_ZN25navputter_gpio_menu_class16gpio_set_ddr_bitEv+0x7c>
    254a:	8a b1       	in	r24, 0x0a	; 10
    254c:	9d 85       	ldd	r25, Y+13	; 0x0d
    254e:	21 e0       	ldi	r18, 0x01	; 1
    2550:	30 e0       	ldi	r19, 0x00	; 0
    2552:	01 c0       	rjmp	.+2      	; 0x2556 <_ZN25navputter_gpio_menu_class16gpio_set_ddr_bitEv+0x64>
    2554:	22 0f       	add	r18, r18
    2556:	9a 95       	dec	r25
    2558:	ea f7       	brpl	.-6      	; 0x2554 <_ZN25navputter_gpio_menu_class16gpio_set_ddr_bitEv+0x62>
    255a:	82 2b       	or	r24, r18
    255c:	8a b9       	out	0x0a, r24	; 10
    255e:	66 e3       	ldi	r22, 0x36	; 54
    2560:	74 e0       	ldi	r23, 0x04	; 4
    2562:	8a e1       	ldi	r24, 0x1A	; 26
    2564:	91 e0       	ldi	r25, 0x01	; 1
}
    2566:	df 91       	pop	r29
    2568:	cf 91       	pop	r28
    GPIO_PORTS
    256a:	0c 94 2f 03 	jmp	0x65e	; 0x65e <_ZN16usb_serial_class5writeEPKc>
}
    256e:	df 91       	pop	r29
    2570:	cf 91       	pop	r28
    2572:	08 95       	ret

00002574 <_ZN25navputter_gpio_menu_class18gpio_clear_ddr_bitEv>:
{
    2574:	cf 93       	push	r28
    2576:	df 93       	push	r29
    2578:	ec 01       	movw	r28, r24
    GPIO_PORTS
    257a:	88 89       	ldd	r24, Y+16	; 0x10
    257c:	82 36       	cpi	r24, 0x62	; 98
    257e:	89 f4       	brne	.+34     	; 0x25a2 <_ZN25navputter_gpio_menu_class18gpio_clear_ddr_bitEv+0x2e>
    2580:	24 b1       	in	r18, 0x04	; 4
    2582:	3d 85       	ldd	r19, Y+13	; 0x0d
    2584:	81 e0       	ldi	r24, 0x01	; 1
    2586:	90 e0       	ldi	r25, 0x00	; 0
    2588:	01 c0       	rjmp	.+2      	; 0x258c <_ZN25navputter_gpio_menu_class18gpio_clear_ddr_bitEv+0x18>
    258a:	88 0f       	add	r24, r24
    258c:	3a 95       	dec	r19
    258e:	ea f7       	brpl	.-6      	; 0x258a <_ZN25navputter_gpio_menu_class18gpio_clear_ddr_bitEv+0x16>
    2590:	80 95       	com	r24
    2592:	82 23       	and	r24, r18
    2594:	84 b9       	out	0x04, r24	; 4
    2596:	66 e3       	ldi	r22, 0x36	; 54
    2598:	74 e0       	ldi	r23, 0x04	; 4
    259a:	8a e1       	ldi	r24, 0x1A	; 26
    259c:	91 e0       	ldi	r25, 0x01	; 1
    259e:	0e 94 2f 03 	call	0x65e	; 0x65e <_ZN16usb_serial_class5writeEPKc>
    25a2:	88 89       	ldd	r24, Y+16	; 0x10
    25a4:	83 36       	cpi	r24, 0x63	; 99
    25a6:	89 f4       	brne	.+34     	; 0x25ca <_ZN25navputter_gpio_menu_class18gpio_clear_ddr_bitEv+0x56>
    25a8:	27 b1       	in	r18, 0x07	; 7
    25aa:	3d 85       	ldd	r19, Y+13	; 0x0d
    25ac:	81 e0       	ldi	r24, 0x01	; 1
    25ae:	90 e0       	ldi	r25, 0x00	; 0
    25b0:	01 c0       	rjmp	.+2      	; 0x25b4 <_ZN25navputter_gpio_menu_class18gpio_clear_ddr_bitEv+0x40>
    25b2:	88 0f       	add	r24, r24
    25b4:	3a 95       	dec	r19
    25b6:	ea f7       	brpl	.-6      	; 0x25b2 <_ZN25navputter_gpio_menu_class18gpio_clear_ddr_bitEv+0x3e>
    25b8:	80 95       	com	r24
    25ba:	82 23       	and	r24, r18
    25bc:	87 b9       	out	0x07, r24	; 7
    25be:	66 e3       	ldi	r22, 0x36	; 54
    25c0:	74 e0       	ldi	r23, 0x04	; 4
    25c2:	8a e1       	ldi	r24, 0x1A	; 26
    25c4:	91 e0       	ldi	r25, 0x01	; 1
    25c6:	0e 94 2f 03 	call	0x65e	; 0x65e <_ZN16usb_serial_class5writeEPKc>
    25ca:	88 89       	ldd	r24, Y+16	; 0x10
    25cc:	84 36       	cpi	r24, 0x64	; 100
    25ce:	99 f4       	brne	.+38     	; 0x25f6 <_ZN25navputter_gpio_menu_class18gpio_clear_ddr_bitEv+0x82>
    25d0:	2a b1       	in	r18, 0x0a	; 10
    25d2:	3d 85       	ldd	r19, Y+13	; 0x0d
    25d4:	81 e0       	ldi	r24, 0x01	; 1
    25d6:	90 e0       	ldi	r25, 0x00	; 0
    25d8:	01 c0       	rjmp	.+2      	; 0x25dc <_ZN25navputter_gpio_menu_class18gpio_clear_ddr_bitEv+0x68>
    25da:	88 0f       	add	r24, r24
    25dc:	3a 95       	dec	r19
    25de:	ea f7       	brpl	.-6      	; 0x25da <_ZN25navputter_gpio_menu_class18gpio_clear_ddr_bitEv+0x66>
    25e0:	80 95       	com	r24
    25e2:	82 23       	and	r24, r18
    25e4:	8a b9       	out	0x0a, r24	; 10
    25e6:	66 e3       	ldi	r22, 0x36	; 54
    25e8:	74 e0       	ldi	r23, 0x04	; 4
    25ea:	8a e1       	ldi	r24, 0x1A	; 26
    25ec:	91 e0       	ldi	r25, 0x01	; 1
}
    25ee:	df 91       	pop	r29
    25f0:	cf 91       	pop	r28
    GPIO_PORTS
    25f2:	0c 94 2f 03 	jmp	0x65e	; 0x65e <_ZN16usb_serial_class5writeEPKc>
}
    25f6:	df 91       	pop	r29
    25f8:	cf 91       	pop	r28
    25fa:	08 95       	ret

000025fc <_ZN25navputter_gpio_menu_class14gpio_clear_bitEv>:
{
    25fc:	cf 93       	push	r28
    25fe:	df 93       	push	r29
    2600:	ec 01       	movw	r28, r24
    GPIO_PORTS
    2602:	88 89       	ldd	r24, Y+16	; 0x10
    2604:	82 36       	cpi	r24, 0x62	; 98
    2606:	c9 f4       	brne	.+50     	; 0x263a <_ZN25navputter_gpio_menu_class14gpio_clear_bitEv+0x3e>
    2608:	25 b1       	in	r18, 0x05	; 5
    260a:	3d 85       	ldd	r19, Y+13	; 0x0d
    260c:	81 e0       	ldi	r24, 0x01	; 1
    260e:	90 e0       	ldi	r25, 0x00	; 0
    2610:	01 c0       	rjmp	.+2      	; 0x2614 <_ZN25navputter_gpio_menu_class14gpio_clear_bitEv+0x18>
    2612:	88 0f       	add	r24, r24
    2614:	3a 95       	dec	r19
    2616:	ea f7       	brpl	.-6      	; 0x2612 <_ZN25navputter_gpio_menu_class14gpio_clear_bitEv+0x16>
    2618:	80 95       	com	r24
    261a:	82 23       	and	r24, r18
    261c:	85 b9       	out	0x05, r24	; 5
    261e:	86 e3       	ldi	r24, 0x36	; 54
    2620:	94 e0       	ldi	r25, 0x04	; 4
    2622:	9f 93       	push	r25
    2624:	8f 93       	push	r24
    2626:	8a e1       	ldi	r24, 0x1A	; 26
    2628:	91 e0       	ldi	r25, 0x01	; 1
    262a:	9f 93       	push	r25
    262c:	8f 93       	push	r24
    262e:	0e 94 94 03 	call	0x728	; 0x728 <_ZN22navputter_serial_class5printEPKcz>
    2632:	0f 90       	pop	r0
    2634:	0f 90       	pop	r0
    2636:	0f 90       	pop	r0
    2638:	0f 90       	pop	r0
    263a:	88 89       	ldd	r24, Y+16	; 0x10
    263c:	83 36       	cpi	r24, 0x63	; 99
    263e:	c9 f4       	brne	.+50     	; 0x2672 <_ZN25navputter_gpio_menu_class14gpio_clear_bitEv+0x76>
    2640:	28 b1       	in	r18, 0x08	; 8
    2642:	3d 85       	ldd	r19, Y+13	; 0x0d
    2644:	81 e0       	ldi	r24, 0x01	; 1
    2646:	90 e0       	ldi	r25, 0x00	; 0
    2648:	01 c0       	rjmp	.+2      	; 0x264c <_ZN25navputter_gpio_menu_class14gpio_clear_bitEv+0x50>
    264a:	88 0f       	add	r24, r24
    264c:	3a 95       	dec	r19
    264e:	ea f7       	brpl	.-6      	; 0x264a <_ZN25navputter_gpio_menu_class14gpio_clear_bitEv+0x4e>
    2650:	80 95       	com	r24
    2652:	82 23       	and	r24, r18
    2654:	88 b9       	out	0x08, r24	; 8
    2656:	86 e3       	ldi	r24, 0x36	; 54
    2658:	94 e0       	ldi	r25, 0x04	; 4
    265a:	9f 93       	push	r25
    265c:	8f 93       	push	r24
    265e:	8a e1       	ldi	r24, 0x1A	; 26
    2660:	91 e0       	ldi	r25, 0x01	; 1
    2662:	9f 93       	push	r25
    2664:	8f 93       	push	r24
    2666:	0e 94 94 03 	call	0x728	; 0x728 <_ZN22navputter_serial_class5printEPKcz>
    266a:	0f 90       	pop	r0
    266c:	0f 90       	pop	r0
    266e:	0f 90       	pop	r0
    2670:	0f 90       	pop	r0
    2672:	88 89       	ldd	r24, Y+16	; 0x10
    2674:	84 36       	cpi	r24, 0x64	; 100
    2676:	c9 f4       	brne	.+50     	; 0x26aa <_ZN25navputter_gpio_menu_class14gpio_clear_bitEv+0xae>
    2678:	2b b1       	in	r18, 0x0b	; 11
    267a:	3d 85       	ldd	r19, Y+13	; 0x0d
    267c:	81 e0       	ldi	r24, 0x01	; 1
    267e:	90 e0       	ldi	r25, 0x00	; 0
    2680:	01 c0       	rjmp	.+2      	; 0x2684 <_ZN25navputter_gpio_menu_class14gpio_clear_bitEv+0x88>
    2682:	88 0f       	add	r24, r24
    2684:	3a 95       	dec	r19
    2686:	ea f7       	brpl	.-6      	; 0x2682 <_ZN25navputter_gpio_menu_class14gpio_clear_bitEv+0x86>
    2688:	80 95       	com	r24
    268a:	82 23       	and	r24, r18
    268c:	8b b9       	out	0x0b, r24	; 11
    268e:	86 e3       	ldi	r24, 0x36	; 54
    2690:	94 e0       	ldi	r25, 0x04	; 4
    2692:	9f 93       	push	r25
    2694:	8f 93       	push	r24
    2696:	8a e1       	ldi	r24, 0x1A	; 26
    2698:	91 e0       	ldi	r25, 0x01	; 1
    269a:	9f 93       	push	r25
    269c:	8f 93       	push	r24
    269e:	0e 94 94 03 	call	0x728	; 0x728 <_ZN22navputter_serial_class5printEPKcz>
    26a2:	0f 90       	pop	r0
    26a4:	0f 90       	pop	r0
    26a6:	0f 90       	pop	r0
    26a8:	0f 90       	pop	r0
}
    26aa:	df 91       	pop	r29
    26ac:	cf 91       	pop	r28
    26ae:	08 95       	ret

000026b0 <_ZN25navputter_gpio_menu_class12gpio_set_bitEv>:
{
    26b0:	cf 93       	push	r28
    26b2:	df 93       	push	r29
    26b4:	ec 01       	movw	r28, r24
    GPIO_PORTS
    26b6:	88 89       	ldd	r24, Y+16	; 0x10
    26b8:	82 36       	cpi	r24, 0x62	; 98
    26ba:	71 f4       	brne	.+28     	; 0x26d8 <_ZN25navputter_gpio_menu_class12gpio_set_bitEv+0x28>
    26bc:	2d 85       	ldd	r18, Y+13	; 0x0d
    26be:	81 e0       	ldi	r24, 0x01	; 1
    26c0:	90 e0       	ldi	r25, 0x00	; 0
    26c2:	01 c0       	rjmp	.+2      	; 0x26c6 <_ZN25navputter_gpio_menu_class12gpio_set_bitEv+0x16>
    26c4:	88 0f       	add	r24, r24
    26c6:	2a 95       	dec	r18
    26c8:	ea f7       	brpl	.-6      	; 0x26c4 <_ZN25navputter_gpio_menu_class12gpio_set_bitEv+0x14>
    26ca:	85 b9       	out	0x05, r24	; 5
    26cc:	66 e3       	ldi	r22, 0x36	; 54
    26ce:	74 e0       	ldi	r23, 0x04	; 4
    26d0:	8a e1       	ldi	r24, 0x1A	; 26
    26d2:	91 e0       	ldi	r25, 0x01	; 1
    26d4:	0e 94 2f 03 	call	0x65e	; 0x65e <_ZN16usb_serial_class5writeEPKc>
    26d8:	88 89       	ldd	r24, Y+16	; 0x10
    26da:	83 36       	cpi	r24, 0x63	; 99
    26dc:	71 f4       	brne	.+28     	; 0x26fa <_ZN25navputter_gpio_menu_class12gpio_set_bitEv+0x4a>
    26de:	2d 85       	ldd	r18, Y+13	; 0x0d
    26e0:	81 e0       	ldi	r24, 0x01	; 1
    26e2:	90 e0       	ldi	r25, 0x00	; 0
    26e4:	01 c0       	rjmp	.+2      	; 0x26e8 <_ZN25navputter_gpio_menu_class12gpio_set_bitEv+0x38>
    26e6:	88 0f       	add	r24, r24
    26e8:	2a 95       	dec	r18
    26ea:	ea f7       	brpl	.-6      	; 0x26e6 <_ZN25navputter_gpio_menu_class12gpio_set_bitEv+0x36>
    26ec:	88 b9       	out	0x08, r24	; 8
    26ee:	66 e3       	ldi	r22, 0x36	; 54
    26f0:	74 e0       	ldi	r23, 0x04	; 4
    26f2:	8a e1       	ldi	r24, 0x1A	; 26
    26f4:	91 e0       	ldi	r25, 0x01	; 1
    26f6:	0e 94 2f 03 	call	0x65e	; 0x65e <_ZN16usb_serial_class5writeEPKc>
    26fa:	88 89       	ldd	r24, Y+16	; 0x10
    26fc:	84 36       	cpi	r24, 0x64	; 100
    26fe:	81 f4       	brne	.+32     	; 0x2720 <_ZN25navputter_gpio_menu_class12gpio_set_bitEv+0x70>
    2700:	2d 85       	ldd	r18, Y+13	; 0x0d
    2702:	81 e0       	ldi	r24, 0x01	; 1
    2704:	90 e0       	ldi	r25, 0x00	; 0
    2706:	01 c0       	rjmp	.+2      	; 0x270a <_ZN25navputter_gpio_menu_class12gpio_set_bitEv+0x5a>
    2708:	88 0f       	add	r24, r24
    270a:	2a 95       	dec	r18
    270c:	ea f7       	brpl	.-6      	; 0x2708 <_ZN25navputter_gpio_menu_class12gpio_set_bitEv+0x58>
    270e:	8b b9       	out	0x0b, r24	; 11
    2710:	66 e3       	ldi	r22, 0x36	; 54
    2712:	74 e0       	ldi	r23, 0x04	; 4
    2714:	8a e1       	ldi	r24, 0x1A	; 26
    2716:	91 e0       	ldi	r25, 0x01	; 1
}
    2718:	df 91       	pop	r29
    271a:	cf 91       	pop	r28
    GPIO_PORTS
    271c:	0c 94 2f 03 	jmp	0x65e	; 0x65e <_ZN16usb_serial_class5writeEPKc>
}
    2720:	df 91       	pop	r29
    2722:	cf 91       	pop	r28
    2724:	08 95       	ret

00002726 <_ZN25navputter_gpio_menu_class8gpio_andEv>:
{
    2726:	cf 93       	push	r28
    2728:	df 93       	push	r29
    272a:	ec 01       	movw	r28, r24
    GPIO_PORTS
    272c:	88 89       	ldd	r24, Y+16	; 0x10
    272e:	82 36       	cpi	r24, 0x62	; 98
    2730:	51 f4       	brne	.+20     	; 0x2746 <_ZN25navputter_gpio_menu_class8gpio_andEv+0x20>
    2732:	85 b1       	in	r24, 0x05	; 5
    2734:	9d 85       	ldd	r25, Y+13	; 0x0d
    2736:	89 23       	and	r24, r25
    2738:	85 b9       	out	0x05, r24	; 5
    273a:	66 e3       	ldi	r22, 0x36	; 54
    273c:	74 e0       	ldi	r23, 0x04	; 4
    273e:	8a e1       	ldi	r24, 0x1A	; 26
    2740:	91 e0       	ldi	r25, 0x01	; 1
    2742:	0e 94 2f 03 	call	0x65e	; 0x65e <_ZN16usb_serial_class5writeEPKc>
    2746:	88 89       	ldd	r24, Y+16	; 0x10
    2748:	83 36       	cpi	r24, 0x63	; 99
    274a:	51 f4       	brne	.+20     	; 0x2760 <_ZN25navputter_gpio_menu_class8gpio_andEv+0x3a>
    274c:	88 b1       	in	r24, 0x08	; 8
    274e:	9d 85       	ldd	r25, Y+13	; 0x0d
    2750:	89 23       	and	r24, r25
    2752:	88 b9       	out	0x08, r24	; 8
    2754:	66 e3       	ldi	r22, 0x36	; 54
    2756:	74 e0       	ldi	r23, 0x04	; 4
    2758:	8a e1       	ldi	r24, 0x1A	; 26
    275a:	91 e0       	ldi	r25, 0x01	; 1
    275c:	0e 94 2f 03 	call	0x65e	; 0x65e <_ZN16usb_serial_class5writeEPKc>
    2760:	88 89       	ldd	r24, Y+16	; 0x10
    2762:	84 36       	cpi	r24, 0x64	; 100
    2764:	61 f4       	brne	.+24     	; 0x277e <_ZN25navputter_gpio_menu_class8gpio_andEv+0x58>
    2766:	8b b1       	in	r24, 0x0b	; 11
    2768:	9d 85       	ldd	r25, Y+13	; 0x0d
    276a:	89 23       	and	r24, r25
    276c:	8b b9       	out	0x0b, r24	; 11
    276e:	66 e3       	ldi	r22, 0x36	; 54
    2770:	74 e0       	ldi	r23, 0x04	; 4
    2772:	8a e1       	ldi	r24, 0x1A	; 26
    2774:	91 e0       	ldi	r25, 0x01	; 1
}
    2776:	df 91       	pop	r29
    2778:	cf 91       	pop	r28
    GPIO_PORTS
    277a:	0c 94 2f 03 	jmp	0x65e	; 0x65e <_ZN16usb_serial_class5writeEPKc>
}
    277e:	df 91       	pop	r29
    2780:	cf 91       	pop	r28
    2782:	08 95       	ret

00002784 <_ZN25navputter_gpio_menu_class7gpio_orEv>:
{
    2784:	cf 93       	push	r28
    2786:	df 93       	push	r29
    2788:	ec 01       	movw	r28, r24
    GPIO_PORTS
    278a:	88 89       	ldd	r24, Y+16	; 0x10
    278c:	82 36       	cpi	r24, 0x62	; 98
    278e:	51 f4       	brne	.+20     	; 0x27a4 <_ZN25navputter_gpio_menu_class7gpio_orEv+0x20>
    2790:	85 b1       	in	r24, 0x05	; 5
    2792:	9d 85       	ldd	r25, Y+13	; 0x0d
    2794:	89 2b       	or	r24, r25
    2796:	85 b9       	out	0x05, r24	; 5
    2798:	66 e3       	ldi	r22, 0x36	; 54
    279a:	74 e0       	ldi	r23, 0x04	; 4
    279c:	8a e1       	ldi	r24, 0x1A	; 26
    279e:	91 e0       	ldi	r25, 0x01	; 1
    27a0:	0e 94 2f 03 	call	0x65e	; 0x65e <_ZN16usb_serial_class5writeEPKc>
    27a4:	88 89       	ldd	r24, Y+16	; 0x10
    27a6:	83 36       	cpi	r24, 0x63	; 99
    27a8:	51 f4       	brne	.+20     	; 0x27be <_ZN25navputter_gpio_menu_class7gpio_orEv+0x3a>
    27aa:	88 b1       	in	r24, 0x08	; 8
    27ac:	9d 85       	ldd	r25, Y+13	; 0x0d
    27ae:	89 2b       	or	r24, r25
    27b0:	88 b9       	out	0x08, r24	; 8
    27b2:	66 e3       	ldi	r22, 0x36	; 54
    27b4:	74 e0       	ldi	r23, 0x04	; 4
    27b6:	8a e1       	ldi	r24, 0x1A	; 26
    27b8:	91 e0       	ldi	r25, 0x01	; 1
    27ba:	0e 94 2f 03 	call	0x65e	; 0x65e <_ZN16usb_serial_class5writeEPKc>
    27be:	88 89       	ldd	r24, Y+16	; 0x10
    27c0:	84 36       	cpi	r24, 0x64	; 100
    27c2:	61 f4       	brne	.+24     	; 0x27dc <_ZN25navputter_gpio_menu_class7gpio_orEv+0x58>
    27c4:	8b b1       	in	r24, 0x0b	; 11
    27c6:	9d 85       	ldd	r25, Y+13	; 0x0d
    27c8:	89 2b       	or	r24, r25
    27ca:	8b b9       	out	0x0b, r24	; 11
    27cc:	66 e3       	ldi	r22, 0x36	; 54
    27ce:	74 e0       	ldi	r23, 0x04	; 4
    27d0:	8a e1       	ldi	r24, 0x1A	; 26
    27d2:	91 e0       	ldi	r25, 0x01	; 1
}
    27d4:	df 91       	pop	r29
    27d6:	cf 91       	pop	r28
    GPIO_PORTS
    27d8:	0c 94 2f 03 	jmp	0x65e	; 0x65e <_ZN16usb_serial_class5writeEPKc>
}
    27dc:	df 91       	pop	r29
    27de:	cf 91       	pop	r28
    27e0:	08 95       	ret

000027e2 <_ZN25navputter_gpio_menu_class8gpio_outEv>:
{
    27e2:	cf 93       	push	r28
    27e4:	df 93       	push	r29
    27e6:	ec 01       	movw	r28, r24
    GPIO_PORTS
    27e8:	88 89       	ldd	r24, Y+16	; 0x10
    27ea:	82 36       	cpi	r24, 0x62	; 98
    27ec:	41 f4       	brne	.+16     	; 0x27fe <_ZN25navputter_gpio_menu_class8gpio_outEv+0x1c>
    27ee:	66 e3       	ldi	r22, 0x36	; 54
    27f0:	74 e0       	ldi	r23, 0x04	; 4
    27f2:	8a e1       	ldi	r24, 0x1A	; 26
    27f4:	91 e0       	ldi	r25, 0x01	; 1
    27f6:	0e 94 2f 03 	call	0x65e	; 0x65e <_ZN16usb_serial_class5writeEPKc>
    27fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    27fc:	85 b9       	out	0x05, r24	; 5
    27fe:	88 89       	ldd	r24, Y+16	; 0x10
    2800:	83 36       	cpi	r24, 0x63	; 99
    2802:	41 f4       	brne	.+16     	; 0x2814 <_ZN25navputter_gpio_menu_class8gpio_outEv+0x32>
    2804:	66 e3       	ldi	r22, 0x36	; 54
    2806:	74 e0       	ldi	r23, 0x04	; 4
    2808:	8a e1       	ldi	r24, 0x1A	; 26
    280a:	91 e0       	ldi	r25, 0x01	; 1
    280c:	0e 94 2f 03 	call	0x65e	; 0x65e <_ZN16usb_serial_class5writeEPKc>
    2810:	8d 85       	ldd	r24, Y+13	; 0x0d
    2812:	88 b9       	out	0x08, r24	; 8
    2814:	88 89       	ldd	r24, Y+16	; 0x10
    2816:	84 36       	cpi	r24, 0x64	; 100
    2818:	41 f4       	brne	.+16     	; 0x282a <_ZN25navputter_gpio_menu_class8gpio_outEv+0x48>
    281a:	66 e3       	ldi	r22, 0x36	; 54
    281c:	74 e0       	ldi	r23, 0x04	; 4
    281e:	8a e1       	ldi	r24, 0x1A	; 26
    2820:	91 e0       	ldi	r25, 0x01	; 1
    2822:	0e 94 2f 03 	call	0x65e	; 0x65e <_ZN16usb_serial_class5writeEPKc>
    2826:	8d 85       	ldd	r24, Y+13	; 0x0d
    2828:	8b b9       	out	0x0b, r24	; 11
}
    282a:	df 91       	pop	r29
    282c:	cf 91       	pop	r28
    282e:	08 95       	ret

00002830 <_ZN25navputter_gpio_menu_class13gpio_read_a2dEv>:
    ADMUX = (1<<REFS0);
    2830:	20 e4       	ldi	r18, 0x40	; 64
    2832:	20 93 7c 00 	sts	0x007C, r18	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
    2836:	27 e8       	ldi	r18, 0x87	; 135
    2838:	20 93 7a 00 	sts	0x007A, r18	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    ADMUX = ( ADMUX & 0xf8 ) | apin;
    283c:	20 91 7c 00 	lds	r18, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    2840:	fc 01       	movw	r30, r24
    2842:	85 85       	ldd	r24, Z+13	; 0x0d
    2844:	87 70       	andi	r24, 0x07	; 7
    2846:	28 7f       	andi	r18, 0xF8	; 248
    2848:	82 2b       	or	r24, r18
    284a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    ADCSRA |= (1<<ADSC);
    284e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2852:	80 64       	ori	r24, 0x40	; 64
    2854:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    while(ADCSRA & (1 << ADSC));
    2858:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    285c:	86 fd       	sbrc	r24, 6
    285e:	fc cf       	rjmp	.-8      	; 0x2858 <_ZN25navputter_gpio_menu_class13gpio_read_a2dEv+0x28>
}
    2860:	08 95       	ret

00002862 <_ZN25navputter_gpio_menu_class4pollEv>:
{
    2862:	cf 92       	push	r12
    2864:	df 92       	push	r13
    2866:	ef 92       	push	r14
    2868:	ff 92       	push	r15
    286a:	0f 93       	push	r16
    286c:	1f 93       	push	r17
    286e:	cf 93       	push	r28
    2870:	df 93       	push	r29
    2872:	ec 01       	movw	r28, r24
    switch( get_state() )
    2874:	8a 81       	ldd	r24, Y+2	; 0x02
        return m_state;
    2876:	84 30       	cpi	r24, 0x04	; 4
    2878:	09 f4       	brne	.+2      	; 0x287c <_ZN25navputter_gpio_menu_class4pollEv+0x1a>
    287a:	df c0       	rjmp	.+446    	; 0x2a3a <_ZN25navputter_gpio_menu_class4pollEv+0x1d8>
    287c:	80 f4       	brcc	.+32     	; 0x289e <_ZN25navputter_gpio_menu_class4pollEv+0x3c>
    287e:	88 23       	and	r24, r24
    2880:	01 f1       	breq	.+64     	; 0x28c2 <_ZN25navputter_gpio_menu_class4pollEv+0x60>
    2882:	83 30       	cpi	r24, 0x03	; 3
    2884:	09 f4       	brne	.+2      	; 0x2888 <_ZN25navputter_gpio_menu_class4pollEv+0x26>
    2886:	83 c0       	rjmp	.+262    	; 0x298e <_ZN25navputter_gpio_menu_class4pollEv+0x12c>
            myputter.error( ERROR_GPIO_BAD_CASE );
    2888:	82 e0       	ldi	r24, 0x02	; 2
}
    288a:	df 91       	pop	r29
    288c:	cf 91       	pop	r28
    288e:	1f 91       	pop	r17
    2890:	0f 91       	pop	r16
    2892:	ff 90       	pop	r15
    2894:	ef 90       	pop	r14
    2896:	df 90       	pop	r13
    2898:	cf 90       	pop	r12
            myputter.error( ERROR_GPIO_BAD_CASE );
    289a:	0c 94 0b 07 	jmp	0xe16	; 0xe16 <_ZN15navputter_class5errorEh.constprop.29>
    289e:	85 30       	cpi	r24, 0x05	; 5
    28a0:	09 f4       	brne	.+2      	; 0x28a4 <_ZN25navputter_gpio_menu_class4pollEv+0x42>
    28a2:	8f c0       	rjmp	.+286    	; 0x29c2 <_ZN25navputter_gpio_menu_class4pollEv+0x160>
    28a4:	86 30       	cpi	r24, 0x06	; 6
    28a6:	81 f7       	brne	.-32     	; 0x2888 <_ZN25navputter_gpio_menu_class4pollEv+0x26>
            m_count--;
    28a8:	ef 85       	ldd	r30, Y+15	; 0x0f
    28aa:	1f ef       	ldi	r17, 0xFF	; 255
    28ac:	1e 0f       	add	r17, r30
    28ae:	1f 87       	std	Y+15, r17	; 0x0f
            m_params[m_count] = atoxi( (const char *)m_value );
    28b0:	ce 01       	movw	r24, r28
    28b2:	05 96       	adiw	r24, 0x05	; 5
    28b4:	0e 94 55 0a 	call	0x14aa	; 0x14aa <_Z5atoxiPKc>
    28b8:	fe 01       	movw	r30, r28
    28ba:	e1 0f       	add	r30, r17
    28bc:	f1 1d       	adc	r31, r1
    28be:	85 87       	std	Z+13, r24	; 0x0d
    28c0:	7b c0       	rjmp	.+246    	; 0x29b8 <_ZN25navputter_gpio_menu_class4pollEv+0x156>
            c = SERIAL.read();
    28c2:	8a e1       	ldi	r24, 0x1A	; 26
    28c4:	91 e0       	ldi	r25, 0x01	; 1
    28c6:	0e 94 0d 03 	call	0x61a	; 0x61a <_ZN22navputter_serial_class4readEv>
    28ca:	08 2f       	mov	r16, r24
    28cc:	18 2f       	mov	r17, r24
            if ( c == 0xff ) return;
    28ce:	8f 3f       	cpi	r24, 0xFF	; 255
    28d0:	b1 f0       	breq	.+44     	; 0x28fe <_ZN25navputter_gpio_menu_class4pollEv+0x9c>
            fputc(c, m_stream);
    28d2:	60 91 2e 01 	lds	r22, 0x012E	; 0x80012e <myputter+0x2e>
    28d6:	70 91 2f 01 	lds	r23, 0x012F	; 0x80012f <myputter+0x2f>
    28da:	90 e0       	ldi	r25, 0x00	; 0
    28dc:	0e 94 c3 31 	call	0x6386	; 0x6386 <fputc>
            GPIO_MENU
    28e0:	04 36       	cpi	r16, 0x64	; 100
    28e2:	11 f4       	brne	.+4      	; 0x28e8 <_ZN25navputter_gpio_menu_class4pollEv+0x86>
    28e4:	0b 83       	std	Y+3, r16	; 0x03
    28e6:	1a c0       	rjmp	.+52     	; 0x291c <_ZN25navputter_gpio_menu_class4pollEv+0xba>
    28e8:	03 35       	cpi	r16, 0x53	; 83
    28ea:	e1 f3       	breq	.-8      	; 0x28e4 <_ZN25navputter_gpio_menu_class4pollEv+0x82>
    28ec:	03 34       	cpi	r16, 0x43	; 67
    28ee:	d1 f3       	breq	.-12     	; 0x28e4 <_ZN25navputter_gpio_menu_class4pollEv+0x82>
    28f0:	09 36       	cpi	r16, 0x69	; 105
    28f2:	71 f4       	brne	.+28     	; 0x2910 <_ZN25navputter_gpio_menu_class4pollEv+0xae>
    28f4:	0b 83       	std	Y+3, r16	; 0x03
    28f6:	1f 86       	std	Y+15, r1	; 0x0f
    28f8:	1c 82       	std	Y+4, r1	; 0x04
        m_state = state;
    28fa:	83 e0       	ldi	r24, 0x03	; 3
    28fc:	8a 83       	std	Y+2, r24	; 0x02
}
    28fe:	df 91       	pop	r29
    2900:	cf 91       	pop	r28
    2902:	1f 91       	pop	r17
    2904:	0f 91       	pop	r16
    2906:	ff 90       	pop	r15
    2908:	ef 90       	pop	r14
    290a:	df 90       	pop	r13
    290c:	cf 90       	pop	r12
    290e:	08 95       	ret
            GPIO_MENU
    2910:	09 34       	cpi	r16, 0x49	; 73
    2912:	41 f3       	breq	.-48     	; 0x28e4 <_ZN25navputter_gpio_menu_class4pollEv+0x82>
    2914:	02 36       	cpi	r16, 0x62	; 98
    2916:	29 f4       	brne	.+10     	; 0x2922 <_ZN25navputter_gpio_menu_class4pollEv+0xc0>
    2918:	82 e6       	ldi	r24, 0x62	; 98
    291a:	8b 83       	std	Y+3, r24	; 0x03
    291c:	81 e0       	ldi	r24, 0x01	; 1
    291e:	8f 87       	std	Y+15, r24	; 0x0f
    2920:	eb cf       	rjmp	.-42     	; 0x28f8 <_ZN25navputter_gpio_menu_class4pollEv+0x96>
    2922:	0f 36       	cpi	r16, 0x6F	; 111
    2924:	f9 f2       	breq	.-66     	; 0x28e4 <_ZN25navputter_gpio_menu_class4pollEv+0x82>
    2926:	0e 35       	cpi	r16, 0x5E	; 94
    2928:	e9 f2       	breq	.-70     	; 0x28e4 <_ZN25navputter_gpio_menu_class4pollEv+0x82>
    292a:	06 32       	cpi	r16, 0x26	; 38
    292c:	d9 f2       	breq	.-74     	; 0x28e4 <_ZN25navputter_gpio_menu_class4pollEv+0x82>
    292e:	0c 37       	cpi	r16, 0x7C	; 124
    2930:	c9 f2       	breq	.-78     	; 0x28e4 <_ZN25navputter_gpio_menu_class4pollEv+0x82>
    2932:	03 37       	cpi	r16, 0x73	; 115
    2934:	b9 f2       	breq	.-82     	; 0x28e4 <_ZN25navputter_gpio_menu_class4pollEv+0x82>
    2936:	03 36       	cpi	r16, 0x63	; 99
    2938:	a9 f2       	breq	.-86     	; 0x28e4 <_ZN25navputter_gpio_menu_class4pollEv+0x82>
    293a:	01 36       	cpi	r16, 0x61	; 97
    293c:	31 f4       	brne	.+12     	; 0x294a <_ZN25navputter_gpio_menu_class4pollEv+0xe8>
    293e:	0b 83       	std	Y+3, r16	; 0x03
    2940:	81 e0       	ldi	r24, 0x01	; 1
    2942:	8f 87       	std	Y+15, r24	; 0x0f
        m_pos=0;
    2944:	1c 82       	std	Y+4, r1	; 0x04
        m_state = state;
    2946:	85 e0       	ldi	r24, 0x05	; 5
    2948:	d9 cf       	rjmp	.-78     	; 0x28fc <_ZN25navputter_gpio_menu_class4pollEv+0x9a>
    294a:	01 34       	cpi	r16, 0x41	; 65
    294c:	19 f4       	brne	.+6      	; 0x2954 <_ZN25navputter_gpio_menu_class4pollEv+0xf2>
    294e:	0b 83       	std	Y+3, r16	; 0x03
    2950:	82 e0       	ldi	r24, 0x02	; 2
    2952:	f7 cf       	rjmp	.-18     	; 0x2942 <_ZN25navputter_gpio_menu_class4pollEv+0xe0>
            myputter.error( ERROR_GPIO_BAD_COMMAND );
    2954:	80 e0       	ldi	r24, 0x00	; 0
    2956:	0e 94 0b 07 	call	0xe16	; 0xe16 <_ZN15navputter_class5errorEh.constprop.29>
            usage();
    295a:	e8 81       	ld	r30, Y
    295c:	f9 81       	ldd	r31, Y+1	; 0x01
    295e:	06 80       	ldd	r0, Z+6	; 0x06
    2960:	f7 81       	ldd	r31, Z+7	; 0x07
    2962:	e0 2d       	mov	r30, r0
    2964:	ce 01       	movw	r24, r28
    2966:	09 95       	icall
    if ( c == 'q' )
    2968:	11 37       	cpi	r17, 0x71	; 113
    296a:	49 f6       	brne	.-110    	; 0x28fe <_ZN25navputter_gpio_menu_class4pollEv+0x9c>
        myputter.clear_menu();
    296c:	0e 94 82 03 	call	0x704	; 0x704 <_ZN15navputter_class10clear_menuEv.isra.25.constprop.30>
    return malloc(objsize); 
    2970:	83 e0       	ldi	r24, 0x03	; 3
    2972:	90 e0       	ldi	r25, 0x00	; 0
    2974:	0e 94 35 2f 	call	0x5e6a	; 0x5e6a <malloc>
        navputter_main_menu_class *mm = new navputter_main_menu_class();
    2978:	fc 01       	movw	r30, r24
    297a:	12 82       	std	Z+2, r1	; 0x02
class navputter_main_menu_class : public navputter_menu_base_class
    297c:	20 e8       	ldi	r18, 0x80	; 128
    297e:	38 e0       	ldi	r19, 0x08	; 8
    2980:	31 83       	std	Z+1, r19	; 0x01
    2982:	20 83       	st	Z, r18
        assert(mm);
    2984:	00 97       	sbiw	r24, 0x00	; 0
    2986:	09 f0       	breq	.+2      	; 0x298a <_ZN25navputter_gpio_menu_class4pollEv+0x128>
    2988:	a4 c0       	rjmp	.+328    	; 0x2ad2 <_ZN25navputter_gpio_menu_class4pollEv+0x270>
    298a:	0e 94 6a 31 	call	0x62d4	; 0x62d4 <abort>
            c = SERIAL.read();
    298e:	8a e1       	ldi	r24, 0x1A	; 26
    2990:	91 e0       	ldi	r25, 0x01	; 1
    2992:	0e 94 0d 03 	call	0x61a	; 0x61a <_ZN22navputter_serial_class4readEv>
    2996:	08 2f       	mov	r16, r24
    2998:	18 2f       	mov	r17, r24
            if (c == 0xff ) return;
    299a:	8f 3f       	cpi	r24, 0xFF	; 255
    299c:	09 f4       	brne	.+2      	; 0x29a0 <_ZN25navputter_gpio_menu_class4pollEv+0x13e>
    299e:	af cf       	rjmp	.-162    	; 0x28fe <_ZN25navputter_gpio_menu_class4pollEv+0x9c>
            fputc(c, m_stream);
    29a0:	60 91 2e 01 	lds	r22, 0x012E	; 0x80012e <myputter+0x2e>
    29a4:	70 91 2f 01 	lds	r23, 0x012F	; 0x80012f <myputter+0x2f>
    29a8:	90 e0       	ldi	r25, 0x00	; 0
    29aa:	0e 94 c3 31 	call	0x6386	; 0x6386 <fputc>
            if ( c >= 'a' && c <= 'd' )
    29ae:	8f e9       	ldi	r24, 0x9F	; 159
    29b0:	80 0f       	add	r24, r16
    29b2:	84 30       	cpi	r24, 0x04	; 4
    29b4:	c8 f6       	brcc	.-78     	; 0x2968 <_ZN25navputter_gpio_menu_class4pollEv+0x106>
                m_port = c;
    29b6:	08 8b       	std	Y+16, r16	; 0x10
            if ( m_count == 0 )
    29b8:	8f 85       	ldd	r24, Y+15	; 0x0f
    29ba:	81 11       	cpse	r24, r1
    29bc:	c3 cf       	rjmp	.-122    	; 0x2944 <_ZN25navputter_gpio_menu_class4pollEv+0xe2>
        m_state = state;
    29be:	84 e0       	ldi	r24, 0x04	; 4
    29c0:	9d cf       	rjmp	.-198    	; 0x28fc <_ZN25navputter_gpio_menu_class4pollEv+0x9a>
            c = SERIAL.read();
    29c2:	8a e1       	ldi	r24, 0x1A	; 26
    29c4:	91 e0       	ldi	r25, 0x01	; 1
    29c6:	0e 94 0d 03 	call	0x61a	; 0x61a <_ZN22navputter_serial_class4readEv>
    29ca:	6c 01       	movw	r12, r24
    29cc:	18 2f       	mov	r17, r24
            if ( c == 0xff ) return;
    29ce:	8f 3f       	cpi	r24, 0xFF	; 255
    29d0:	09 f4       	brne	.+2      	; 0x29d4 <_ZN25navputter_gpio_menu_class4pollEv+0x172>
    29d2:	95 cf       	rjmp	.-214    	; 0x28fe <_ZN25navputter_gpio_menu_class4pollEv+0x9c>
            fputc(c, m_stream);
    29d4:	60 91 2e 01 	lds	r22, 0x012E	; 0x80012e <myputter+0x2e>
    29d8:	70 91 2f 01 	lds	r23, 0x012F	; 0x80012f <myputter+0x2f>
    29dc:	7c 01       	movw	r14, r24
    29de:	ff 24       	eor	r15, r15
    29e0:	c7 01       	movw	r24, r14
    29e2:	0e 94 c3 31 	call	0x6386	; 0x6386 <fputc>
            if ( isxdigit(c) )
    29e6:	c7 01       	movw	r24, r14
    29e8:	0e 94 8b 31 	call	0x6316	; 0x6316 <isxdigit>
    29ec:	89 2b       	or	r24, r25
    29ee:	f1 f0       	breq	.+60     	; 0x2a2c <_ZN25navputter_gpio_menu_class4pollEv+0x1ca>
                m_value[ m_pos++ ] = c;
    29f0:	ec 81       	ldd	r30, Y+4	; 0x04
    29f2:	81 e0       	ldi	r24, 0x01	; 1
    29f4:	8e 0f       	add	r24, r30
    29f6:	8c 83       	std	Y+4, r24	; 0x04
    29f8:	ec 0f       	add	r30, r28
    29fa:	fd 2f       	mov	r31, r29
    29fc:	f1 1d       	adc	r31, r1
    29fe:	c5 82       	std	Z+5, r12	; 0x05
                if ( m_pos == sizeof( m_value ) )
    2a00:	88 30       	cpi	r24, 0x08	; 8
    2a02:	71 f4       	brne	.+28     	; 0x2a20 <_ZN25navputter_gpio_menu_class4pollEv+0x1be>
                    myputter.error( ERROR_GPIO_BAD_SIZE );
    2a04:	81 e0       	ldi	r24, 0x01	; 1
    2a06:	0e 94 0b 07 	call	0xe16	; 0xe16 <_ZN15navputter_class5errorEh.constprop.29>
            read_command();
    2a0a:	ce 01       	movw	r24, r28
}
    2a0c:	df 91       	pop	r29
    2a0e:	cf 91       	pop	r28
    2a10:	1f 91       	pop	r17
    2a12:	0f 91       	pop	r16
    2a14:	ff 90       	pop	r15
    2a16:	ef 90       	pop	r14
    2a18:	df 90       	pop	r13
    2a1a:	cf 90       	pop	r12
            read_command();
    2a1c:	0c 94 7a 08 	jmp	0x10f4	; 0x10f4 <_ZN25navputter_menu_base_class12read_commandEv>
                if (m_pos == HEX_WORD_READ_SIZE)
    2a20:	82 30       	cpi	r24, 0x02	; 2
    2a22:	09 f0       	breq	.+2      	; 0x2a26 <_ZN25navputter_gpio_menu_class4pollEv+0x1c4>
    2a24:	a1 cf       	rjmp	.-190    	; 0x2968 <_ZN25navputter_gpio_menu_class4pollEv+0x106>
        m_state = state;
    2a26:	86 e0       	ldi	r24, 0x06	; 6
    2a28:	8a 83       	std	Y+2, r24	; 0x02
    2a2a:	9e cf       	rjmp	.-196    	; 0x2968 <_ZN25navputter_gpio_menu_class4pollEv+0x106>
                myputter.error( ERROR_GPIO_BAD_SIZE );
    2a2c:	81 e0       	ldi	r24, 0x01	; 1
    2a2e:	0e 94 0b 07 	call	0xe16	; 0xe16 <_ZN15navputter_class5errorEh.constprop.29>
                read_command();
    2a32:	ce 01       	movw	r24, r28
    2a34:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <_ZN25navputter_menu_base_class12read_commandEv>
    2a38:	97 cf       	rjmp	.-210    	; 0x2968 <_ZN25navputter_gpio_menu_class4pollEv+0x106>
            GPIO_MENU
    2a3a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a3c:	84 36       	cpi	r24, 0x64	; 100
    2a3e:	11 f4       	brne	.+4      	; 0x2a44 <_ZN25navputter_gpio_menu_class4pollEv+0x1e2>
    2a40:	ce 01       	movw	r24, r28
    2a42:	2e dd       	rcall	.-1444   	; 0x24a0 <_ZN25navputter_gpio_menu_class8gpio_ddrEv>
    2a44:	8b 81       	ldd	r24, Y+3	; 0x03
    2a46:	83 35       	cpi	r24, 0x53	; 83
    2a48:	11 f4       	brne	.+4      	; 0x2a4e <_ZN25navputter_gpio_menu_class4pollEv+0x1ec>
    2a4a:	ce 01       	movw	r24, r28
    2a4c:	52 dd       	rcall	.-1372   	; 0x24f2 <_ZN25navputter_gpio_menu_class16gpio_set_ddr_bitEv>
    2a4e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a50:	83 34       	cpi	r24, 0x43	; 67
    2a52:	11 f4       	brne	.+4      	; 0x2a58 <_ZN25navputter_gpio_menu_class4pollEv+0x1f6>
    2a54:	ce 01       	movw	r24, r28
    2a56:	8e dd       	rcall	.-1252   	; 0x2574 <_ZN25navputter_gpio_menu_class18gpio_clear_ddr_bitEv>
    2a58:	8b 81       	ldd	r24, Y+3	; 0x03
    2a5a:	89 36       	cpi	r24, 0x69	; 105
    2a5c:	11 f4       	brne	.+4      	; 0x2a62 <_ZN25navputter_gpio_menu_class4pollEv+0x200>
    2a5e:	ce 01       	movw	r24, r28
    2a60:	82 dc       	rcall	.-1788   	; 0x2366 <_ZN25navputter_gpio_menu_class7gpio_inEv>
    2a62:	8b 81       	ldd	r24, Y+3	; 0x03
    2a64:	89 34       	cpi	r24, 0x49	; 73
    2a66:	11 f4       	brne	.+4      	; 0x2a6c <_ZN25navputter_gpio_menu_class4pollEv+0x20a>
    2a68:	ce 01       	movw	r24, r28
    2a6a:	4e dc       	rcall	.-1892   	; 0x2308 <_ZN25navputter_gpio_menu_class12gpio_in_maskEv>
    2a6c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a6e:	82 36       	cpi	r24, 0x62	; 98
    2a70:	11 f4       	brne	.+4      	; 0x2a76 <_ZN25navputter_gpio_menu_class4pollEv+0x214>
    2a72:	ce 01       	movw	r24, r28
    2a74:	a5 dc       	rcall	.-1718   	; 0x23c0 <_ZN25navputter_gpio_menu_class11gpio_in_bitEv>
    2a76:	8b 81       	ldd	r24, Y+3	; 0x03
    2a78:	8f 36       	cpi	r24, 0x6F	; 111
    2a7a:	11 f4       	brne	.+4      	; 0x2a80 <_ZN25navputter_gpio_menu_class4pollEv+0x21e>
    2a7c:	ce 01       	movw	r24, r28
    2a7e:	b1 de       	rcall	.-670    	; 0x27e2 <_ZN25navputter_gpio_menu_class8gpio_outEv>
    2a80:	8b 81       	ldd	r24, Y+3	; 0x03
    2a82:	8e 35       	cpi	r24, 0x5E	; 94
    2a84:	11 f4       	brne	.+4      	; 0x2a8a <_ZN25navputter_gpio_menu_class4pollEv+0x228>
    2a86:	ce 01       	movw	r24, r28
    2a88:	dc dc       	rcall	.-1608   	; 0x2442 <_ZN25navputter_gpio_menu_class8gpio_xorEv>
    2a8a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a8c:	86 32       	cpi	r24, 0x26	; 38
    2a8e:	11 f4       	brne	.+4      	; 0x2a94 <_ZN25navputter_gpio_menu_class4pollEv+0x232>
    2a90:	ce 01       	movw	r24, r28
    2a92:	49 de       	rcall	.-878    	; 0x2726 <_ZN25navputter_gpio_menu_class8gpio_andEv>
    2a94:	8b 81       	ldd	r24, Y+3	; 0x03
    2a96:	8c 37       	cpi	r24, 0x7C	; 124
    2a98:	11 f4       	brne	.+4      	; 0x2a9e <_ZN25navputter_gpio_menu_class4pollEv+0x23c>
    2a9a:	ce 01       	movw	r24, r28
    2a9c:	73 de       	rcall	.-794    	; 0x2784 <_ZN25navputter_gpio_menu_class7gpio_orEv>
    2a9e:	8b 81       	ldd	r24, Y+3	; 0x03
    2aa0:	83 37       	cpi	r24, 0x73	; 115
    2aa2:	11 f4       	brne	.+4      	; 0x2aa8 <_ZN25navputter_gpio_menu_class4pollEv+0x246>
    2aa4:	ce 01       	movw	r24, r28
    2aa6:	04 de       	rcall	.-1016   	; 0x26b0 <_ZN25navputter_gpio_menu_class12gpio_set_bitEv>
    2aa8:	8b 81       	ldd	r24, Y+3	; 0x03
    2aaa:	83 36       	cpi	r24, 0x63	; 99
    2aac:	11 f4       	brne	.+4      	; 0x2ab2 <_ZN25navputter_gpio_menu_class4pollEv+0x250>
    2aae:	ce 01       	movw	r24, r28
    2ab0:	a5 dd       	rcall	.-1206   	; 0x25fc <_ZN25navputter_gpio_menu_class14gpio_clear_bitEv>
    2ab2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ab4:	81 36       	cpi	r24, 0x61	; 97
    2ab6:	11 f4       	brne	.+4      	; 0x2abc <_ZN25navputter_gpio_menu_class4pollEv+0x25a>
    2ab8:	ce 01       	movw	r24, r28
    2aba:	ba de       	rcall	.-652    	; 0x2830 <_ZN25navputter_gpio_menu_class13gpio_read_a2dEv>
    2abc:	8b 81       	ldd	r24, Y+3	; 0x03
    2abe:	81 34       	cpi	r24, 0x41	; 65
    2ac0:	09 f0       	breq	.+2      	; 0x2ac4 <_ZN25navputter_gpio_menu_class4pollEv+0x262>
    2ac2:	a3 cf       	rjmp	.-186    	; 0x2a0a <_ZN25navputter_gpio_menu_class4pollEv+0x1a8>
    ADMUX = (1<<REFS0);
    2ac4:	80 e4       	ldi	r24, 0x40	; 64
    2ac6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
    2aca:	87 e8       	ldi	r24, 0x87	; 135
    2acc:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2ad0:	9c cf       	rjmp	.-200    	; 0x2a0a <_ZN25navputter_gpio_menu_class4pollEv+0x1a8>
        myputter.set_menu(mm);  
    2ad2:	bc 01       	movw	r22, r24
    2ad4:	80 e0       	ldi	r24, 0x00	; 0
    2ad6:	91 e0       	ldi	r25, 0x01	; 1
}
    2ad8:	df 91       	pop	r29
    2ada:	cf 91       	pop	r28
    2adc:	1f 91       	pop	r17
    2ade:	0f 91       	pop	r16
    2ae0:	ff 90       	pop	r15
    2ae2:	ef 90       	pop	r14
    2ae4:	df 90       	pop	r13
    2ae6:	cf 90       	pop	r12
        myputter.set_menu(mm);  
    2ae8:	0c 94 be 08 	jmp	0x117c	; 0x117c <_ZN15navputter_class8set_menuEP25navputter_menu_base_class>

00002aec <_ZN28navputter_keycode_menu_class28set_keycode_display_indiciesEv>:
{
    2aec:	fc 01       	movw	r30, r24
    KEY_ACTION_LIST
    2aee:	dc 01       	movw	r26, r24
    2af0:	a5 53       	subi	r26, 0x35	; 53
    2af2:	bf 4f       	sbci	r27, 0xFF	; 255
    2af4:	4c 91       	ld	r20, X
    2af6:	88 e0       	ldi	r24, 0x08	; 8
    2af8:	48 9f       	mul	r20, r24
    2afa:	a0 01       	movw	r20, r0
    2afc:	11 24       	eor	r1, r1
    2afe:	df 01       	movw	r26, r30
    2b00:	a4 0f       	add	r26, r20
    2b02:	b5 1f       	adc	r27, r21
    2b04:	d3 96       	adiw	r26, 0x33	; 51
    2b06:	8c 91       	ld	r24, X
    2b08:	81 11       	cpse	r24, r1
    2b0a:	59 c0       	rjmp	.+178    	; 0x2bbe <_ZN28navputter_keycode_menu_class28set_keycode_display_indiciesEv+0xd2>
    2b0c:	a0 85       	ldd	r26, Z+8	; 0x08
    2b0e:	8a 2f       	mov	r24, r26
    2b10:	90 e0       	ldi	r25, 0x00	; 0
    2b12:	dc 01       	movw	r26, r24
    2b14:	aa 0f       	add	r26, r26
    2b16:	bb 1f       	adc	r27, r27
    2b18:	a8 0f       	add	r26, r24
    2b1a:	b9 1f       	adc	r27, r25
    2b1c:	ae 0f       	add	r26, r30
    2b1e:	bf 1f       	adc	r27, r31
    2b20:	1b 96       	adiw	r26, 0x0b	; 11
    2b22:	1c 92       	st	X, r1
    KEYCODE_MODIFIER_LIST
    2b24:	df 01       	movw	r26, r30
    2b26:	a4 0f       	add	r26, r20
    2b28:	b5 1f       	adc	r27, r21
    2b2a:	d5 96       	adiw	r26, 0x35	; 53
    2b2c:	2d 91       	ld	r18, X+
    2b2e:	3c 91       	ld	r19, X
    2b30:	31 ff       	sbrs	r19, 1
    2b32:	02 c0       	rjmp	.+4      	; 0x2b38 <_ZN28navputter_keycode_menu_class28set_keycode_display_indiciesEv+0x4c>
    2b34:	81 e0       	ldi	r24, 0x01	; 1
    2b36:	82 87       	std	Z+10, r24	; 0x0a
    2b38:	4e 0f       	add	r20, r30
    2b3a:	5f 1f       	adc	r21, r31
    2b3c:	da 01       	movw	r26, r20
    2b3e:	d7 96       	adiw	r26, 0x37	; 55
    2b40:	8d 91       	ld	r24, X+
    2b42:	9c 91       	ld	r25, X
    2b44:	91 ff       	sbrs	r25, 1
    2b46:	02 c0       	rjmp	.+4      	; 0x2b4c <_ZN28navputter_keycode_menu_class28set_keycode_display_indiciesEv+0x60>
    2b48:	41 e0       	ldi	r20, 0x01	; 1
    2b4a:	42 87       	std	Z+10, r20	; 0x0a
    2b4c:	35 ff       	sbrs	r19, 5
    2b4e:	02 c0       	rjmp	.+4      	; 0x2b54 <_ZN28navputter_keycode_menu_class28set_keycode_display_indiciesEv+0x68>
    2b50:	42 e0       	ldi	r20, 0x02	; 2
    2b52:	42 87       	std	Z+10, r20	; 0x0a
    2b54:	95 ff       	sbrs	r25, 5
    2b56:	02 c0       	rjmp	.+4      	; 0x2b5c <_ZN28navputter_keycode_menu_class28set_keycode_display_indiciesEv+0x70>
    2b58:	42 e0       	ldi	r20, 0x02	; 2
    2b5a:	42 87       	std	Z+10, r20	; 0x0a
    2b5c:	30 ff       	sbrs	r19, 0
    2b5e:	02 c0       	rjmp	.+4      	; 0x2b64 <_ZN28navputter_keycode_menu_class28set_keycode_display_indiciesEv+0x78>
    2b60:	43 e0       	ldi	r20, 0x03	; 3
    2b62:	42 87       	std	Z+10, r20	; 0x0a
    2b64:	90 ff       	sbrs	r25, 0
    2b66:	02 c0       	rjmp	.+4      	; 0x2b6c <_ZN28navputter_keycode_menu_class28set_keycode_display_indiciesEv+0x80>
    2b68:	43 e0       	ldi	r20, 0x03	; 3
    2b6a:	42 87       	std	Z+10, r20	; 0x0a
    2b6c:	34 ff       	sbrs	r19, 4
    2b6e:	02 c0       	rjmp	.+4      	; 0x2b74 <_ZN28navputter_keycode_menu_class28set_keycode_display_indiciesEv+0x88>
    2b70:	44 e0       	ldi	r20, 0x04	; 4
    2b72:	42 87       	std	Z+10, r20	; 0x0a
    2b74:	94 ff       	sbrs	r25, 4
    2b76:	02 c0       	rjmp	.+4      	; 0x2b7c <_ZN28navputter_keycode_menu_class28set_keycode_display_indiciesEv+0x90>
    2b78:	44 e0       	ldi	r20, 0x04	; 4
    2b7a:	42 87       	std	Z+10, r20	; 0x0a
    2b7c:	32 ff       	sbrs	r19, 2
    2b7e:	02 c0       	rjmp	.+4      	; 0x2b84 <_ZN28navputter_keycode_menu_class28set_keycode_display_indiciesEv+0x98>
    2b80:	45 e0       	ldi	r20, 0x05	; 5
    2b82:	42 87       	std	Z+10, r20	; 0x0a
    2b84:	92 ff       	sbrs	r25, 2
    2b86:	02 c0       	rjmp	.+4      	; 0x2b8c <_ZN28navputter_keycode_menu_class28set_keycode_display_indiciesEv+0xa0>
    2b88:	45 e0       	ldi	r20, 0x05	; 5
    2b8a:	42 87       	std	Z+10, r20	; 0x0a
    2b8c:	36 ff       	sbrs	r19, 6
    2b8e:	02 c0       	rjmp	.+4      	; 0x2b94 <_ZN28navputter_keycode_menu_class28set_keycode_display_indiciesEv+0xa8>
    2b90:	46 e0       	ldi	r20, 0x06	; 6
    2b92:	42 87       	std	Z+10, r20	; 0x0a
    2b94:	96 ff       	sbrs	r25, 6
    2b96:	02 c0       	rjmp	.+4      	; 0x2b9c <_ZN28navputter_keycode_menu_class28set_keycode_display_indiciesEv+0xb0>
    2b98:	46 e0       	ldi	r20, 0x06	; 6
    2b9a:	42 87       	std	Z+10, r20	; 0x0a
    2b9c:	33 ff       	sbrs	r19, 3
    2b9e:	02 c0       	rjmp	.+4      	; 0x2ba4 <_ZN28navputter_keycode_menu_class28set_keycode_display_indiciesEv+0xb8>
    2ba0:	47 e0       	ldi	r20, 0x07	; 7
    2ba2:	42 87       	std	Z+10, r20	; 0x0a
    2ba4:	93 ff       	sbrs	r25, 3
    2ba6:	02 c0       	rjmp	.+4      	; 0x2bac <_ZN28navputter_keycode_menu_class28set_keycode_display_indiciesEv+0xc0>
    2ba8:	47 e0       	ldi	r20, 0x07	; 7
    2baa:	42 87       	std	Z+10, r20	; 0x0a
    2bac:	37 ff       	sbrs	r19, 7
    2bae:	02 c0       	rjmp	.+4      	; 0x2bb4 <_ZN28navputter_keycode_menu_class28set_keycode_display_indiciesEv+0xc8>
    2bb0:	28 e0       	ldi	r18, 0x08	; 8
    2bb2:	22 87       	std	Z+10, r18	; 0x0a
    2bb4:	97 ff       	sbrs	r25, 7
    2bb6:	02 c0       	rjmp	.+4      	; 0x2bbc <_ZN28navputter_keycode_menu_class28set_keycode_display_indiciesEv+0xd0>
    2bb8:	88 e0       	ldi	r24, 0x08	; 8
    2bba:	82 87       	std	Z+10, r24	; 0x0a
}
    2bbc:	08 95       	ret
    KEY_ACTION_LIST
    2bbe:	81 30       	cpi	r24, 0x01	; 1
    2bc0:	69 f4       	brne	.+26     	; 0x2bdc <_ZN28navputter_keycode_menu_class28set_keycode_display_indiciesEv+0xf0>
    2bc2:	a0 85       	ldd	r26, Z+8	; 0x08
    2bc4:	2a 2f       	mov	r18, r26
    2bc6:	30 e0       	ldi	r19, 0x00	; 0
    2bc8:	d9 01       	movw	r26, r18
    2bca:	aa 0f       	add	r26, r26
    2bcc:	bb 1f       	adc	r27, r27
    2bce:	a2 0f       	add	r26, r18
    2bd0:	b3 1f       	adc	r27, r19
    2bd2:	ae 0f       	add	r26, r30
    2bd4:	bf 1f       	adc	r27, r31
    2bd6:	1b 96       	adiw	r26, 0x0b	; 11
    2bd8:	8c 93       	st	X, r24
    2bda:	a4 cf       	rjmp	.-184    	; 0x2b24 <_ZN28navputter_keycode_menu_class28set_keycode_display_indiciesEv+0x38>
    2bdc:	82 30       	cpi	r24, 0x02	; 2
    2bde:	89 f3       	breq	.-30     	; 0x2bc2 <_ZN28navputter_keycode_menu_class28set_keycode_display_indiciesEv+0xd6>
    2be0:	83 30       	cpi	r24, 0x03	; 3
    2be2:	79 f3       	breq	.-34     	; 0x2bc2 <_ZN28navputter_keycode_menu_class28set_keycode_display_indiciesEv+0xd6>
    2be4:	84 30       	cpi	r24, 0x04	; 4
    2be6:	69 f3       	breq	.-38     	; 0x2bc2 <_ZN28navputter_keycode_menu_class28set_keycode_display_indiciesEv+0xd6>
    2be8:	85 30       	cpi	r24, 0x05	; 5
    2bea:	59 f3       	breq	.-42     	; 0x2bc2 <_ZN28navputter_keycode_menu_class28set_keycode_display_indiciesEv+0xd6>
    2bec:	86 30       	cpi	r24, 0x06	; 6
    2bee:	49 f3       	breq	.-46     	; 0x2bc2 <_ZN28navputter_keycode_menu_class28set_keycode_display_indiciesEv+0xd6>
    2bf0:	87 30       	cpi	r24, 0x07	; 7
    2bf2:	39 f3       	breq	.-50     	; 0x2bc2 <_ZN28navputter_keycode_menu_class28set_keycode_display_indiciesEv+0xd6>
    2bf4:	88 30       	cpi	r24, 0x08	; 8
    2bf6:	29 f3       	breq	.-54     	; 0x2bc2 <_ZN28navputter_keycode_menu_class28set_keycode_display_indiciesEv+0xd6>
    2bf8:	89 30       	cpi	r24, 0x09	; 9
    2bfa:	19 f3       	breq	.-58     	; 0x2bc2 <_ZN28navputter_keycode_menu_class28set_keycode_display_indiciesEv+0xd6>
    2bfc:	8a 30       	cpi	r24, 0x0A	; 10
    2bfe:	09 f3       	breq	.-62     	; 0x2bc2 <_ZN28navputter_keycode_menu_class28set_keycode_display_indiciesEv+0xd6>
    2c00:	8b 30       	cpi	r24, 0x0B	; 11
    2c02:	f9 f2       	breq	.-66     	; 0x2bc2 <_ZN28navputter_keycode_menu_class28set_keycode_display_indiciesEv+0xd6>
    2c04:	8c 30       	cpi	r24, 0x0C	; 12
    2c06:	e9 f2       	breq	.-70     	; 0x2bc2 <_ZN28navputter_keycode_menu_class28set_keycode_display_indiciesEv+0xd6>
    2c08:	8d 30       	cpi	r24, 0x0D	; 13
    2c0a:	d9 f2       	breq	.-74     	; 0x2bc2 <_ZN28navputter_keycode_menu_class28set_keycode_display_indiciesEv+0xd6>
    2c0c:	8e 30       	cpi	r24, 0x0E	; 14
    2c0e:	c9 f2       	breq	.-78     	; 0x2bc2 <_ZN28navputter_keycode_menu_class28set_keycode_display_indiciesEv+0xd6>
    2c10:	89 cf       	rjmp	.-238    	; 0x2b24 <_ZN28navputter_keycode_menu_class28set_keycode_display_indiciesEv+0x38>

00002c12 <_ZN28navputter_keycode_menu_class21save_keymap_to_eepromEh>:
    SERIAL.print_P( global_save_keymap_to_eeprom_str, ix, 0, EOLN);
    2c12:	83 e3       	ldi	r24, 0x33	; 51
    2c14:	94 e0       	ldi	r25, 0x04	; 4
    2c16:	9f 93       	push	r25
    2c18:	8f 93       	push	r24
    2c1a:	1f 92       	push	r1
    2c1c:	1f 92       	push	r1
    2c1e:	1f 92       	push	r1
    2c20:	6f 93       	push	r22
    2c22:	8f ef       	ldi	r24, 0xFF	; 255
    2c24:	93 e0       	ldi	r25, 0x03	; 3
    2c26:	9f 93       	push	r25
    2c28:	8f 93       	push	r24
    2c2a:	8a e1       	ldi	r24, 0x1A	; 26
    2c2c:	91 e0       	ldi	r25, 0x01	; 1
    2c2e:	9f 93       	push	r25
    2c30:	8f 93       	push	r24
    2c32:	0e 94 96 07 	call	0xf2c	; 0xf2c <_ZN22navputter_serial_class7print_PEPKcz>
}
    2c36:	8d b7       	in	r24, 0x3d	; 61
    2c38:	9e b7       	in	r25, 0x3e	; 62
    2c3a:	0a 96       	adiw	r24, 0x0a	; 10
    2c3c:	0f b6       	in	r0, 0x3f	; 63
    2c3e:	f8 94       	cli
    2c40:	9e bf       	out	0x3e, r25	; 62
    2c42:	0f be       	out	0x3f, r0	; 63
    2c44:	8d bf       	out	0x3d, r24	; 61
    2c46:	08 95       	ret

00002c48 <_ZN28navputter_keycode_menu_class18keycode_edit_usageEv>:
{
    2c48:	0f 93       	push	r16
    2c4a:	1f 93       	push	r17
    2c4c:	cf 93       	push	r28
    2c4e:	df 93       	push	r29
    SERIAL.print_P(keycode_usage_string);
    2c50:	85 ed       	ldi	r24, 0xD5	; 213
    2c52:	93 e0       	ldi	r25, 0x03	; 3
    2c54:	9f 93       	push	r25
    2c56:	8f 93       	push	r24
    2c58:	ca e1       	ldi	r28, 0x1A	; 26
    2c5a:	d1 e0       	ldi	r29, 0x01	; 1
    2c5c:	df 93       	push	r29
    2c5e:	cf 93       	push	r28
    2c60:	0e 94 96 07 	call	0xf2c	; 0xf2c <_ZN22navputter_serial_class7print_PEPKcz>
    KEYCODE_EDIT_LIST
    2c64:	88 ea       	ldi	r24, 0xA8	; 168
    2c66:	96 e0       	ldi	r25, 0x06	; 6
    2c68:	9f 93       	push	r25
    2c6a:	8f 93       	push	r24
    2c6c:	1f 92       	push	r1
    2c6e:	81 e6       	ldi	r24, 0x61	; 97
    2c70:	8f 93       	push	r24
    2c72:	0c ec       	ldi	r16, 0xCC	; 204
    2c74:	13 e0       	ldi	r17, 0x03	; 3
    2c76:	1f 93       	push	r17
    2c78:	0f 93       	push	r16
    2c7a:	df 93       	push	r29
    2c7c:	cf 93       	push	r28
    2c7e:	0e 94 96 07 	call	0xf2c	; 0xf2c <_ZN22navputter_serial_class7print_PEPKcz>
    2c82:	84 eb       	ldi	r24, 0xB4	; 180
    2c84:	96 e0       	ldi	r25, 0x06	; 6
    2c86:	9f 93       	push	r25
    2c88:	8f 93       	push	r24
    2c8a:	1f 92       	push	r1
    2c8c:	83 e7       	ldi	r24, 0x73	; 115
    2c8e:	8f 93       	push	r24
    2c90:	1f 93       	push	r17
    2c92:	0f 93       	push	r16
    2c94:	df 93       	push	r29
    2c96:	cf 93       	push	r28
    2c98:	0e 94 96 07 	call	0xf2c	; 0xf2c <_ZN22navputter_serial_class7print_PEPKcz>
    2c9c:	8f eb       	ldi	r24, 0xBF	; 191
    2c9e:	96 e0       	ldi	r25, 0x06	; 6
    2ca0:	9f 93       	push	r25
    2ca2:	8f 93       	push	r24
    2ca4:	1f 92       	push	r1
    2ca6:	84 e6       	ldi	r24, 0x64	; 100
    2ca8:	8f 93       	push	r24
    2caa:	1f 93       	push	r17
    2cac:	0f 93       	push	r16
    2cae:	df 93       	push	r29
    2cb0:	cf 93       	push	r28
    2cb2:	0e 94 96 07 	call	0xf2c	; 0xf2c <_ZN22navputter_serial_class7print_PEPKcz>
    2cb6:	8e ec       	ldi	r24, 0xCE	; 206
    2cb8:	96 e0       	ldi	r25, 0x06	; 6
    2cba:	9f 93       	push	r25
    2cbc:	8f 93       	push	r24
    2cbe:	1f 92       	push	r1
    2cc0:	86 e6       	ldi	r24, 0x66	; 102
    2cc2:	8f 93       	push	r24
    2cc4:	1f 93       	push	r17
    2cc6:	0f 93       	push	r16
    2cc8:	df 93       	push	r29
    2cca:	cf 93       	push	r28
    2ccc:	0e 94 96 07 	call	0xf2c	; 0xf2c <_ZN22navputter_serial_class7print_PEPKcz>
    2cd0:	8d b7       	in	r24, 0x3d	; 61
    2cd2:	9e b7       	in	r25, 0x3e	; 62
    2cd4:	84 96       	adiw	r24, 0x24	; 36
    2cd6:	0f b6       	in	r0, 0x3f	; 63
    2cd8:	f8 94       	cli
    2cda:	9e bf       	out	0x3e, r25	; 62
    2cdc:	0f be       	out	0x3f, r0	; 63
    2cde:	8d bf       	out	0x3d, r24	; 61
    2ce0:	8d ed       	ldi	r24, 0xDD	; 221
    2ce2:	96 e0       	ldi	r25, 0x06	; 6
    2ce4:	9f 93       	push	r25
    2ce6:	8f 93       	push	r24
    2ce8:	1f 92       	push	r1
    2cea:	8a e7       	ldi	r24, 0x7A	; 122
    2cec:	8f 93       	push	r24
    2cee:	1f 93       	push	r17
    2cf0:	0f 93       	push	r16
    2cf2:	df 93       	push	r29
    2cf4:	cf 93       	push	r28
    2cf6:	0e 94 96 07 	call	0xf2c	; 0xf2c <_ZN22navputter_serial_class7print_PEPKcz>
    2cfa:	8b ee       	ldi	r24, 0xEB	; 235
    2cfc:	96 e0       	ldi	r25, 0x06	; 6
    2cfe:	9f 93       	push	r25
    2d00:	8f 93       	push	r24
    2d02:	1f 92       	push	r1
    2d04:	88 e7       	ldi	r24, 0x78	; 120
    2d06:	8f 93       	push	r24
    2d08:	1f 93       	push	r17
    2d0a:	0f 93       	push	r16
    2d0c:	df 93       	push	r29
    2d0e:	cf 93       	push	r28
    2d10:	0e 94 96 07 	call	0xf2c	; 0xf2c <_ZN22navputter_serial_class7print_PEPKcz>
    2d14:	89 ef       	ldi	r24, 0xF9	; 249
    2d16:	96 e0       	ldi	r25, 0x06	; 6
    2d18:	9f 93       	push	r25
    2d1a:	8f 93       	push	r24
    2d1c:	1f 92       	push	r1
    2d1e:	8e e6       	ldi	r24, 0x6E	; 110
    2d20:	8f 93       	push	r24
    2d22:	1f 93       	push	r17
    2d24:	0f 93       	push	r16
    2d26:	df 93       	push	r29
    2d28:	cf 93       	push	r28
    2d2a:	0e 94 96 07 	call	0xf2c	; 0xf2c <_ZN22navputter_serial_class7print_PEPKcz>
    2d2e:	8d eb       	ldi	r24, 0xBD	; 189
    2d30:	95 e0       	ldi	r25, 0x05	; 5
    2d32:	9f 93       	push	r25
    2d34:	8f 93       	push	r24
    2d36:	1f 92       	push	r1
    2d38:	81 e7       	ldi	r24, 0x71	; 113
    2d3a:	8f 93       	push	r24
    2d3c:	1f 93       	push	r17
    2d3e:	0f 93       	push	r16
    2d40:	df 93       	push	r29
    2d42:	cf 93       	push	r28
    2d44:	0e 94 96 07 	call	0xf2c	; 0xf2c <_ZN22navputter_serial_class7print_PEPKcz>
    SERIAL.print(EOLN);
    2d48:	8d b7       	in	r24, 0x3d	; 61
    2d4a:	9e b7       	in	r25, 0x3e	; 62
    2d4c:	80 96       	adiw	r24, 0x20	; 32
    2d4e:	0f b6       	in	r0, 0x3f	; 63
    2d50:	f8 94       	cli
    2d52:	9e bf       	out	0x3e, r25	; 62
    2d54:	0f be       	out	0x3f, r0	; 63
    2d56:	8d bf       	out	0x3d, r24	; 61
    2d58:	83 e3       	ldi	r24, 0x33	; 51
    2d5a:	94 e0       	ldi	r25, 0x04	; 4
    2d5c:	9f 93       	push	r25
    2d5e:	8f 93       	push	r24
    2d60:	df 93       	push	r29
    2d62:	cf 93       	push	r28
    2d64:	0e 94 94 03 	call	0x728	; 0x728 <_ZN22navputter_serial_class5printEPKcz>
}
    2d68:	0f 90       	pop	r0
    2d6a:	0f 90       	pop	r0
    2d6c:	0f 90       	pop	r0
    2d6e:	0f 90       	pop	r0
    2d70:	df 91       	pop	r29
    2d72:	cf 91       	pop	r28
    2d74:	1f 91       	pop	r17
    2d76:	0f 91       	pop	r16
    2d78:	08 95       	ret

00002d7a <_ZN28navputter_keycode_menu_class20edit_pin_field_usageEv>:
    SERIAL.print("edit\n\r");
    2d7a:	83 e0       	ldi	r24, 0x03	; 3
    2d7c:	97 e0       	ldi	r25, 0x07	; 7
    2d7e:	9f 93       	push	r25
    2d80:	8f 93       	push	r24
    2d82:	8a e1       	ldi	r24, 0x1A	; 26
    2d84:	91 e0       	ldi	r25, 0x01	; 1
    2d86:	9f 93       	push	r25
    2d88:	8f 93       	push	r24
    2d8a:	0e 94 94 03 	call	0x728	; 0x728 <_ZN22navputter_serial_class5printEPKcz>
}
    2d8e:	0f 90       	pop	r0
    2d90:	0f 90       	pop	r0
    2d92:	0f 90       	pop	r0
    2d94:	0f 90       	pop	r0
    2d96:	08 95       	ret

00002d98 <_ZN28navputter_keycode_menu_class11prev_actionEv>:
    m_key_seq_map[ m_seq ].action = ( m_key_seq_map[ m_seq ].action == 0 ) ? KA_LAST_ACTION-1 : m_key_seq_map[ m_seq].action - 1;
    2d98:	fc 01       	movw	r30, r24
    2d9a:	e5 53       	subi	r30, 0x35	; 53
    2d9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d9e:	40 81       	ld	r20, Z
    2da0:	28 e0       	ldi	r18, 0x08	; 8
    2da2:	42 9f       	mul	r20, r18
    2da4:	a0 01       	movw	r20, r0
    2da6:	11 24       	eor	r1, r1
    2da8:	fc 01       	movw	r30, r24
    2daa:	e4 0f       	add	r30, r20
    2dac:	f5 1f       	adc	r31, r21
    2dae:	23 a9       	ldd	r18, Z+51	; 0x33
    2db0:	22 23       	and	r18, r18
    2db2:	31 f0       	breq	.+12     	; 0x2dc0 <_ZN28navputter_keycode_menu_class11prev_actionEv+0x28>
    2db4:	21 50       	subi	r18, 0x01	; 1
    2db6:	84 0f       	add	r24, r20
    2db8:	95 1f       	adc	r25, r21
    2dba:	fc 01       	movw	r30, r24
    2dbc:	23 ab       	std	Z+51, r18	; 0x33
}
    2dbe:	08 95       	ret
    m_key_seq_map[ m_seq ].action = ( m_key_seq_map[ m_seq ].action == 0 ) ? KA_LAST_ACTION-1 : m_key_seq_map[ m_seq].action - 1;
    2dc0:	2e e0       	ldi	r18, 0x0E	; 14
    2dc2:	f9 cf       	rjmp	.-14     	; 0x2db6 <_ZN28navputter_keycode_menu_class11prev_actionEv+0x1e>

00002dc4 <_ZN28navputter_keycode_menu_class11next_actionEv>:
    m_key_seq_map[ m_seq ].action++;
    2dc4:	fc 01       	movw	r30, r24
    2dc6:	e5 53       	subi	r30, 0x35	; 53
    2dc8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dca:	e0 81       	ld	r30, Z
    2dcc:	28 e0       	ldi	r18, 0x08	; 8
    2dce:	e2 9f       	mul	r30, r18
    2dd0:	f0 01       	movw	r30, r0
    2dd2:	11 24       	eor	r1, r1
    2dd4:	e8 0f       	add	r30, r24
    2dd6:	f9 1f       	adc	r31, r25
    2dd8:	83 a9       	ldd	r24, Z+51	; 0x33
    2dda:	8f 5f       	subi	r24, 0xFF	; 255
    if ( m_key_seq_map[ m_seq ].action == KA_LAST_ACTION ) m_key_seq_map[ m_seq ].action = 0;
    2ddc:	8f 30       	cpi	r24, 0x0F	; 15
    2dde:	11 f0       	breq	.+4      	; 0x2de4 <_ZN28navputter_keycode_menu_class11next_actionEv+0x20>
    m_key_seq_map[ m_seq ].action++;
    2de0:	83 ab       	std	Z+51, r24	; 0x33
    2de2:	08 95       	ret
    if ( m_key_seq_map[ m_seq ].action == KA_LAST_ACTION ) m_key_seq_map[ m_seq ].action = 0;
    2de4:	13 aa       	std	Z+51, r1	; 0x33
}
    2de6:	08 95       	ret

00002de8 <_ZN28navputter_keycode_menu_class8prev_keyEv>:
{
    2de8:	dc 01       	movw	r26, r24
    uint16_t kv = m_key_seq_map[ m_seq ].key_press[ m_edit_key ];
    2dea:	fc 01       	movw	r30, r24
    2dec:	e5 53       	subi	r30, 0x35	; 53
    2dee:	ff 4f       	sbci	r31, 0xFF	; 255
    2df0:	90 81       	ld	r25, Z
    2df2:	18 96       	adiw	r26, 0x08	; 8
    2df4:	2c 91       	ld	r18, X
    2df6:	18 97       	sbiw	r26, 0x08	; 8
    2df8:	62 2f       	mov	r22, r18
    2dfa:	70 e0       	ldi	r23, 0x00	; 0
    2dfc:	84 e0       	ldi	r24, 0x04	; 4
    2dfe:	98 9f       	mul	r25, r24
    2e00:	90 01       	movw	r18, r0
    2e02:	11 24       	eor	r1, r1
    2e04:	f9 01       	movw	r30, r18
    2e06:	e6 0f       	add	r30, r22
    2e08:	f7 1f       	adc	r31, r23
    2e0a:	31 96       	adiw	r30, 0x01	; 1
    2e0c:	ee 0f       	add	r30, r30
    2e0e:	ff 1f       	adc	r31, r31
    2e10:	ea 0f       	add	r30, r26
    2e12:	fb 1f       	adc	r31, r27
    2e14:	43 a9       	ldd	r20, Z+51	; 0x33
    2e16:	54 a9       	ldd	r21, Z+52	; 0x34
    kv = ( (kv & 0x00ff) == 0 ) ? (key_code_enum_last -1) : kv-1;
    2e18:	ca 01       	movw	r24, r20
    2e1a:	01 97       	sbiw	r24, 0x01	; 1
    2e1c:	41 11       	cpse	r20, r1
    2e1e:	02 c0       	rjmp	.+4      	; 0x2e24 <_ZN28navputter_keycode_menu_class8prev_keyEv+0x3c>
    2e20:	84 e6       	ldi	r24, 0x64	; 100
    2e22:	90 e0       	ldi	r25, 0x00	; 0
    m_key_seq_map[ m_seq ].key_press[ m_edit_key ] |= kv;
    2e24:	26 0f       	add	r18, r22
    2e26:	37 1f       	adc	r19, r23
    2e28:	2f 5f       	subi	r18, 0xFF	; 255
    2e2a:	3f 4f       	sbci	r19, 0xFF	; 255
    2e2c:	22 0f       	add	r18, r18
    2e2e:	33 1f       	adc	r19, r19
    2e30:	a2 0f       	add	r26, r18
    2e32:	b3 1f       	adc	r27, r19
    m_key_seq_map[ m_seq ].key_press[ m_edit_key ] &= 0xff00;
    2e34:	44 27       	eor	r20, r20
    m_key_seq_map[ m_seq ].key_press[ m_edit_key ] |= kv;
    2e36:	48 2b       	or	r20, r24
    2e38:	59 2b       	or	r21, r25
    2e3a:	d4 96       	adiw	r26, 0x34	; 52
    2e3c:	5c 93       	st	X, r21
    2e3e:	4e 93       	st	-X, r20
    2e40:	d3 97       	sbiw	r26, 0x33	; 51
}
    2e42:	08 95       	ret

00002e44 <_ZN28navputter_keycode_menu_class8next_keyEv>:
{
    2e44:	dc 01       	movw	r26, r24
    uint16_t kv = m_key_seq_map[ m_seq ].key_press[ m_edit_key ];
    2e46:	fc 01       	movw	r30, r24
    2e48:	e5 53       	subi	r30, 0x35	; 53
    2e4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e4c:	90 81       	ld	r25, Z
    2e4e:	18 96       	adiw	r26, 0x08	; 8
    2e50:	2c 91       	ld	r18, X
    2e52:	18 97       	sbiw	r26, 0x08	; 8
    2e54:	62 2f       	mov	r22, r18
    2e56:	70 e0       	ldi	r23, 0x00	; 0
    2e58:	84 e0       	ldi	r24, 0x04	; 4
    2e5a:	98 9f       	mul	r25, r24
    2e5c:	90 01       	movw	r18, r0
    2e5e:	11 24       	eor	r1, r1
    2e60:	f9 01       	movw	r30, r18
    2e62:	e6 0f       	add	r30, r22
    2e64:	f7 1f       	adc	r31, r23
    2e66:	31 96       	adiw	r30, 0x01	; 1
    2e68:	ee 0f       	add	r30, r30
    2e6a:	ff 1f       	adc	r31, r31
    2e6c:	ea 0f       	add	r30, r26
    2e6e:	fb 1f       	adc	r31, r27
    2e70:	43 a9       	ldd	r20, Z+51	; 0x33
    2e72:	54 a9       	ldd	r21, Z+52	; 0x34
    kv = ( (kv & 0x00ff) == (key_code_enum_last-1) ) ? 0 : kv+1;
    2e74:	ca 01       	movw	r24, r20
    2e76:	01 96       	adiw	r24, 0x01	; 1
    2e78:	44 36       	cpi	r20, 0x64	; 100
    2e7a:	11 f4       	brne	.+4      	; 0x2e80 <_ZN28navputter_keycode_menu_class8next_keyEv+0x3c>
    2e7c:	90 e0       	ldi	r25, 0x00	; 0
    2e7e:	80 e0       	ldi	r24, 0x00	; 0
    m_key_seq_map[ m_seq ].key_press[ m_edit_key ] |= kv;
    2e80:	26 0f       	add	r18, r22
    2e82:	37 1f       	adc	r19, r23
    2e84:	2f 5f       	subi	r18, 0xFF	; 255
    2e86:	3f 4f       	sbci	r19, 0xFF	; 255
    2e88:	22 0f       	add	r18, r18
    2e8a:	33 1f       	adc	r19, r19
    2e8c:	a2 0f       	add	r26, r18
    2e8e:	b3 1f       	adc	r27, r19
    m_key_seq_map[ m_seq ].key_press[ m_edit_key ] &= 0xff00;
    2e90:	44 27       	eor	r20, r20
    m_key_seq_map[ m_seq ].key_press[ m_edit_key ] |= kv;
    2e92:	48 2b       	or	r20, r24
    2e94:	59 2b       	or	r21, r25
    2e96:	d4 96       	adiw	r26, 0x34	; 52
    2e98:	5c 93       	st	X, r21
    2e9a:	4e 93       	st	-X, r20
    2e9c:	d3 97       	sbiw	r26, 0x33	; 51
}
    2e9e:	08 95       	ret

00002ea0 <_ZN28navputter_keycode_menu_class13next_modifierEv>:
{
    2ea0:	dc 01       	movw	r26, r24
    uint16_t km = m_key_seq_map[ m_seq ].key_press[ m_edit_key ] & 0xff00;
    2ea2:	fc 01       	movw	r30, r24
    2ea4:	e5 53       	subi	r30, 0x35	; 53
    2ea6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea8:	90 81       	ld	r25, Z
    2eaa:	18 96       	adiw	r26, 0x08	; 8
    2eac:	2c 91       	ld	r18, X
    2eae:	18 97       	sbiw	r26, 0x08	; 8
    2eb0:	62 2f       	mov	r22, r18
    2eb2:	70 e0       	ldi	r23, 0x00	; 0
    2eb4:	84 e0       	ldi	r24, 0x04	; 4
    2eb6:	98 9f       	mul	r25, r24
    2eb8:	90 01       	movw	r18, r0
    2eba:	11 24       	eor	r1, r1
    2ebc:	f9 01       	movw	r30, r18
    2ebe:	e6 0f       	add	r30, r22
    2ec0:	f7 1f       	adc	r31, r23
    2ec2:	31 96       	adiw	r30, 0x01	; 1
    2ec4:	ee 0f       	add	r30, r30
    2ec6:	ff 1f       	adc	r31, r31
    2ec8:	ea 0f       	add	r30, r26
    2eca:	fb 1f       	adc	r31, r27
    2ecc:	83 a9       	ldd	r24, Z+51	; 0x33
    2ece:	94 a9       	ldd	r25, Z+52	; 0x34
    2ed0:	ac 01       	movw	r20, r24
    2ed2:	44 27       	eor	r20, r20
    km = (km == 0) ? 0x0100 : km << 1;
    2ed4:	41 15       	cp	r20, r1
    2ed6:	51 05       	cpc	r21, r1
    2ed8:	81 f0       	breq	.+32     	; 0x2efa <_ZN28navputter_keycode_menu_class13next_modifierEv+0x5a>
    2eda:	44 0f       	add	r20, r20
    2edc:	55 1f       	adc	r21, r21
    m_key_seq_map[m_seq].key_press[m_edit_key] |= km;
    2ede:	26 0f       	add	r18, r22
    2ee0:	37 1f       	adc	r19, r23
    2ee2:	2f 5f       	subi	r18, 0xFF	; 255
    2ee4:	3f 4f       	sbci	r19, 0xFF	; 255
    2ee6:	22 0f       	add	r18, r18
    2ee8:	33 1f       	adc	r19, r19
    2eea:	a2 0f       	add	r26, r18
    2eec:	b3 1f       	adc	r27, r19
    2eee:	48 2b       	or	r20, r24
    2ef0:	d4 96       	adiw	r26, 0x34	; 52
    2ef2:	5c 93       	st	X, r21
    2ef4:	4e 93       	st	-X, r20
    2ef6:	d3 97       	sbiw	r26, 0x33	; 51
}
    2ef8:	08 95       	ret
    km = (km == 0) ? 0x0100 : km << 1;
    2efa:	40 e0       	ldi	r20, 0x00	; 0
    2efc:	51 e0       	ldi	r21, 0x01	; 1
    2efe:	ef cf       	rjmp	.-34     	; 0x2ede <_ZN28navputter_keycode_menu_class13next_modifierEv+0x3e>

00002f00 <_ZN28navputter_keycode_menu_class13prev_modifierEv>:
    uint16_t km = m_key_seq_map[ m_seq ].key_press[ m_edit_key ] & 0xff00;
    2f00:	fc 01       	movw	r30, r24
    2f02:	e5 53       	subi	r30, 0x35	; 53
    2f04:	ff 4f       	sbci	r31, 0xFF	; 255
    2f06:	30 81       	ld	r19, Z
    2f08:	fc 01       	movw	r30, r24
    2f0a:	20 85       	ldd	r18, Z+8	; 0x08
    2f0c:	62 2f       	mov	r22, r18
    2f0e:	70 e0       	ldi	r23, 0x00	; 0
    2f10:	f4 e0       	ldi	r31, 0x04	; 4
    2f12:	3f 9f       	mul	r19, r31
    2f14:	90 01       	movw	r18, r0
    2f16:	11 24       	eor	r1, r1
    2f18:	f9 01       	movw	r30, r18
    2f1a:	e6 0f       	add	r30, r22
    2f1c:	f7 1f       	adc	r31, r23
    2f1e:	31 96       	adiw	r30, 0x01	; 1
    2f20:	ee 0f       	add	r30, r30
    2f22:	ff 1f       	adc	r31, r31
    2f24:	e8 0f       	add	r30, r24
    2f26:	f9 1f       	adc	r31, r25
    2f28:	03 a8       	ldd	r0, Z+51	; 0x33
    2f2a:	f4 a9       	ldd	r31, Z+52	; 0x34
    2f2c:	e0 2d       	mov	r30, r0
    2f2e:	af 01       	movw	r20, r30
    2f30:	44 27       	eor	r20, r20
    km = (km == 0) ? 0x8000 : (km >> 1) & 0xff00;
    2f32:	41 15       	cp	r20, r1
    2f34:	51 05       	cpc	r21, r1
    2f36:	81 f0       	breq	.+32     	; 0x2f58 <_ZN28navputter_keycode_menu_class13prev_modifierEv+0x58>
    2f38:	56 95       	lsr	r21
    2f3a:	47 95       	ror	r20
    2f3c:	44 27       	eor	r20, r20
    m_key_seq_map[m_seq].key_press[m_edit_key] |= km;
    2f3e:	26 0f       	add	r18, r22
    2f40:	37 1f       	adc	r19, r23
    2f42:	2f 5f       	subi	r18, 0xFF	; 255
    2f44:	3f 4f       	sbci	r19, 0xFF	; 255
    2f46:	22 0f       	add	r18, r18
    2f48:	33 1f       	adc	r19, r19
    2f4a:	28 0f       	add	r18, r24
    2f4c:	39 1f       	adc	r19, r25
    2f4e:	4e 2b       	or	r20, r30
    2f50:	f9 01       	movw	r30, r18
    2f52:	54 ab       	std	Z+52, r21	; 0x34
    2f54:	43 ab       	std	Z+51, r20	; 0x33
}
    2f56:	08 95       	ret
    km = (km == 0) ? 0x8000 : (km >> 1) & 0xff00;
    2f58:	40 e0       	ldi	r20, 0x00	; 0
    2f5a:	50 e8       	ldi	r21, 0x80	; 128
    2f5c:	f0 cf       	rjmp	.-32     	; 0x2f3e <_ZN28navputter_keycode_menu_class13prev_modifierEv+0x3e>

00002f5e <_ZN28navputter_keycode_menu_class9edit_nextEv>:
{
    2f5e:	fc 01       	movw	r30, r24
    m_edit_key = ( m_edit_key == 1 ) ? 0 : 1;
    2f60:	91 e0       	ldi	r25, 0x01	; 1
    2f62:	80 85       	ldd	r24, Z+8	; 0x08
    2f64:	81 30       	cpi	r24, 0x01	; 1
    2f66:	09 f4       	brne	.+2      	; 0x2f6a <_ZN28navputter_keycode_menu_class9edit_nextEv+0xc>
    2f68:	90 e0       	ldi	r25, 0x00	; 0
    2f6a:	90 87       	std	Z+8, r25	; 0x08
    SERIAL.print_P( switch_keypress_message, m_edit_key, EOLN );
    2f6c:	23 e3       	ldi	r18, 0x33	; 51
    2f6e:	34 e0       	ldi	r19, 0x04	; 4
    2f70:	3f 93       	push	r19
    2f72:	2f 93       	push	r18
    2f74:	1f 92       	push	r1
    2f76:	9f 93       	push	r25
    2f78:	82 eb       	ldi	r24, 0xB2	; 178
    2f7a:	93 e0       	ldi	r25, 0x03	; 3
    2f7c:	9f 93       	push	r25
    2f7e:	8f 93       	push	r24
    2f80:	8a e1       	ldi	r24, 0x1A	; 26
    2f82:	91 e0       	ldi	r25, 0x01	; 1
    2f84:	9f 93       	push	r25
    2f86:	8f 93       	push	r24
    2f88:	0e 94 96 07 	call	0xf2c	; 0xf2c <_ZN22navputter_serial_class7print_PEPKcz>
}
    2f8c:	8d b7       	in	r24, 0x3d	; 61
    2f8e:	9e b7       	in	r25, 0x3e	; 62
    2f90:	08 96       	adiw	r24, 0x08	; 8
    2f92:	0f b6       	in	r0, 0x3f	; 63
    2f94:	f8 94       	cli
    2f96:	9e bf       	out	0x3e, r25	; 62
    2f98:	0f be       	out	0x3f, r0	; 63
    2f9a:	8d bf       	out	0x3d, r24	; 61
    2f9c:	08 95       	ret

00002f9e <_ZN28navputter_keycode_menu_class15format_scancodeEj>:
{
    2f9e:	cf 93       	push	r28
    2fa0:	c7 2f       	mov	r28, r23
        KEYCODE_KEY_LIST
    2fa2:	8a e0       	ldi	r24, 0x0A	; 10
    2fa4:	97 e0       	ldi	r25, 0x07	; 7
    2fa6:	66 23       	and	r22, r22
    2fa8:	09 f4       	brne	.+2      	; 0x2fac <_ZN28navputter_keycode_menu_class15format_scancodeEj+0xe>
    2faa:	8b c0       	rjmp	.+278    	; 0x30c2 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x124>
    2fac:	84 e1       	ldi	r24, 0x14	; 20
    2fae:	97 e0       	ldi	r25, 0x07	; 7
    2fb0:	64 30       	cpi	r22, 0x04	; 4
    2fb2:	09 f4       	brne	.+2      	; 0x2fb6 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x18>
    2fb4:	86 c0       	rjmp	.+268    	; 0x30c2 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x124>
    2fb6:	86 e1       	ldi	r24, 0x16	; 22
    2fb8:	97 e0       	ldi	r25, 0x07	; 7
    2fba:	65 30       	cpi	r22, 0x05	; 5
    2fbc:	09 f4       	brne	.+2      	; 0x2fc0 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x22>
    2fbe:	81 c0       	rjmp	.+258    	; 0x30c2 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x124>
    2fc0:	8e e0       	ldi	r24, 0x0E	; 14
    2fc2:	95 e0       	ldi	r25, 0x05	; 5
    2fc4:	66 30       	cpi	r22, 0x06	; 6
    2fc6:	09 f4       	brne	.+2      	; 0x2fca <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x2c>
    2fc8:	7c c0       	rjmp	.+248    	; 0x30c2 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x124>
    2fca:	82 e9       	ldi	r24, 0x92	; 146
    2fcc:	94 e0       	ldi	r25, 0x04	; 4
    2fce:	67 30       	cpi	r22, 0x07	; 7
    2fd0:	09 f4       	brne	.+2      	; 0x2fd4 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x36>
    2fd2:	77 c0       	rjmp	.+238    	; 0x30c2 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x124>
    2fd4:	8c e8       	ldi	r24, 0x8C	; 140
    2fd6:	94 e0       	ldi	r25, 0x04	; 4
    2fd8:	68 30       	cpi	r22, 0x08	; 8
    2fda:	09 f4       	brne	.+2      	; 0x2fde <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x40>
    2fdc:	72 c0       	rjmp	.+228    	; 0x30c2 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x124>
    2fde:	88 e1       	ldi	r24, 0x18	; 24
    2fe0:	97 e0       	ldi	r25, 0x07	; 7
    2fe2:	69 30       	cpi	r22, 0x09	; 9
    2fe4:	09 f4       	brne	.+2      	; 0x2fe8 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x4a>
    2fe6:	6d c0       	rjmp	.+218    	; 0x30c2 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x124>
    2fe8:	8a e1       	ldi	r24, 0x1A	; 26
    2fea:	97 e0       	ldi	r25, 0x07	; 7
    2fec:	6a 30       	cpi	r22, 0x0A	; 10
    2fee:	09 f4       	brne	.+2      	; 0x2ff2 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x54>
    2ff0:	68 c0       	rjmp	.+208    	; 0x30c2 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x124>
    2ff2:	8c e1       	ldi	r24, 0x1C	; 28
    2ff4:	97 e0       	ldi	r25, 0x07	; 7
    2ff6:	6b 30       	cpi	r22, 0x0B	; 11
    2ff8:	09 f4       	brne	.+2      	; 0x2ffc <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x5e>
    2ffa:	63 c0       	rjmp	.+198    	; 0x30c2 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x124>
    2ffc:	8e e1       	ldi	r24, 0x1E	; 30
    2ffe:	97 e0       	ldi	r25, 0x07	; 7
    3000:	6c 30       	cpi	r22, 0x0C	; 12
    3002:	09 f4       	brne	.+2      	; 0x3006 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x68>
    3004:	5e c0       	rjmp	.+188    	; 0x30c2 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x124>
    3006:	80 e2       	ldi	r24, 0x20	; 32
    3008:	97 e0       	ldi	r25, 0x07	; 7
    300a:	6d 30       	cpi	r22, 0x0D	; 13
    300c:	09 f4       	brne	.+2      	; 0x3010 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x72>
    300e:	59 c0       	rjmp	.+178    	; 0x30c2 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x124>
    3010:	82 e2       	ldi	r24, 0x22	; 34
    3012:	97 e0       	ldi	r25, 0x07	; 7
    3014:	6e 30       	cpi	r22, 0x0E	; 14
    3016:	09 f4       	brne	.+2      	; 0x301a <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x7c>
    3018:	54 c0       	rjmp	.+168    	; 0x30c2 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x124>
    301a:	84 e2       	ldi	r24, 0x24	; 36
    301c:	97 e0       	ldi	r25, 0x07	; 7
    301e:	6f 30       	cpi	r22, 0x0F	; 15
    3020:	09 f4       	brne	.+2      	; 0x3024 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x86>
    3022:	4f c0       	rjmp	.+158    	; 0x30c2 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x124>
    3024:	86 e2       	ldi	r24, 0x26	; 38
    3026:	97 e0       	ldi	r25, 0x07	; 7
    3028:	60 31       	cpi	r22, 0x10	; 16
    302a:	09 f4       	brne	.+2      	; 0x302e <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x90>
    302c:	4a c0       	rjmp	.+148    	; 0x30c2 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x124>
    302e:	87 e4       	ldi	r24, 0x47	; 71
    3030:	98 e0       	ldi	r25, 0x08	; 8
    3032:	61 31       	cpi	r22, 0x11	; 17
    3034:	09 f4       	brne	.+2      	; 0x3038 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x9a>
    3036:	45 c0       	rjmp	.+138    	; 0x30c2 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x124>
    3038:	88 e2       	ldi	r24, 0x28	; 40
    303a:	97 e0       	ldi	r25, 0x07	; 7
    303c:	62 31       	cpi	r22, 0x12	; 18
    303e:	09 f4       	brne	.+2      	; 0x3042 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0xa4>
    3040:	40 c0       	rjmp	.+128    	; 0x30c2 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x124>
    3042:	8b eb       	ldi	r24, 0xBB	; 187
    3044:	95 e0       	ldi	r25, 0x05	; 5
    3046:	63 31       	cpi	r22, 0x13	; 19
    3048:	e1 f1       	breq	.+120    	; 0x30c2 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x124>
    304a:	8a e2       	ldi	r24, 0x2A	; 42
    304c:	97 e0       	ldi	r25, 0x07	; 7
    304e:	64 31       	cpi	r22, 0x14	; 20
    3050:	c1 f1       	breq	.+112    	; 0x30c2 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x124>
    3052:	8c e2       	ldi	r24, 0x2C	; 44
    3054:	97 e0       	ldi	r25, 0x07	; 7
    3056:	65 31       	cpi	r22, 0x15	; 21
    3058:	a1 f1       	breq	.+104    	; 0x30c2 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x124>
    305a:	80 e7       	ldi	r24, 0x70	; 112
    305c:	95 e0       	ldi	r25, 0x05	; 5
    305e:	66 31       	cpi	r22, 0x16	; 22
    3060:	81 f1       	breq	.+96     	; 0x30c2 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x124>
    3062:	85 e5       	ldi	r24, 0x55	; 85
    3064:	98 e0       	ldi	r25, 0x08	; 8
    3066:	67 31       	cpi	r22, 0x17	; 23
    3068:	61 f1       	breq	.+88     	; 0x30c2 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x124>
    306a:	8e e2       	ldi	r24, 0x2E	; 46
    306c:	97 e0       	ldi	r25, 0x07	; 7
    306e:	68 31       	cpi	r22, 0x18	; 24
    3070:	41 f1       	breq	.+80     	; 0x30c2 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x124>
    3072:	87 ef       	ldi	r24, 0xF7	; 247
    3074:	96 e0       	ldi	r25, 0x06	; 6
    3076:	69 31       	cpi	r22, 0x19	; 25
    3078:	21 f1       	breq	.+72     	; 0x30c2 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x124>
    307a:	80 e5       	ldi	r24, 0x50	; 80
    307c:	98 e0       	ldi	r25, 0x08	; 8
    307e:	6a 31       	cpi	r22, 0x1A	; 26
    3080:	01 f1       	breq	.+64     	; 0x30c2 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x124>
    3082:	8a ef       	ldi	r24, 0xFA	; 250
    3084:	94 e0       	ldi	r25, 0x04	; 4
    3086:	6b 31       	cpi	r22, 0x1B	; 27
    3088:	e1 f0       	breq	.+56     	; 0x30c2 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x124>
    308a:	83 e0       	ldi	r24, 0x03	; 3
    308c:	95 e0       	ldi	r25, 0x05	; 5
    308e:	6c 31       	cpi	r22, 0x1C	; 28
    3090:	c1 f0       	breq	.+48     	; 0x30c2 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x124>
    3092:	80 e3       	ldi	r24, 0x30	; 48
    3094:	97 e0       	ldi	r25, 0x07	; 7
    3096:	6d 31       	cpi	r22, 0x1D	; 29
    3098:	a1 f0       	breq	.+40     	; 0x30c2 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x124>
    309a:	8b e7       	ldi	r24, 0x7B	; 123
    309c:	97 e0       	ldi	r25, 0x07	; 7
    309e:	6e 31       	cpi	r22, 0x1E	; 30
    30a0:	81 f0       	breq	.+32     	; 0x30c2 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x124>
    30a2:	8f e7       	ldi	r24, 0x7F	; 127
    30a4:	97 e0       	ldi	r25, 0x07	; 7
    30a6:	6f 31       	cpi	r22, 0x1F	; 31
    30a8:	61 f0       	breq	.+24     	; 0x30c2 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x124>
    30aa:	81 e6       	ldi	r24, 0x61	; 97
    30ac:	97 e0       	ldi	r25, 0x07	; 7
    30ae:	60 32       	cpi	r22, 0x20	; 32
    30b0:	41 f0       	breq	.+16     	; 0x30c2 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x124>
    30b2:	84 e6       	ldi	r24, 0x64	; 100
    30b4:	97 e0       	ldi	r25, 0x07	; 7
    30b6:	61 32       	cpi	r22, 0x21	; 33
    30b8:	21 f0       	breq	.+8      	; 0x30c2 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x124>
    30ba:	62 32       	cpi	r22, 0x22	; 34
    30bc:	c9 f5       	brne	.+114    	; 0x3130 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x192>
    30be:	87 e6       	ldi	r24, 0x67	; 103
    30c0:	97 e0       	ldi	r25, 0x07	; 7
    30c2:	9f 93       	push	r25
    30c4:	8f 93       	push	r24
    30c6:	8f e0       	ldi	r24, 0x0F	; 15
    30c8:	97 e0       	ldi	r25, 0x07	; 7
    30ca:	9f 93       	push	r25
    30cc:	8f 93       	push	r24
    30ce:	8a e1       	ldi	r24, 0x1A	; 26
    30d0:	91 e0       	ldi	r25, 0x01	; 1
    30d2:	9f 93       	push	r25
    30d4:	8f 93       	push	r24
    30d6:	0e 94 94 03 	call	0x728	; 0x728 <_ZN22navputter_serial_class5printEPKcz>
    30da:	0f 90       	pop	r0
    30dc:	0f 90       	pop	r0
    30de:	0f 90       	pop	r0
    30e0:	0f 90       	pop	r0
    30e2:	0f 90       	pop	r0
    30e4:	0f 90       	pop	r0
        KEYCODE_MODIFIER_LIST
    30e6:	6e ec       	ldi	r22, 0xCE	; 206
    30e8:	77 e0       	ldi	r23, 0x07	; 7
    30ea:	c1 fd       	sbrc	r28, 1
    30ec:	1c c0       	rjmp	.+56     	; 0x3126 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x188>
    30ee:	69 ed       	ldi	r22, 0xD9	; 217
    30f0:	77 e0       	ldi	r23, 0x07	; 7
    30f2:	c5 fd       	sbrc	r28, 5
    30f4:	18 c0       	rjmp	.+48     	; 0x3126 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x188>
    30f6:	64 ee       	ldi	r22, 0xE4	; 228
    30f8:	77 e0       	ldi	r23, 0x07	; 7
    30fa:	c0 fd       	sbrc	r28, 0
    30fc:	14 c0       	rjmp	.+40     	; 0x3126 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x188>
    30fe:	6e ee       	ldi	r22, 0xEE	; 238
    3100:	77 e0       	ldi	r23, 0x07	; 7
    3102:	c4 fd       	sbrc	r28, 4
    3104:	10 c0       	rjmp	.+32     	; 0x3126 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x188>
    3106:	68 ef       	ldi	r22, 0xF8	; 248
    3108:	77 e0       	ldi	r23, 0x07	; 7
    310a:	c2 fd       	sbrc	r28, 2
    310c:	0c c0       	rjmp	.+24     	; 0x3126 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x188>
    310e:	61 e0       	ldi	r22, 0x01	; 1
    3110:	78 e0       	ldi	r23, 0x08	; 8
    3112:	c6 fd       	sbrc	r28, 6
    3114:	08 c0       	rjmp	.+16     	; 0x3126 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x188>
    3116:	6a e0       	ldi	r22, 0x0A	; 10
    3118:	78 e0       	ldi	r23, 0x08	; 8
    311a:	c3 fd       	sbrc	r28, 3
    311c:	04 c0       	rjmp	.+8      	; 0x3126 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x188>
    311e:	c7 ff       	sbrs	r28, 7
    3120:	3f c1       	rjmp	.+638    	; 0x33a0 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x402>
    3122:	63 e1       	ldi	r22, 0x13	; 19
    3124:	78 e0       	ldi	r23, 0x08	; 8
    3126:	8a e1       	ldi	r24, 0x1A	; 26
    3128:	91 e0       	ldi	r25, 0x01	; 1
}
    312a:	cf 91       	pop	r28
        KEYCODE_MODIFIER_LIST
    312c:	0c 94 2f 03 	jmp	0x65e	; 0x65e <_ZN16usb_serial_class5writeEPKc>
        KEYCODE_KEY_LIST
    3130:	8a e6       	ldi	r24, 0x6A	; 106
    3132:	97 e0       	ldi	r25, 0x07	; 7
    3134:	63 32       	cpi	r22, 0x23	; 35
    3136:	29 f2       	breq	.-118    	; 0x30c2 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x124>
    3138:	8d e6       	ldi	r24, 0x6D	; 109
    313a:	97 e0       	ldi	r25, 0x07	; 7
    313c:	64 32       	cpi	r22, 0x24	; 36
    313e:	09 f2       	breq	.-126    	; 0x30c2 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x124>
    3140:	80 e7       	ldi	r24, 0x70	; 112
    3142:	97 e0       	ldi	r25, 0x07	; 7
    3144:	65 32       	cpi	r22, 0x25	; 37
    3146:	09 f4       	brne	.+2      	; 0x314a <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x1ac>
    3148:	bc cf       	rjmp	.-136    	; 0x30c2 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x124>
    314a:	83 e7       	ldi	r24, 0x73	; 115
    314c:	97 e0       	ldi	r25, 0x07	; 7
    314e:	66 32       	cpi	r22, 0x26	; 38
    3150:	09 f4       	brne	.+2      	; 0x3154 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x1b6>
    3152:	b7 cf       	rjmp	.-146    	; 0x30c2 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x124>
    3154:	87 e7       	ldi	r24, 0x77	; 119
    3156:	97 e0       	ldi	r25, 0x07	; 7
    3158:	67 32       	cpi	r22, 0x27	; 39
    315a:	09 f4       	brne	.+2      	; 0x315e <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x1c0>
    315c:	b2 cf       	rjmp	.-156    	; 0x30c2 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x124>
    315e:	68 32       	cpi	r22, 0x28	; 40
    3160:	19 f4       	brne	.+6      	; 0x3168 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x1ca>
    3162:	82 e3       	ldi	r24, 0x32	; 50
    3164:	97 e0       	ldi	r25, 0x07	; 7
    3166:	ad cf       	rjmp	.-166    	; 0x30c2 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x124>
    3168:	86 e3       	ldi	r24, 0x36	; 54
    316a:	97 e0       	ldi	r25, 0x07	; 7
    316c:	69 32       	cpi	r22, 0x29	; 41
    316e:	09 f4       	brne	.+2      	; 0x3172 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x1d4>
    3170:	a8 cf       	rjmp	.-176    	; 0x30c2 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x124>
    3172:	8a e3       	ldi	r24, 0x3A	; 58
    3174:	97 e0       	ldi	r25, 0x07	; 7
    3176:	6a 32       	cpi	r22, 0x2A	; 42
    3178:	09 f4       	brne	.+2      	; 0x317c <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x1de>
    317a:	a3 cf       	rjmp	.-186    	; 0x30c2 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x124>
    317c:	8d e3       	ldi	r24, 0x3D	; 61
    317e:	97 e0       	ldi	r25, 0x07	; 7
    3180:	6b 32       	cpi	r22, 0x2B	; 43
    3182:	09 f4       	brne	.+2      	; 0x3186 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x1e8>
    3184:	9e cf       	rjmp	.-196    	; 0x30c2 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x124>
    3186:	81 e4       	ldi	r24, 0x41	; 65
    3188:	97 e0       	ldi	r25, 0x07	; 7
    318a:	6c 32       	cpi	r22, 0x2C	; 44
    318c:	09 f4       	brne	.+2      	; 0x3190 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x1f2>
    318e:	99 cf       	rjmp	.-206    	; 0x30c2 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x124>
    3190:	6d 32       	cpi	r22, 0x2D	; 45
    3192:	19 f4       	brne	.+6      	; 0x319a <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x1fc>
    3194:	87 ec       	ldi	r24, 0xC7	; 199
    3196:	97 e0       	ldi	r25, 0x07	; 7
    3198:	94 cf       	rjmp	.-216    	; 0x30c2 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x124>
    319a:	85 e4       	ldi	r24, 0x45	; 69
    319c:	97 e0       	ldi	r25, 0x07	; 7
    319e:	6e 32       	cpi	r22, 0x2E	; 46
    31a0:	09 f4       	brne	.+2      	; 0x31a4 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x206>
    31a2:	8f cf       	rjmp	.-226    	; 0x30c2 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x124>
    31a4:	87 e4       	ldi	r24, 0x47	; 71
    31a6:	97 e0       	ldi	r25, 0x07	; 7
    31a8:	6f 32       	cpi	r22, 0x2F	; 47
    31aa:	09 f4       	brne	.+2      	; 0x31ae <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x210>
    31ac:	8a cf       	rjmp	.-236    	; 0x30c2 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x124>
    31ae:	89 e4       	ldi	r24, 0x49	; 73
    31b0:	97 e0       	ldi	r25, 0x07	; 7
    31b2:	60 33       	cpi	r22, 0x30	; 48
    31b4:	09 f4       	brne	.+2      	; 0x31b8 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x21a>
    31b6:	85 cf       	rjmp	.-246    	; 0x30c2 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x124>
    31b8:	8b e4       	ldi	r24, 0x4B	; 75
    31ba:	97 e0       	ldi	r25, 0x07	; 7
    31bc:	61 33       	cpi	r22, 0x31	; 49
    31be:	09 f4       	brne	.+2      	; 0x31c2 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x224>
    31c0:	80 cf       	rjmp	.-256    	; 0x30c2 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x124>
    31c2:	8d e4       	ldi	r24, 0x4D	; 77
    31c4:	97 e0       	ldi	r25, 0x07	; 7
    31c6:	62 33       	cpi	r22, 0x32	; 50
    31c8:	09 f4       	brne	.+2      	; 0x31cc <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x22e>
    31ca:	7b cf       	rjmp	.-266    	; 0x30c2 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x124>
    31cc:	8f e4       	ldi	r24, 0x4F	; 79
    31ce:	97 e0       	ldi	r25, 0x07	; 7
    31d0:	63 33       	cpi	r22, 0x33	; 51
    31d2:	09 f4       	brne	.+2      	; 0x31d6 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x238>
    31d4:	76 cf       	rjmp	.-276    	; 0x30c2 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x124>
    31d6:	81 e1       	ldi	r24, 0x11	; 17
    31d8:	98 e0       	ldi	r25, 0x08	; 8
    31da:	64 33       	cpi	r22, 0x34	; 52
    31dc:	09 f4       	brne	.+2      	; 0x31e0 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x242>
    31de:	71 cf       	rjmp	.-286    	; 0x30c2 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x124>
    31e0:	81 e5       	ldi	r24, 0x51	; 81
    31e2:	97 e0       	ldi	r25, 0x07	; 7
    31e4:	65 33       	cpi	r22, 0x35	; 53
    31e6:	09 f4       	brne	.+2      	; 0x31ea <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x24c>
    31e8:	6c cf       	rjmp	.-296    	; 0x30c2 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x124>
    31ea:	83 e5       	ldi	r24, 0x53	; 83
    31ec:	97 e0       	ldi	r25, 0x07	; 7
    31ee:	66 33       	cpi	r22, 0x36	; 54
    31f0:	09 f4       	brne	.+2      	; 0x31f4 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x256>
    31f2:	67 cf       	rjmp	.-306    	; 0x30c2 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x124>
    31f4:	8a e9       	ldi	r24, 0x9A	; 154
    31f6:	96 e0       	ldi	r25, 0x06	; 6
    31f8:	67 33       	cpi	r22, 0x37	; 55
    31fa:	09 f4       	brne	.+2      	; 0x31fe <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x260>
    31fc:	62 cf       	rjmp	.-316    	; 0x30c2 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x124>
    31fe:	68 33       	cpi	r22, 0x38	; 56
    3200:	19 f4       	brne	.+6      	; 0x3208 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x26a>
    3202:	85 e5       	ldi	r24, 0x55	; 85
    3204:	97 e0       	ldi	r25, 0x07	; 7
    3206:	5d cf       	rjmp	.-326    	; 0x30c2 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x124>
    3208:	87 e5       	ldi	r24, 0x57	; 87
    320a:	97 e0       	ldi	r25, 0x07	; 7
    320c:	69 33       	cpi	r22, 0x39	; 57
    320e:	09 f4       	brne	.+2      	; 0x3212 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x274>
    3210:	58 cf       	rjmp	.-336    	; 0x30c2 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x124>
    3212:	8a e5       	ldi	r24, 0x5A	; 90
    3214:	97 e0       	ldi	r25, 0x07	; 7
    3216:	6a 33       	cpi	r22, 0x3A	; 58
    3218:	09 f4       	brne	.+2      	; 0x321c <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x27e>
    321a:	53 cf       	rjmp	.-346    	; 0x30c2 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x124>
    321c:	8d e5       	ldi	r24, 0x5D	; 93
    321e:	97 e0       	ldi	r25, 0x07	; 7
    3220:	6b 33       	cpi	r22, 0x3B	; 59
    3222:	09 f4       	brne	.+2      	; 0x3226 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x288>
    3224:	4e cf       	rjmp	.-356    	; 0x30c2 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x124>
    3226:	80 e6       	ldi	r24, 0x60	; 96
    3228:	97 e0       	ldi	r25, 0x07	; 7
    322a:	6c 33       	cpi	r22, 0x3C	; 60
    322c:	09 f4       	brne	.+2      	; 0x3230 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x292>
    322e:	49 cf       	rjmp	.-366    	; 0x30c2 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x124>
    3230:	83 e6       	ldi	r24, 0x63	; 99
    3232:	97 e0       	ldi	r25, 0x07	; 7
    3234:	6d 33       	cpi	r22, 0x3D	; 61
    3236:	09 f4       	brne	.+2      	; 0x323a <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x29c>
    3238:	44 cf       	rjmp	.-376    	; 0x30c2 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x124>
    323a:	86 e6       	ldi	r24, 0x66	; 102
    323c:	97 e0       	ldi	r25, 0x07	; 7
    323e:	6e 33       	cpi	r22, 0x3E	; 62
    3240:	09 f4       	brne	.+2      	; 0x3244 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x2a6>
    3242:	3f cf       	rjmp	.-386    	; 0x30c2 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x124>
    3244:	89 e6       	ldi	r24, 0x69	; 105
    3246:	97 e0       	ldi	r25, 0x07	; 7
    3248:	6f 33       	cpi	r22, 0x3F	; 63
    324a:	09 f4       	brne	.+2      	; 0x324e <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x2b0>
    324c:	3a cf       	rjmp	.-396    	; 0x30c2 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x124>
    324e:	8c e6       	ldi	r24, 0x6C	; 108
    3250:	97 e0       	ldi	r25, 0x07	; 7
    3252:	60 34       	cpi	r22, 0x40	; 64
    3254:	09 f4       	brne	.+2      	; 0x3258 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x2ba>
    3256:	35 cf       	rjmp	.-406    	; 0x30c2 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x124>
    3258:	8f e6       	ldi	r24, 0x6F	; 111
    325a:	97 e0       	ldi	r25, 0x07	; 7
    325c:	61 34       	cpi	r22, 0x41	; 65
    325e:	09 f4       	brne	.+2      	; 0x3262 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x2c4>
    3260:	30 cf       	rjmp	.-416    	; 0x30c2 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x124>
    3262:	82 e7       	ldi	r24, 0x72	; 114
    3264:	97 e0       	ldi	r25, 0x07	; 7
    3266:	62 34       	cpi	r22, 0x42	; 66
    3268:	09 f4       	brne	.+2      	; 0x326c <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x2ce>
    326a:	2b cf       	rjmp	.-426    	; 0x30c2 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x124>
    326c:	85 e7       	ldi	r24, 0x75	; 117
    326e:	97 e0       	ldi	r25, 0x07	; 7
    3270:	63 34       	cpi	r22, 0x43	; 67
    3272:	09 f4       	brne	.+2      	; 0x3276 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x2d8>
    3274:	26 cf       	rjmp	.-436    	; 0x30c2 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x124>
    3276:	89 e7       	ldi	r24, 0x79	; 121
    3278:	97 e0       	ldi	r25, 0x07	; 7
    327a:	64 34       	cpi	r22, 0x44	; 68
    327c:	09 f4       	brne	.+2      	; 0x3280 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x2e2>
    327e:	21 cf       	rjmp	.-446    	; 0x30c2 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x124>
    3280:	8d e7       	ldi	r24, 0x7D	; 125
    3282:	97 e0       	ldi	r25, 0x07	; 7
    3284:	65 34       	cpi	r22, 0x45	; 69
    3286:	09 f4       	brne	.+2      	; 0x328a <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x2ec>
    3288:	1c cf       	rjmp	.-456    	; 0x30c2 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x124>
    328a:	6a 34       	cpi	r22, 0x4A	; 74
    328c:	19 f4       	brne	.+6      	; 0x3294 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x2f6>
    328e:	81 e8       	ldi	r24, 0x81	; 129
    3290:	97 e0       	ldi	r25, 0x07	; 7
    3292:	17 cf       	rjmp	.-466    	; 0x30c2 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x124>
    3294:	6b 34       	cpi	r22, 0x4B	; 75
    3296:	19 f4       	brne	.+6      	; 0x329e <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x300>
    3298:	86 e8       	ldi	r24, 0x86	; 134
    329a:	97 e0       	ldi	r25, 0x07	; 7
    329c:	12 cf       	rjmp	.-476    	; 0x30c2 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x124>
    329e:	6c 34       	cpi	r22, 0x4C	; 76
    32a0:	19 f4       	brne	.+6      	; 0x32a8 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x30a>
    32a2:	8b e8       	ldi	r24, 0x8B	; 139
    32a4:	97 e0       	ldi	r25, 0x07	; 7
    32a6:	0d cf       	rjmp	.-486    	; 0x30c2 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x124>
    32a8:	6d 34       	cpi	r22, 0x4D	; 77
    32aa:	19 f4       	brne	.+6      	; 0x32b2 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x314>
    32ac:	8f e8       	ldi	r24, 0x8F	; 143
    32ae:	97 e0       	ldi	r25, 0x07	; 7
    32b0:	08 cf       	rjmp	.-496    	; 0x30c2 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x124>
    32b2:	6e 34       	cpi	r22, 0x4E	; 78
    32b4:	19 f4       	brne	.+6      	; 0x32bc <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x31e>
    32b6:	83 e9       	ldi	r24, 0x93	; 147
    32b8:	97 e0       	ldi	r25, 0x07	; 7
    32ba:	03 cf       	rjmp	.-506    	; 0x30c2 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x124>
    32bc:	6f 34       	cpi	r22, 0x4F	; 79
    32be:	19 f4       	brne	.+6      	; 0x32c6 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x328>
    32c0:	88 e9       	ldi	r24, 0x98	; 152
    32c2:	97 e0       	ldi	r25, 0x07	; 7
    32c4:	fe ce       	rjmp	.-516    	; 0x30c2 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x124>
    32c6:	60 35       	cpi	r22, 0x50	; 80
    32c8:	19 f4       	brne	.+6      	; 0x32d0 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x332>
    32ca:	8b e9       	ldi	r24, 0x9B	; 155
    32cc:	97 e0       	ldi	r25, 0x07	; 7
    32ce:	f9 ce       	rjmp	.-526    	; 0x30c2 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x124>
    32d0:	61 35       	cpi	r22, 0x51	; 81
    32d2:	19 f4       	brne	.+6      	; 0x32da <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x33c>
    32d4:	85 e9       	ldi	r24, 0x95	; 149
    32d6:	97 e0       	ldi	r25, 0x07	; 7
    32d8:	f4 ce       	rjmp	.-536    	; 0x30c2 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x124>
    32da:	62 35       	cpi	r22, 0x52	; 82
    32dc:	19 f4       	brne	.+6      	; 0x32e4 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x346>
    32de:	88 e8       	ldi	r24, 0x88	; 136
    32e0:	97 e0       	ldi	r25, 0x07	; 7
    32e2:	ef ce       	rjmp	.-546    	; 0x30c2 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x124>
    32e4:	8e e9       	ldi	r24, 0x9E	; 158
    32e6:	97 e0       	ldi	r25, 0x07	; 7
    32e8:	63 35       	cpi	r22, 0x53	; 83
    32ea:	09 f4       	brne	.+2      	; 0x32ee <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x350>
    32ec:	ea ce       	rjmp	.-556    	; 0x30c2 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x124>
    32ee:	64 35       	cpi	r22, 0x54	; 84
    32f0:	09 f4       	brne	.+2      	; 0x32f4 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x356>
    32f2:	87 cf       	rjmp	.-242    	; 0x3202 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x264>
    32f4:	83 ea       	ldi	r24, 0xA3	; 163
    32f6:	97 e0       	ldi	r25, 0x07	; 7
    32f8:	65 35       	cpi	r22, 0x55	; 85
    32fa:	09 f4       	brne	.+2      	; 0x32fe <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x360>
    32fc:	e2 ce       	rjmp	.-572    	; 0x30c2 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x124>
    32fe:	66 35       	cpi	r22, 0x56	; 86
    3300:	09 f4       	brne	.+2      	; 0x3304 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x366>
    3302:	48 cf       	rjmp	.-368    	; 0x3194 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x1f6>
    3304:	82 ec       	ldi	r24, 0xC2	; 194
    3306:	97 e0       	ldi	r25, 0x07	; 7
    3308:	67 35       	cpi	r22, 0x57	; 87
    330a:	09 f4       	brne	.+2      	; 0x330e <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x370>
    330c:	da ce       	rjmp	.-588    	; 0x30c2 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x124>
    330e:	68 35       	cpi	r22, 0x58	; 88
    3310:	09 f4       	brne	.+2      	; 0x3314 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x376>
    3312:	27 cf       	rjmp	.-434    	; 0x3162 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x1c4>
    3314:	69 35       	cpi	r22, 0x59	; 89
    3316:	51 f2       	breq	.-108    	; 0x32ac <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x30e>
    3318:	6a 35       	cpi	r22, 0x5A	; 90
    331a:	e1 f2       	breq	.-72     	; 0x32d4 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x336>
    331c:	6b 35       	cpi	r22, 0x5B	; 91
    331e:	59 f2       	breq	.-106    	; 0x32b6 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x318>
    3320:	6c 35       	cpi	r22, 0x5C	; 92
    3322:	99 f2       	breq	.-90     	; 0x32ca <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x32c>
    3324:	6d 35       	cpi	r22, 0x5D	; 93
    3326:	09 f4       	brne	.+2      	; 0x332a <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x38c>
    3328:	ca ce       	rjmp	.-620    	; 0x30be <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x120>
    332a:	6e 35       	cpi	r22, 0x5E	; 94
    332c:	49 f2       	breq	.-110    	; 0x32c0 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x322>
    332e:	6f 35       	cpi	r22, 0x5F	; 95
    3330:	09 f4       	brne	.+2      	; 0x3334 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x396>
    3332:	ad cf       	rjmp	.-166    	; 0x328e <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x2f0>
    3334:	60 36       	cpi	r22, 0x60	; 96
    3336:	99 f2       	breq	.-90     	; 0x32de <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x340>
    3338:	61 36       	cpi	r22, 0x61	; 97
    333a:	09 f4       	brne	.+2      	; 0x333e <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x3a0>
    333c:	ad cf       	rjmp	.-166    	; 0x3298 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x2fa>
    333e:	85 ea       	ldi	r24, 0xA5	; 165
    3340:	97 e0       	ldi	r25, 0x07	; 7
    3342:	62 36       	cpi	r22, 0x62	; 98
    3344:	09 f4       	brne	.+2      	; 0x3348 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x3aa>
    3346:	bd ce       	rjmp	.-646    	; 0x30c2 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x124>
    3348:	63 36       	cpi	r22, 0x63	; 99
    334a:	09 f4       	brne	.+2      	; 0x334e <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x3b0>
    334c:	aa cf       	rjmp	.-172    	; 0x32a2 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x304>
    334e:	89 ea       	ldi	r24, 0xA9	; 169
    3350:	97 e0       	ldi	r25, 0x07	; 7
    3352:	68 3e       	cpi	r22, 0xE8	; 232
    3354:	09 f4       	brne	.+2      	; 0x3358 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x3ba>
    3356:	b5 ce       	rjmp	.-662    	; 0x30c2 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x124>
    3358:	8e ea       	ldi	r24, 0xAE	; 174
    335a:	97 e0       	ldi	r25, 0x07	; 7
    335c:	69 3e       	cpi	r22, 0xE9	; 233
    335e:	09 f4       	brne	.+2      	; 0x3362 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x3c4>
    3360:	b0 ce       	rjmp	.-672    	; 0x30c2 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x124>
    3362:	83 eb       	ldi	r24, 0xB3	; 179
    3364:	97 e0       	ldi	r25, 0x07	; 7
    3366:	6a 3e       	cpi	r22, 0xEA	; 234
    3368:	09 f4       	brne	.+2      	; 0x336c <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x3ce>
    336a:	ab ce       	rjmp	.-682    	; 0x30c2 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x124>
    336c:	86 eb       	ldi	r24, 0xB6	; 182
    336e:	97 e0       	ldi	r25, 0x07	; 7
    3370:	6b 3e       	cpi	r22, 0xEB	; 235
    3372:	09 f4       	brne	.+2      	; 0x3376 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x3d8>
    3374:	a6 ce       	rjmp	.-692    	; 0x30c2 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x124>
    3376:	89 eb       	ldi	r24, 0xB9	; 185
    3378:	97 e0       	ldi	r25, 0x07	; 7
    337a:	6c 3e       	cpi	r22, 0xEC	; 236
    337c:	09 f4       	brne	.+2      	; 0x3380 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x3e2>
    337e:	a1 ce       	rjmp	.-702    	; 0x30c2 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x124>
    3380:	8f eb       	ldi	r24, 0xBF	; 191
    3382:	97 e0       	ldi	r25, 0x07	; 7
    3384:	6d 3e       	cpi	r22, 0xED	; 237
    3386:	09 f4       	brne	.+2      	; 0x338a <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x3ec>
    3388:	9c ce       	rjmp	.-712    	; 0x30c2 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x124>
    338a:	84 ec       	ldi	r24, 0xC4	; 196
    338c:	97 e0       	ldi	r25, 0x07	; 7
    338e:	6e 3e       	cpi	r22, 0xEE	; 238
    3390:	09 f4       	brne	.+2      	; 0x3394 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x3f6>
    3392:	97 ce       	rjmp	.-722    	; 0x30c2 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x124>
    3394:	6f 3e       	cpi	r22, 0xEF	; 239
    3396:	09 f0       	breq	.+2      	; 0x339a <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x3fc>
    3398:	a6 ce       	rjmp	.-692    	; 0x30e6 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x148>
    339a:	89 ec       	ldi	r24, 0xC9	; 201
    339c:	97 e0       	ldi	r25, 0x07	; 7
    339e:	91 ce       	rjmp	.-734    	; 0x30c2 <_ZN28navputter_keycode_menu_class15format_scancodeEj+0x124>
}
    33a0:	cf 91       	pop	r28
    33a2:	08 95       	ret

000033a4 <_ZN28navputter_keycode_menu_class17format_key_actionEh>:
{
    33a4:	df 92       	push	r13
    33a6:	ef 92       	push	r14
    33a8:	ff 92       	push	r15
    33aa:	0f 93       	push	r16
    33ac:	1f 93       	push	r17
    33ae:	cf 93       	push	r28
    33b0:	df 93       	push	r29
    33b2:	7c 01       	movw	r14, r24
    action = m_key_seq_map[ seq ].action;
    33b4:	88 e0       	ldi	r24, 0x08	; 8
    33b6:	68 9f       	mul	r22, r24
    33b8:	80 01       	movw	r16, r0
    33ba:	11 24       	eor	r1, r1
    33bc:	f7 01       	movw	r30, r14
    33be:	e0 0f       	add	r30, r16
    33c0:	f1 1f       	adc	r31, r17
    33c2:	d3 a8       	ldd	r13, Z+51	; 0x33
    33c4:	cd 2d       	mov	r28, r13
    33c6:	d0 e0       	ldi	r29, 0x00	; 0
    KEY_ACTION_LIST
    33c8:	20 97       	sbiw	r28, 0x00	; 0
    33ca:	09 f0       	breq	.+2      	; 0x33ce <_ZN28navputter_keycode_menu_class17format_key_actionEh+0x2a>
    33cc:	ce c0       	rjmp	.+412    	; 0x356a <_ZN28navputter_keycode_menu_class17format_key_actionEh+0x1c6>
    33ce:	83 e3       	ldi	r24, 0x33	; 51
    33d0:	94 e0       	ldi	r25, 0x04	; 4
    33d2:	9f 93       	push	r25
    33d4:	8f 93       	push	r24
    33d6:	8e e9       	ldi	r24, 0x9E	; 158
    33d8:	93 e0       	ldi	r25, 0x03	; 3
    33da:	9f 93       	push	r25
    33dc:	8f 93       	push	r24
    33de:	8a ea       	ldi	r24, 0xAA	; 170
    33e0:	93 e0       	ldi	r25, 0x03	; 3
    33e2:	9f 93       	push	r25
    33e4:	8f 93       	push	r24
    33e6:	8c e1       	ldi	r24, 0x1C	; 28
    33e8:	98 e0       	ldi	r25, 0x08	; 8
    33ea:	9f 93       	push	r25
    33ec:	8f 93       	push	r24
    33ee:	8a e1       	ldi	r24, 0x1A	; 26
    33f0:	91 e0       	ldi	r25, 0x01	; 1
    33f2:	9f 93       	push	r25
    33f4:	8f 93       	push	r24
    33f6:	0e 94 94 03 	call	0x728	; 0x728 <_ZN22navputter_serial_class5printEPKcz>
    33fa:	ed b7       	in	r30, 0x3d	; 61
    33fc:	fe b7       	in	r31, 0x3e	; 62
    33fe:	3a 96       	adiw	r30, 0x0a	; 10
    3400:	0f b6       	in	r0, 0x3f	; 63
    3402:	f8 94       	cli
    3404:	fe bf       	out	0x3e, r31	; 62
    3406:	0f be       	out	0x3f, r0	; 63
    3408:	ed bf       	out	0x3d, r30	; 61
    340a:	c5 30       	cpi	r28, 0x05	; 5
    340c:	d1 05       	cpc	r29, r1
    340e:	09 f0       	breq	.+2      	; 0x3412 <_ZN28navputter_keycode_menu_class17format_key_actionEh+0x6e>
    3410:	f0 c0       	rjmp	.+480    	; 0x35f2 <_ZN28navputter_keycode_menu_class17format_key_actionEh+0x24e>
    3412:	83 e3       	ldi	r24, 0x33	; 51
    3414:	94 e0       	ldi	r25, 0x04	; 4
    3416:	9f 93       	push	r25
    3418:	8f 93       	push	r24
    341a:	81 e3       	ldi	r24, 0x31	; 49
    341c:	93 e0       	ldi	r25, 0x03	; 3
    341e:	9f 93       	push	r25
    3420:	8f 93       	push	r24
    3422:	8d e3       	ldi	r24, 0x3D	; 61
    3424:	93 e0       	ldi	r25, 0x03	; 3
    3426:	9f 93       	push	r25
    3428:	8f 93       	push	r24
    342a:	8c e1       	ldi	r24, 0x1C	; 28
    342c:	98 e0       	ldi	r25, 0x08	; 8
    342e:	9f 93       	push	r25
    3430:	8f 93       	push	r24
    3432:	8a e1       	ldi	r24, 0x1A	; 26
    3434:	91 e0       	ldi	r25, 0x01	; 1
    3436:	9f 93       	push	r25
    3438:	8f 93       	push	r24
    343a:	0e 94 94 03 	call	0x728	; 0x728 <_ZN22navputter_serial_class5printEPKcz>
    343e:	8d b7       	in	r24, 0x3d	; 61
    3440:	9e b7       	in	r25, 0x3e	; 62
    3442:	0a 96       	adiw	r24, 0x0a	; 10
    3444:	0f b6       	in	r0, 0x3f	; 63
    3446:	f8 94       	cli
    3448:	9e bf       	out	0x3e, r25	; 62
    344a:	0f be       	out	0x3f, r0	; 63
    344c:	8d bf       	out	0x3d, r24	; 61
    344e:	ca 30       	cpi	r28, 0x0A	; 10
    3450:	d1 05       	cpc	r29, r1
    3452:	09 f0       	breq	.+2      	; 0x3456 <_ZN28navputter_keycode_menu_class17format_key_actionEh+0xb2>
    3454:	f0 c0       	rjmp	.+480    	; 0x3636 <_ZN28navputter_keycode_menu_class17format_key_actionEh+0x292>
    3456:	83 e3       	ldi	r24, 0x33	; 51
    3458:	94 e0       	ldi	r25, 0x04	; 4
    345a:	9f 93       	push	r25
    345c:	8f 93       	push	r24
    345e:	8d e9       	ldi	r24, 0x9D	; 157
    3460:	92 e0       	ldi	r25, 0x02	; 2
    3462:	9f 93       	push	r25
    3464:	8f 93       	push	r24
    3466:	86 eb       	ldi	r24, 0xB6	; 182
    3468:	92 e0       	ldi	r25, 0x02	; 2
    346a:	9f 93       	push	r25
    346c:	8f 93       	push	r24
    346e:	8c e1       	ldi	r24, 0x1C	; 28
    3470:	98 e0       	ldi	r25, 0x08	; 8
    3472:	9f 93       	push	r25
    3474:	8f 93       	push	r24
    3476:	8a e1       	ldi	r24, 0x1A	; 26
    3478:	91 e0       	ldi	r25, 0x01	; 1
    347a:	9f 93       	push	r25
    347c:	8f 93       	push	r24
    347e:	0e 94 94 03 	call	0x728	; 0x728 <_ZN22navputter_serial_class5printEPKcz>
    3482:	ed b7       	in	r30, 0x3d	; 61
    3484:	fe b7       	in	r31, 0x3e	; 62
    3486:	3a 96       	adiw	r30, 0x0a	; 10
    3488:	0f b6       	in	r0, 0x3f	; 63
    348a:	f8 94       	cli
    348c:	fe bf       	out	0x3e, r31	; 62
    348e:	0f be       	out	0x3f, r0	; 63
    3490:	ed bf       	out	0x3d, r30	; 61
    switch( action )
    3492:	f1 e0       	ldi	r31, 0x01	; 1
    3494:	df 16       	cp	r13, r31
    3496:	09 f4       	brne	.+2      	; 0x349a <_ZN28navputter_keycode_menu_class17format_key_actionEh+0xf6>
    3498:	0a c2       	rjmp	.+1044   	; 0x38ae <_ZN28navputter_keycode_menu_class17format_key_actionEh+0x50a>
    349a:	82 e0       	ldi	r24, 0x02	; 2
    349c:	d8 12       	cpse	r13, r24
    349e:	54 c1       	rjmp	.+680    	; 0x3748 <_ZN28navputter_keycode_menu_class17format_key_actionEh+0x3a4>
                _SPECIAL_ACTION_LIST_
    34a0:	f7 01       	movw	r30, r14
    34a2:	e0 0f       	add	r30, r16
    34a4:	f1 1f       	adc	r31, r17
    34a6:	85 a9       	ldd	r24, Z+53	; 0x35
    34a8:	96 a9       	ldd	r25, Z+54	; 0x36
    34aa:	89 2b       	or	r24, r25
    34ac:	d1 f4       	brne	.+52     	; 0x34e2 <_ZN28navputter_keycode_menu_class17format_key_actionEh+0x13e>
    34ae:	83 e3       	ldi	r24, 0x33	; 51
    34b0:	94 e0       	ldi	r25, 0x04	; 4
    34b2:	9f 93       	push	r25
    34b4:	8f 93       	push	r24
    34b6:	86 e1       	ldi	r24, 0x16	; 22
    34b8:	92 e0       	ldi	r25, 0x02	; 2
    34ba:	9f 93       	push	r25
    34bc:	8f 93       	push	r24
    34be:	81 e2       	ldi	r24, 0x21	; 33
    34c0:	98 e0       	ldi	r25, 0x08	; 8
    34c2:	9f 93       	push	r25
    34c4:	8f 93       	push	r24
    34c6:	8a e1       	ldi	r24, 0x1A	; 26
    34c8:	91 e0       	ldi	r25, 0x01	; 1
    34ca:	9f 93       	push	r25
    34cc:	8f 93       	push	r24
    34ce:	0e 94 94 03 	call	0x728	; 0x728 <_ZN22navputter_serial_class5printEPKcz>
    34d2:	ed b7       	in	r30, 0x3d	; 61
    34d4:	fe b7       	in	r31, 0x3e	; 62
    34d6:	38 96       	adiw	r30, 0x08	; 8
    34d8:	0f b6       	in	r0, 0x3f	; 63
    34da:	f8 94       	cli
    34dc:	fe bf       	out	0x3e, r31	; 62
    34de:	0f be       	out	0x3f, r0	; 63
    34e0:	ed bf       	out	0x3d, r30	; 61
    34e2:	f7 01       	movw	r30, r14
    34e4:	e0 0f       	add	r30, r16
    34e6:	f1 1f       	adc	r31, r17
    34e8:	85 a9       	ldd	r24, Z+53	; 0x35
    34ea:	96 a9       	ldd	r25, Z+54	; 0x36
    34ec:	01 97       	sbiw	r24, 0x01	; 1
    34ee:	d1 f4       	brne	.+52     	; 0x3524 <_ZN28navputter_keycode_menu_class17format_key_actionEh+0x180>
    34f0:	83 e3       	ldi	r24, 0x33	; 51
    34f2:	94 e0       	ldi	r25, 0x04	; 4
    34f4:	9f 93       	push	r25
    34f6:	8f 93       	push	r24
    34f8:	85 e0       	ldi	r24, 0x05	; 5
    34fa:	92 e0       	ldi	r25, 0x02	; 2
    34fc:	9f 93       	push	r25
    34fe:	8f 93       	push	r24
    3500:	81 e2       	ldi	r24, 0x21	; 33
    3502:	98 e0       	ldi	r25, 0x08	; 8
    3504:	9f 93       	push	r25
    3506:	8f 93       	push	r24
    3508:	8a e1       	ldi	r24, 0x1A	; 26
    350a:	91 e0       	ldi	r25, 0x01	; 1
    350c:	9f 93       	push	r25
    350e:	8f 93       	push	r24
    3510:	0e 94 94 03 	call	0x728	; 0x728 <_ZN22navputter_serial_class5printEPKcz>
    3514:	8d b7       	in	r24, 0x3d	; 61
    3516:	9e b7       	in	r25, 0x3e	; 62
    3518:	08 96       	adiw	r24, 0x08	; 8
    351a:	0f b6       	in	r0, 0x3f	; 63
    351c:	f8 94       	cli
    351e:	9e bf       	out	0x3e, r25	; 62
    3520:	0f be       	out	0x3f, r0	; 63
    3522:	8d bf       	out	0x3d, r24	; 61
    3524:	0e 0d       	add	r16, r14
    3526:	1f 1d       	adc	r17, r15
    3528:	f8 01       	movw	r30, r16
    352a:	85 a9       	ldd	r24, Z+53	; 0x35
    352c:	96 a9       	ldd	r25, Z+54	; 0x36
    352e:	02 97       	sbiw	r24, 0x02	; 2
    3530:	09 f0       	breq	.+2      	; 0x3534 <_ZN28navputter_keycode_menu_class17format_key_actionEh+0x190>
    3532:	0a c1       	rjmp	.+532    	; 0x3748 <_ZN28navputter_keycode_menu_class17format_key_actionEh+0x3a4>
    3534:	83 e3       	ldi	r24, 0x33	; 51
    3536:	94 e0       	ldi	r25, 0x04	; 4
    3538:	9f 93       	push	r25
    353a:	8f 93       	push	r24
    353c:	8c ef       	ldi	r24, 0xFC	; 252
    353e:	91 e0       	ldi	r25, 0x01	; 1
    3540:	9f 93       	push	r25
    3542:	8f 93       	push	r24
    3544:	81 e2       	ldi	r24, 0x21	; 33
    3546:	98 e0       	ldi	r25, 0x08	; 8
    3548:	9f 93       	push	r25
    354a:	8f 93       	push	r24
    354c:	8a e1       	ldi	r24, 0x1A	; 26
    354e:	91 e0       	ldi	r25, 0x01	; 1
    3550:	9f 93       	push	r25
    3552:	8f 93       	push	r24
    3554:	0e 94 94 03 	call	0x728	; 0x728 <_ZN22navputter_serial_class5printEPKcz>
    3558:	8d b7       	in	r24, 0x3d	; 61
    355a:	9e b7       	in	r25, 0x3e	; 62
    355c:	08 96       	adiw	r24, 0x08	; 8
    355e:	0f b6       	in	r0, 0x3f	; 63
    3560:	f8 94       	cli
    3562:	9e bf       	out	0x3e, r25	; 62
    3564:	0f be       	out	0x3f, r0	; 63
    3566:	8d bf       	out	0x3d, r24	; 61
}
    3568:	ef c0       	rjmp	.+478    	; 0x3748 <_ZN28navputter_keycode_menu_class17format_key_actionEh+0x3a4>
    KEY_ACTION_LIST
    356a:	c1 30       	cpi	r28, 0x01	; 1
    356c:	d1 05       	cpc	r29, r1
    356e:	f9 f4       	brne	.+62     	; 0x35ae <_ZN28navputter_keycode_menu_class17format_key_actionEh+0x20a>
    3570:	83 e3       	ldi	r24, 0x33	; 51
    3572:	94 e0       	ldi	r25, 0x04	; 4
    3574:	9f 93       	push	r25
    3576:	8f 93       	push	r24
    3578:	86 e8       	ldi	r24, 0x86	; 134
    357a:	93 e0       	ldi	r25, 0x03	; 3
    357c:	9f 93       	push	r25
    357e:	8f 93       	push	r24
    3580:	84 e9       	ldi	r24, 0x94	; 148
    3582:	93 e0       	ldi	r25, 0x03	; 3
    3584:	9f 93       	push	r25
    3586:	8f 93       	push	r24
    3588:	8c e1       	ldi	r24, 0x1C	; 28
    358a:	98 e0       	ldi	r25, 0x08	; 8
    358c:	9f 93       	push	r25
    358e:	8f 93       	push	r24
    3590:	8a e1       	ldi	r24, 0x1A	; 26
    3592:	91 e0       	ldi	r25, 0x01	; 1
    3594:	9f 93       	push	r25
    3596:	8f 93       	push	r24
    3598:	0e 94 94 03 	call	0x728	; 0x728 <_ZN22navputter_serial_class5printEPKcz>
    359c:	8d b7       	in	r24, 0x3d	; 61
    359e:	9e b7       	in	r25, 0x3e	; 62
    35a0:	0a 96       	adiw	r24, 0x0a	; 10
    35a2:	0f b6       	in	r0, 0x3f	; 63
    35a4:	f8 94       	cli
    35a6:	9e bf       	out	0x3e, r25	; 62
    35a8:	0f be       	out	0x3f, r0	; 63
    35aa:	8d bf       	out	0x3d, r24	; 61
    35ac:	2e cf       	rjmp	.-420    	; 0x340a <_ZN28navputter_keycode_menu_class17format_key_actionEh+0x66>
    35ae:	c2 30       	cpi	r28, 0x02	; 2
    35b0:	d1 05       	cpc	r29, r1
    35b2:	09 f0       	breq	.+2      	; 0x35b6 <_ZN28navputter_keycode_menu_class17format_key_actionEh+0x212>
    35b4:	63 c0       	rjmp	.+198    	; 0x367c <_ZN28navputter_keycode_menu_class17format_key_actionEh+0x2d8>
    35b6:	83 e3       	ldi	r24, 0x33	; 51
    35b8:	94 e0       	ldi	r25, 0x04	; 4
    35ba:	9f 93       	push	r25
    35bc:	8f 93       	push	r24
    35be:	8e e6       	ldi	r24, 0x6E	; 110
    35c0:	93 e0       	ldi	r25, 0x03	; 3
    35c2:	9f 93       	push	r25
    35c4:	8f 93       	push	r24
    35c6:	8e e7       	ldi	r24, 0x7E	; 126
    35c8:	93 e0       	ldi	r25, 0x03	; 3
    35ca:	9f 93       	push	r25
    35cc:	8f 93       	push	r24
    35ce:	8c e1       	ldi	r24, 0x1C	; 28
    35d0:	98 e0       	ldi	r25, 0x08	; 8
    35d2:	9f 93       	push	r25
    35d4:	8f 93       	push	r24
    35d6:	8a e1       	ldi	r24, 0x1A	; 26
    35d8:	91 e0       	ldi	r25, 0x01	; 1
    35da:	9f 93       	push	r25
    35dc:	8f 93       	push	r24
    35de:	0e 94 94 03 	call	0x728	; 0x728 <_ZN22navputter_serial_class5printEPKcz>
    35e2:	ed b7       	in	r30, 0x3d	; 61
    35e4:	fe b7       	in	r31, 0x3e	; 62
    35e6:	3a 96       	adiw	r30, 0x0a	; 10
    35e8:	0f b6       	in	r0, 0x3f	; 63
    35ea:	f8 94       	cli
    35ec:	fe bf       	out	0x3e, r31	; 62
    35ee:	0f be       	out	0x3f, r0	; 63
    35f0:	ed bf       	out	0x3d, r30	; 61
    35f2:	c6 30       	cpi	r28, 0x06	; 6
    35f4:	d1 05       	cpc	r29, r1
    35f6:	09 f0       	breq	.+2      	; 0x35fa <_ZN28navputter_keycode_menu_class17format_key_actionEh+0x256>
    35f8:	63 c0       	rjmp	.+198    	; 0x36c0 <_ZN28navputter_keycode_menu_class17format_key_actionEh+0x31c>
    35fa:	83 e3       	ldi	r24, 0x33	; 51
    35fc:	94 e0       	ldi	r25, 0x04	; 4
    35fe:	9f 93       	push	r25
    3600:	8f 93       	push	r24
    3602:	8b e1       	ldi	r24, 0x1B	; 27
    3604:	93 e0       	ldi	r25, 0x03	; 3
    3606:	9f 93       	push	r25
    3608:	8f 93       	push	r24
    360a:	88 e2       	ldi	r24, 0x28	; 40
    360c:	93 e0       	ldi	r25, 0x03	; 3
    360e:	9f 93       	push	r25
    3610:	8f 93       	push	r24
    3612:	8c e1       	ldi	r24, 0x1C	; 28
    3614:	98 e0       	ldi	r25, 0x08	; 8
    3616:	9f 93       	push	r25
    3618:	8f 93       	push	r24
    361a:	8a e1       	ldi	r24, 0x1A	; 26
    361c:	91 e0       	ldi	r25, 0x01	; 1
    361e:	9f 93       	push	r25
    3620:	8f 93       	push	r24
    3622:	0e 94 94 03 	call	0x728	; 0x728 <_ZN22navputter_serial_class5printEPKcz>
    3626:	ed b7       	in	r30, 0x3d	; 61
    3628:	fe b7       	in	r31, 0x3e	; 62
    362a:	3a 96       	adiw	r30, 0x0a	; 10
    362c:	0f b6       	in	r0, 0x3f	; 63
    362e:	f8 94       	cli
    3630:	fe bf       	out	0x3e, r31	; 62
    3632:	0f be       	out	0x3f, r0	; 63
    3634:	ed bf       	out	0x3d, r30	; 61
    3636:	cb 30       	cpi	r28, 0x0B	; 11
    3638:	d1 05       	cpc	r29, r1
    363a:	09 f0       	breq	.+2      	; 0x363e <_ZN28navputter_keycode_menu_class17format_key_actionEh+0x29a>
    363c:	63 c0       	rjmp	.+198    	; 0x3704 <_ZN28navputter_keycode_menu_class17format_key_actionEh+0x360>
    363e:	83 e3       	ldi	r24, 0x33	; 51
    3640:	94 e0       	ldi	r25, 0x04	; 4
    3642:	9f 93       	push	r25
    3644:	8f 93       	push	r24
    3646:	80 e8       	ldi	r24, 0x80	; 128
    3648:	92 e0       	ldi	r25, 0x02	; 2
    364a:	9f 93       	push	r25
    364c:	8f 93       	push	r24
    364e:	84 e9       	ldi	r24, 0x94	; 148
    3650:	92 e0       	ldi	r25, 0x02	; 2
    3652:	9f 93       	push	r25
    3654:	8f 93       	push	r24
    3656:	8c e1       	ldi	r24, 0x1C	; 28
    3658:	98 e0       	ldi	r25, 0x08	; 8
    365a:	9f 93       	push	r25
    365c:	8f 93       	push	r24
    365e:	8a e1       	ldi	r24, 0x1A	; 26
    3660:	91 e0       	ldi	r25, 0x01	; 1
    3662:	9f 93       	push	r25
    3664:	8f 93       	push	r24
    3666:	0e 94 94 03 	call	0x728	; 0x728 <_ZN22navputter_serial_class5printEPKcz>
    366a:	8d b7       	in	r24, 0x3d	; 61
    366c:	9e b7       	in	r25, 0x3e	; 62
    366e:	0a 96       	adiw	r24, 0x0a	; 10
    3670:	0f b6       	in	r0, 0x3f	; 63
    3672:	f8 94       	cli
    3674:	9e bf       	out	0x3e, r25	; 62
    3676:	0f be       	out	0x3f, r0	; 63
    3678:	8d bf       	out	0x3d, r24	; 61
    367a:	0b cf       	rjmp	.-490    	; 0x3492 <_ZN28navputter_keycode_menu_class17format_key_actionEh+0xee>
    367c:	c3 30       	cpi	r28, 0x03	; 3
    367e:	d1 05       	cpc	r29, r1
    3680:	09 f0       	breq	.+2      	; 0x3684 <_ZN28navputter_keycode_menu_class17format_key_actionEh+0x2e0>
    3682:	6a c0       	rjmp	.+212    	; 0x3758 <_ZN28navputter_keycode_menu_class17format_key_actionEh+0x3b4>
    3684:	83 e3       	ldi	r24, 0x33	; 51
    3686:	94 e0       	ldi	r25, 0x04	; 4
    3688:	9f 93       	push	r25
    368a:	8f 93       	push	r24
    368c:	8b e5       	ldi	r24, 0x5B	; 91
    368e:	93 e0       	ldi	r25, 0x03	; 3
    3690:	9f 93       	push	r25
    3692:	8f 93       	push	r24
    3694:	85 e6       	ldi	r24, 0x65	; 101
    3696:	93 e0       	ldi	r25, 0x03	; 3
    3698:	9f 93       	push	r25
    369a:	8f 93       	push	r24
    369c:	8c e1       	ldi	r24, 0x1C	; 28
    369e:	98 e0       	ldi	r25, 0x08	; 8
    36a0:	9f 93       	push	r25
    36a2:	8f 93       	push	r24
    36a4:	8a e1       	ldi	r24, 0x1A	; 26
    36a6:	91 e0       	ldi	r25, 0x01	; 1
    36a8:	9f 93       	push	r25
    36aa:	8f 93       	push	r24
    36ac:	0e 94 94 03 	call	0x728	; 0x728 <_ZN22navputter_serial_class5printEPKcz>
    36b0:	8d b7       	in	r24, 0x3d	; 61
    36b2:	9e b7       	in	r25, 0x3e	; 62
    36b4:	0a 96       	adiw	r24, 0x0a	; 10
    36b6:	0f b6       	in	r0, 0x3f	; 63
    36b8:	f8 94       	cli
    36ba:	9e bf       	out	0x3e, r25	; 62
    36bc:	0f be       	out	0x3f, r0	; 63
    36be:	8d bf       	out	0x3d, r24	; 61
    36c0:	c7 30       	cpi	r28, 0x07	; 7
    36c2:	d1 05       	cpc	r29, r1
    36c4:	09 f0       	breq	.+2      	; 0x36c8 <_ZN28navputter_keycode_menu_class17format_key_actionEh+0x324>
    36c6:	ae c0       	rjmp	.+348    	; 0x3824 <_ZN28navputter_keycode_menu_class17format_key_actionEh+0x480>
    36c8:	83 e3       	ldi	r24, 0x33	; 51
    36ca:	94 e0       	ldi	r25, 0x04	; 4
    36cc:	9f 93       	push	r25
    36ce:	8f 93       	push	r24
    36d0:	80 e0       	ldi	r24, 0x00	; 0
    36d2:	93 e0       	ldi	r25, 0x03	; 3
    36d4:	9f 93       	push	r25
    36d6:	8f 93       	push	r24
    36d8:	82 e1       	ldi	r24, 0x12	; 18
    36da:	93 e0       	ldi	r25, 0x03	; 3
    36dc:	9f 93       	push	r25
    36de:	8f 93       	push	r24
    36e0:	8c e1       	ldi	r24, 0x1C	; 28
    36e2:	98 e0       	ldi	r25, 0x08	; 8
    36e4:	9f 93       	push	r25
    36e6:	8f 93       	push	r24
    36e8:	8a e1       	ldi	r24, 0x1A	; 26
    36ea:	91 e0       	ldi	r25, 0x01	; 1
    36ec:	9f 93       	push	r25
    36ee:	8f 93       	push	r24
    36f0:	0e 94 94 03 	call	0x728	; 0x728 <_ZN22navputter_serial_class5printEPKcz>
    36f4:	8d b7       	in	r24, 0x3d	; 61
    36f6:	9e b7       	in	r25, 0x3e	; 62
    36f8:	0a 96       	adiw	r24, 0x0a	; 10
    36fa:	0f b6       	in	r0, 0x3f	; 63
    36fc:	f8 94       	cli
    36fe:	9e bf       	out	0x3e, r25	; 62
    3700:	0f be       	out	0x3f, r0	; 63
    3702:	8d bf       	out	0x3d, r24	; 61
    3704:	cc 30       	cpi	r28, 0x0C	; 12
    3706:	d1 05       	cpc	r29, r1
    3708:	09 f0       	breq	.+2      	; 0x370c <_ZN28navputter_keycode_menu_class17format_key_actionEh+0x368>
    370a:	ae c0       	rjmp	.+348    	; 0x3868 <_ZN28navputter_keycode_menu_class17format_key_actionEh+0x4c4>
    370c:	83 e3       	ldi	r24, 0x33	; 51
    370e:	94 e0       	ldi	r25, 0x04	; 4
    3710:	9f 93       	push	r25
    3712:	8f 93       	push	r24
    3714:	8b e5       	ldi	r24, 0x5B	; 91
    3716:	92 e0       	ldi	r25, 0x02	; 2
    3718:	9f 93       	push	r25
    371a:	8f 93       	push	r24
    371c:	86 e7       	ldi	r24, 0x76	; 118
    371e:	92 e0       	ldi	r25, 0x02	; 2
    3720:	9f 93       	push	r25
    3722:	8f 93       	push	r24
    3724:	8c e1       	ldi	r24, 0x1C	; 28
    3726:	98 e0       	ldi	r25, 0x08	; 8
    3728:	9f 93       	push	r25
    372a:	8f 93       	push	r24
    372c:	8a e1       	ldi	r24, 0x1A	; 26
    372e:	91 e0       	ldi	r25, 0x01	; 1
    3730:	9f 93       	push	r25
    3732:	8f 93       	push	r24
    3734:	0e 94 94 03 	call	0x728	; 0x728 <_ZN22navputter_serial_class5printEPKcz>
    3738:	ed b7       	in	r30, 0x3d	; 61
    373a:	fe b7       	in	r31, 0x3e	; 62
    373c:	3a 96       	adiw	r30, 0x0a	; 10
    373e:	0f b6       	in	r0, 0x3f	; 63
    3740:	f8 94       	cli
    3742:	fe bf       	out	0x3e, r31	; 62
    3744:	0f be       	out	0x3f, r0	; 63
    3746:	ed bf       	out	0x3d, r30	; 61
}
    3748:	df 91       	pop	r29
    374a:	cf 91       	pop	r28
    374c:	1f 91       	pop	r17
    374e:	0f 91       	pop	r16
    3750:	ff 90       	pop	r15
    3752:	ef 90       	pop	r14
    3754:	df 90       	pop	r13
    3756:	08 95       	ret
    KEY_ACTION_LIST
    3758:	c4 30       	cpi	r28, 0x04	; 4
    375a:	d1 05       	cpc	r29, r1
    375c:	09 f0       	breq	.+2      	; 0x3760 <_ZN28navputter_keycode_menu_class17format_key_actionEh+0x3bc>
    375e:	55 ce       	rjmp	.-854    	; 0x340a <_ZN28navputter_keycode_menu_class17format_key_actionEh+0x66>
    3760:	83 e3       	ldi	r24, 0x33	; 51
    3762:	94 e0       	ldi	r25, 0x04	; 4
    3764:	9f 93       	push	r25
    3766:	8f 93       	push	r24
    3768:	86 e4       	ldi	r24, 0x46	; 70
    376a:	93 e0       	ldi	r25, 0x03	; 3
    376c:	9f 93       	push	r25
    376e:	8f 93       	push	r24
    3770:	82 e5       	ldi	r24, 0x52	; 82
    3772:	93 e0       	ldi	r25, 0x03	; 3
    3774:	9f 93       	push	r25
    3776:	8f 93       	push	r24
    3778:	8c e1       	ldi	r24, 0x1C	; 28
    377a:	98 e0       	ldi	r25, 0x08	; 8
    377c:	9f 93       	push	r25
    377e:	8f 93       	push	r24
    3780:	8a e1       	ldi	r24, 0x1A	; 26
    3782:	91 e0       	ldi	r25, 0x01	; 1
    3784:	9f 93       	push	r25
    3786:	8f 93       	push	r24
    3788:	0e 94 94 03 	call	0x728	; 0x728 <_ZN22navputter_serial_class5printEPKcz>
    378c:	ed b7       	in	r30, 0x3d	; 61
    378e:	fe b7       	in	r31, 0x3e	; 62
    3790:	3a 96       	adiw	r30, 0x0a	; 10
    3792:	0f b6       	in	r0, 0x3f	; 63
    3794:	f8 94       	cli
    3796:	fe bf       	out	0x3e, r31	; 62
    3798:	0f be       	out	0x3f, r0	; 63
    379a:	ed bf       	out	0x3d, r30	; 61
    379c:	c9 30       	cpi	r28, 0x09	; 9
    379e:	d1 05       	cpc	r29, r1
    37a0:	09 f0       	breq	.+2      	; 0x37a4 <_ZN28navputter_keycode_menu_class17format_key_actionEh+0x400>
    37a2:	55 ce       	rjmp	.-854    	; 0x344e <_ZN28navputter_keycode_menu_class17format_key_actionEh+0xaa>
    37a4:	83 e3       	ldi	r24, 0x33	; 51
    37a6:	94 e0       	ldi	r25, 0x04	; 4
    37a8:	9f 93       	push	r25
    37aa:	8f 93       	push	r24
    37ac:	80 ec       	ldi	r24, 0xC0	; 192
    37ae:	92 e0       	ldi	r25, 0x02	; 2
    37b0:	9f 93       	push	r25
    37b2:	8f 93       	push	r24
    37b4:	8a ed       	ldi	r24, 0xDA	; 218
    37b6:	92 e0       	ldi	r25, 0x02	; 2
    37b8:	9f 93       	push	r25
    37ba:	8f 93       	push	r24
    37bc:	8c e1       	ldi	r24, 0x1C	; 28
    37be:	98 e0       	ldi	r25, 0x08	; 8
    37c0:	9f 93       	push	r25
    37c2:	8f 93       	push	r24
    37c4:	8a e1       	ldi	r24, 0x1A	; 26
    37c6:	91 e0       	ldi	r25, 0x01	; 1
    37c8:	9f 93       	push	r25
    37ca:	8f 93       	push	r24
    37cc:	0e 94 94 03 	call	0x728	; 0x728 <_ZN22navputter_serial_class5printEPKcz>
    37d0:	8d b7       	in	r24, 0x3d	; 61
    37d2:	9e b7       	in	r25, 0x3e	; 62
    37d4:	0a 96       	adiw	r24, 0x0a	; 10
    37d6:	0f b6       	in	r0, 0x3f	; 63
    37d8:	f8 94       	cli
    37da:	9e bf       	out	0x3e, r25	; 62
    37dc:	0f be       	out	0x3f, r0	; 63
    37de:	8d bf       	out	0x3d, r24	; 61
    37e0:	2e 97       	sbiw	r28, 0x0e	; 14
    37e2:	09 f0       	breq	.+2      	; 0x37e6 <_ZN28navputter_keycode_menu_class17format_key_actionEh+0x442>
    37e4:	56 ce       	rjmp	.-852    	; 0x3492 <_ZN28navputter_keycode_menu_class17format_key_actionEh+0xee>
    37e6:	83 e3       	ldi	r24, 0x33	; 51
    37e8:	94 e0       	ldi	r25, 0x04	; 4
    37ea:	9f 93       	push	r25
    37ec:	8f 93       	push	r24
    37ee:	80 e2       	ldi	r24, 0x20	; 32
    37f0:	92 e0       	ldi	r25, 0x02	; 2
    37f2:	9f 93       	push	r25
    37f4:	8f 93       	push	r24
    37f6:	86 e3       	ldi	r24, 0x36	; 54
    37f8:	92 e0       	ldi	r25, 0x02	; 2
    37fa:	9f 93       	push	r25
    37fc:	8f 93       	push	r24
    37fe:	8c e1       	ldi	r24, 0x1C	; 28
    3800:	98 e0       	ldi	r25, 0x08	; 8
    3802:	9f 93       	push	r25
    3804:	8f 93       	push	r24
    3806:	8a e1       	ldi	r24, 0x1A	; 26
    3808:	91 e0       	ldi	r25, 0x01	; 1
    380a:	9f 93       	push	r25
    380c:	8f 93       	push	r24
    380e:	0e 94 94 03 	call	0x728	; 0x728 <_ZN22navputter_serial_class5printEPKcz>
    3812:	ed b7       	in	r30, 0x3d	; 61
    3814:	fe b7       	in	r31, 0x3e	; 62
    3816:	3a 96       	adiw	r30, 0x0a	; 10
    3818:	0f b6       	in	r0, 0x3f	; 63
    381a:	f8 94       	cli
    381c:	fe bf       	out	0x3e, r31	; 62
    381e:	0f be       	out	0x3f, r0	; 63
    3820:	ed bf       	out	0x3d, r30	; 61
    3822:	92 cf       	rjmp	.-220    	; 0x3748 <_ZN28navputter_keycode_menu_class17format_key_actionEh+0x3a4>
    3824:	c8 30       	cpi	r28, 0x08	; 8
    3826:	d1 05       	cpc	r29, r1
    3828:	09 f0       	breq	.+2      	; 0x382c <_ZN28navputter_keycode_menu_class17format_key_actionEh+0x488>
    382a:	b8 cf       	rjmp	.-144    	; 0x379c <_ZN28navputter_keycode_menu_class17format_key_actionEh+0x3f8>
    382c:	83 e3       	ldi	r24, 0x33	; 51
    382e:	94 e0       	ldi	r25, 0x04	; 4
    3830:	9f 93       	push	r25
    3832:	8f 93       	push	r24
    3834:	84 ee       	ldi	r24, 0xE4	; 228
    3836:	92 e0       	ldi	r25, 0x02	; 2
    3838:	9f 93       	push	r25
    383a:	8f 93       	push	r24
    383c:	87 ef       	ldi	r24, 0xF7	; 247
    383e:	92 e0       	ldi	r25, 0x02	; 2
    3840:	9f 93       	push	r25
    3842:	8f 93       	push	r24
    3844:	8c e1       	ldi	r24, 0x1C	; 28
    3846:	98 e0       	ldi	r25, 0x08	; 8
    3848:	9f 93       	push	r25
    384a:	8f 93       	push	r24
    384c:	8a e1       	ldi	r24, 0x1A	; 26
    384e:	91 e0       	ldi	r25, 0x01	; 1
    3850:	9f 93       	push	r25
    3852:	8f 93       	push	r24
    3854:	0e 94 94 03 	call	0x728	; 0x728 <_ZN22navputter_serial_class5printEPKcz>
    3858:	ed b7       	in	r30, 0x3d	; 61
    385a:	fe b7       	in	r31, 0x3e	; 62
    385c:	3a 96       	adiw	r30, 0x0a	; 10
    385e:	0f b6       	in	r0, 0x3f	; 63
    3860:	f8 94       	cli
    3862:	fe bf       	out	0x3e, r31	; 62
    3864:	0f be       	out	0x3f, r0	; 63
    3866:	ed bf       	out	0x3d, r30	; 61
    3868:	cd 30       	cpi	r28, 0x0D	; 13
    386a:	d1 05       	cpc	r29, r1
    386c:	09 f0       	breq	.+2      	; 0x3870 <_ZN28navputter_keycode_menu_class17format_key_actionEh+0x4cc>
    386e:	b8 cf       	rjmp	.-144    	; 0x37e0 <_ZN28navputter_keycode_menu_class17format_key_actionEh+0x43c>
    3870:	83 e3       	ldi	r24, 0x33	; 51
    3872:	94 e0       	ldi	r25, 0x04	; 4
    3874:	9f 93       	push	r25
    3876:	8f 93       	push	r24
    3878:	8f e3       	ldi	r24, 0x3F	; 63
    387a:	92 e0       	ldi	r25, 0x02	; 2
    387c:	9f 93       	push	r25
    387e:	8f 93       	push	r24
    3880:	83 e5       	ldi	r24, 0x53	; 83
    3882:	92 e0       	ldi	r25, 0x02	; 2
    3884:	9f 93       	push	r25
    3886:	8f 93       	push	r24
    3888:	8c e1       	ldi	r24, 0x1C	; 28
    388a:	98 e0       	ldi	r25, 0x08	; 8
    388c:	9f 93       	push	r25
    388e:	8f 93       	push	r24
    3890:	8a e1       	ldi	r24, 0x1A	; 26
    3892:	91 e0       	ldi	r25, 0x01	; 1
    3894:	9f 93       	push	r25
    3896:	8f 93       	push	r24
    3898:	0e 94 94 03 	call	0x728	; 0x728 <_ZN22navputter_serial_class5printEPKcz>
    389c:	8d b7       	in	r24, 0x3d	; 61
    389e:	9e b7       	in	r25, 0x3e	; 62
    38a0:	0a 96       	adiw	r24, 0x0a	; 10
    38a2:	0f b6       	in	r0, 0x3f	; 63
    38a4:	f8 94       	cli
    38a6:	9e bf       	out	0x3e, r25	; 62
    38a8:	0f be       	out	0x3f, r0	; 63
    38aa:	8d bf       	out	0x3d, r24	; 61
    38ac:	4d cf       	rjmp	.-358    	; 0x3748 <_ZN28navputter_keycode_menu_class17format_key_actionEh+0x3a4>
            if ( m_key_seq_map[seq].key_press[0] ) { format_scancode( m_key_seq_map[seq].key_press[0] ); }
    38ae:	f7 01       	movw	r30, r14
    38b0:	e0 0f       	add	r30, r16
    38b2:	f1 1f       	adc	r31, r17
    38b4:	65 a9       	ldd	r22, Z+53	; 0x35
    38b6:	76 a9       	ldd	r23, Z+54	; 0x36
    38b8:	61 15       	cp	r22, r1
    38ba:	71 05       	cpc	r23, r1
    38bc:	11 f0       	breq	.+4      	; 0x38c2 <_ZN28navputter_keycode_menu_class17format_key_actionEh+0x51e>
    38be:	c7 01       	movw	r24, r14
    38c0:	6e db       	rcall	.-2340   	; 0x2f9e <_ZN28navputter_keycode_menu_class15format_scancodeEj>
            if ( m_key_seq_map[seq].key_press[1] ) { SERIAL.write(","); format_scancode( m_key_seq_map[seq].key_press[1]); }
    38c2:	e7 01       	movw	r28, r14
    38c4:	c0 0f       	add	r28, r16
    38c6:	d1 1f       	adc	r29, r17
    38c8:	8f a9       	ldd	r24, Y+55	; 0x37
    38ca:	98 ad       	ldd	r25, Y+56	; 0x38
    38cc:	89 2b       	or	r24, r25
    38ce:	09 f4       	brne	.+2      	; 0x38d2 <_ZN28navputter_keycode_menu_class17format_key_actionEh+0x52e>
    38d0:	3b cf       	rjmp	.-394    	; 0x3748 <_ZN28navputter_keycode_menu_class17format_key_actionEh+0x3a4>
    38d2:	63 e5       	ldi	r22, 0x53	; 83
    38d4:	77 e0       	ldi	r23, 0x07	; 7
    38d6:	8a e1       	ldi	r24, 0x1A	; 26
    38d8:	91 e0       	ldi	r25, 0x01	; 1
    38da:	0e 94 2f 03 	call	0x65e	; 0x65e <_ZN16usb_serial_class5writeEPKc>
    38de:	6f a9       	ldd	r22, Y+55	; 0x37
    38e0:	78 ad       	ldd	r23, Y+56	; 0x38
    38e2:	c7 01       	movw	r24, r14
}
    38e4:	df 91       	pop	r29
    38e6:	cf 91       	pop	r28
    38e8:	1f 91       	pop	r17
    38ea:	0f 91       	pop	r16
    38ec:	ff 90       	pop	r15
    38ee:	ef 90       	pop	r14
            if ( m_key_seq_map[seq].key_press[1] ) { SERIAL.write(","); format_scancode( m_key_seq_map[seq].key_press[1]); }
    38f0:	df 90       	pop	r13
    38f2:	55 cb       	rjmp	.-2390   	; 0x2f9e <_ZN28navputter_keycode_menu_class15format_scancodeEj>

000038f4 <_ZN28navputter_keycode_menu_class11show_keymapEv>:
{
    38f4:	ef 92       	push	r14
    38f6:	ff 92       	push	r15
    38f8:	0f 93       	push	r16
    38fa:	1f 93       	push	r17
    38fc:	cf 93       	push	r28
    38fe:	df 93       	push	r29
    3900:	7c 01       	movw	r14, r24
    SERIAL.write(EOLN);
    3902:	63 e3       	ldi	r22, 0x33	; 51
    3904:	74 e0       	ldi	r23, 0x04	; 4
    3906:	8a e1       	ldi	r24, 0x1A	; 26
    3908:	91 e0       	ldi	r25, 0x01	; 1
    390a:	0e 94 2f 03 	call	0x65e	; 0x65e <_ZN16usb_serial_class5writeEPKc>
    KP_KEY_LIST
    390e:	1f 92       	push	r1
    3910:	81 e3       	ldi	r24, 0x31	; 49
    3912:	8f 93       	push	r24
    3914:	06 e2       	ldi	r16, 0x26	; 38
    3916:	18 e0       	ldi	r17, 0x08	; 8
    3918:	1f 93       	push	r17
    391a:	0f 93       	push	r16
    391c:	ca e1       	ldi	r28, 0x1A	; 26
    391e:	d1 e0       	ldi	r29, 0x01	; 1
    3920:	df 93       	push	r29
    3922:	cf 93       	push	r28
    3924:	0e 94 94 03 	call	0x728	; 0x728 <_ZN22navputter_serial_class5printEPKcz>
    3928:	60 e0       	ldi	r22, 0x00	; 0
    392a:	c7 01       	movw	r24, r14
    392c:	3b dd       	rcall	.-1418   	; 0x33a4 <_ZN28navputter_keycode_menu_class17format_key_actionEh>
    392e:	63 e3       	ldi	r22, 0x33	; 51
    3930:	74 e0       	ldi	r23, 0x04	; 4
    3932:	ce 01       	movw	r24, r28
    3934:	0e 94 2f 03 	call	0x65e	; 0x65e <_ZN16usb_serial_class5writeEPKc>
    3938:	1f 92       	push	r1
    393a:	82 e3       	ldi	r24, 0x32	; 50
    393c:	8f 93       	push	r24
    393e:	1f 93       	push	r17
    3940:	0f 93       	push	r16
    3942:	df 93       	push	r29
    3944:	cf 93       	push	r28
    3946:	0e 94 94 03 	call	0x728	; 0x728 <_ZN22navputter_serial_class5printEPKcz>
    394a:	61 e0       	ldi	r22, 0x01	; 1
    394c:	c7 01       	movw	r24, r14
    394e:	2a dd       	rcall	.-1452   	; 0x33a4 <_ZN28navputter_keycode_menu_class17format_key_actionEh>
    3950:	63 e3       	ldi	r22, 0x33	; 51
    3952:	74 e0       	ldi	r23, 0x04	; 4
    3954:	ce 01       	movw	r24, r28
    3956:	0e 94 2f 03 	call	0x65e	; 0x65e <_ZN16usb_serial_class5writeEPKc>
    395a:	1f 92       	push	r1
    395c:	83 e3       	ldi	r24, 0x33	; 51
    395e:	8f 93       	push	r24
    3960:	1f 93       	push	r17
    3962:	0f 93       	push	r16
    3964:	df 93       	push	r29
    3966:	cf 93       	push	r28
    3968:	0e 94 94 03 	call	0x728	; 0x728 <_ZN22navputter_serial_class5printEPKcz>
    396c:	62 e0       	ldi	r22, 0x02	; 2
    396e:	c7 01       	movw	r24, r14
    3970:	19 dd       	rcall	.-1486   	; 0x33a4 <_ZN28navputter_keycode_menu_class17format_key_actionEh>
    3972:	63 e3       	ldi	r22, 0x33	; 51
    3974:	74 e0       	ldi	r23, 0x04	; 4
    3976:	ce 01       	movw	r24, r28
    3978:	0e 94 2f 03 	call	0x65e	; 0x65e <_ZN16usb_serial_class5writeEPKc>
    397c:	1f 92       	push	r1
    397e:	84 e3       	ldi	r24, 0x34	; 52
    3980:	8f 93       	push	r24
    3982:	1f 93       	push	r17
    3984:	0f 93       	push	r16
    3986:	df 93       	push	r29
    3988:	cf 93       	push	r28
    398a:	0e 94 94 03 	call	0x728	; 0x728 <_ZN22navputter_serial_class5printEPKcz>
    398e:	63 e0       	ldi	r22, 0x03	; 3
    3990:	c7 01       	movw	r24, r14
    3992:	08 dd       	rcall	.-1520   	; 0x33a4 <_ZN28navputter_keycode_menu_class17format_key_actionEh>
    3994:	63 e3       	ldi	r22, 0x33	; 51
    3996:	74 e0       	ldi	r23, 0x04	; 4
    3998:	ce 01       	movw	r24, r28
    399a:	0e 94 2f 03 	call	0x65e	; 0x65e <_ZN16usb_serial_class5writeEPKc>
    399e:	1f 92       	push	r1
    39a0:	85 e3       	ldi	r24, 0x35	; 53
    39a2:	8f 93       	push	r24
    39a4:	1f 93       	push	r17
    39a6:	0f 93       	push	r16
    39a8:	df 93       	push	r29
    39aa:	cf 93       	push	r28
    39ac:	0e 94 94 03 	call	0x728	; 0x728 <_ZN22navputter_serial_class5printEPKcz>
    39b0:	64 e0       	ldi	r22, 0x04	; 4
    39b2:	c7 01       	movw	r24, r14
    39b4:	f7 dc       	rcall	.-1554   	; 0x33a4 <_ZN28navputter_keycode_menu_class17format_key_actionEh>
    39b6:	63 e3       	ldi	r22, 0x33	; 51
    39b8:	74 e0       	ldi	r23, 0x04	; 4
    39ba:	ce 01       	movw	r24, r28
    39bc:	0e 94 2f 03 	call	0x65e	; 0x65e <_ZN16usb_serial_class5writeEPKc>
    39c0:	1f 92       	push	r1
    39c2:	86 e3       	ldi	r24, 0x36	; 54
    39c4:	8f 93       	push	r24
    39c6:	1f 93       	push	r17
    39c8:	0f 93       	push	r16
    39ca:	df 93       	push	r29
    39cc:	cf 93       	push	r28
    39ce:	0e 94 94 03 	call	0x728	; 0x728 <_ZN22navputter_serial_class5printEPKcz>
    39d2:	8d b7       	in	r24, 0x3d	; 61
    39d4:	9e b7       	in	r25, 0x3e	; 62
    39d6:	84 96       	adiw	r24, 0x24	; 36
    39d8:	0f b6       	in	r0, 0x3f	; 63
    39da:	f8 94       	cli
    39dc:	9e bf       	out	0x3e, r25	; 62
    39de:	0f be       	out	0x3f, r0	; 63
    39e0:	8d bf       	out	0x3d, r24	; 61
    39e2:	65 e0       	ldi	r22, 0x05	; 5
    39e4:	c7 01       	movw	r24, r14
    39e6:	de dc       	rcall	.-1604   	; 0x33a4 <_ZN28navputter_keycode_menu_class17format_key_actionEh>
    39e8:	63 e3       	ldi	r22, 0x33	; 51
    39ea:	74 e0       	ldi	r23, 0x04	; 4
    39ec:	ce 01       	movw	r24, r28
    39ee:	0e 94 2f 03 	call	0x65e	; 0x65e <_ZN16usb_serial_class5writeEPKc>
    39f2:	1f 92       	push	r1
    39f4:	87 e3       	ldi	r24, 0x37	; 55
    39f6:	8f 93       	push	r24
    39f8:	1f 93       	push	r17
    39fa:	0f 93       	push	r16
    39fc:	df 93       	push	r29
    39fe:	cf 93       	push	r28
    3a00:	0e 94 94 03 	call	0x728	; 0x728 <_ZN22navputter_serial_class5printEPKcz>
    3a04:	66 e0       	ldi	r22, 0x06	; 6
    3a06:	c7 01       	movw	r24, r14
    3a08:	cd dc       	rcall	.-1638   	; 0x33a4 <_ZN28navputter_keycode_menu_class17format_key_actionEh>
    3a0a:	63 e3       	ldi	r22, 0x33	; 51
    3a0c:	74 e0       	ldi	r23, 0x04	; 4
    3a0e:	ce 01       	movw	r24, r28
    3a10:	0e 94 2f 03 	call	0x65e	; 0x65e <_ZN16usb_serial_class5writeEPKc>
    3a14:	1f 92       	push	r1
    3a16:	88 e3       	ldi	r24, 0x38	; 56
    3a18:	8f 93       	push	r24
    3a1a:	1f 93       	push	r17
    3a1c:	0f 93       	push	r16
    3a1e:	df 93       	push	r29
    3a20:	cf 93       	push	r28
    3a22:	0e 94 94 03 	call	0x728	; 0x728 <_ZN22navputter_serial_class5printEPKcz>
    3a26:	67 e0       	ldi	r22, 0x07	; 7
    3a28:	c7 01       	movw	r24, r14
    3a2a:	bc dc       	rcall	.-1672   	; 0x33a4 <_ZN28navputter_keycode_menu_class17format_key_actionEh>
    3a2c:	63 e3       	ldi	r22, 0x33	; 51
    3a2e:	74 e0       	ldi	r23, 0x04	; 4
    3a30:	ce 01       	movw	r24, r28
    3a32:	0e 94 2f 03 	call	0x65e	; 0x65e <_ZN16usb_serial_class5writeEPKc>
    3a36:	1f 92       	push	r1
    3a38:	89 e3       	ldi	r24, 0x39	; 57
    3a3a:	8f 93       	push	r24
    3a3c:	1f 93       	push	r17
    3a3e:	0f 93       	push	r16
    3a40:	df 93       	push	r29
    3a42:	cf 93       	push	r28
    3a44:	0e 94 94 03 	call	0x728	; 0x728 <_ZN22navputter_serial_class5printEPKcz>
    3a48:	68 e0       	ldi	r22, 0x08	; 8
    3a4a:	c7 01       	movw	r24, r14
    3a4c:	ab dc       	rcall	.-1706   	; 0x33a4 <_ZN28navputter_keycode_menu_class17format_key_actionEh>
    3a4e:	63 e3       	ldi	r22, 0x33	; 51
    3a50:	74 e0       	ldi	r23, 0x04	; 4
    3a52:	ce 01       	movw	r24, r28
    3a54:	0e 94 2f 03 	call	0x65e	; 0x65e <_ZN16usb_serial_class5writeEPKc>
    3a58:	1f 92       	push	r1
    3a5a:	81 e6       	ldi	r24, 0x61	; 97
    3a5c:	8f 93       	push	r24
    3a5e:	1f 93       	push	r17
    3a60:	0f 93       	push	r16
    3a62:	df 93       	push	r29
    3a64:	cf 93       	push	r28
    3a66:	0e 94 94 03 	call	0x728	; 0x728 <_ZN22navputter_serial_class5printEPKcz>
    3a6a:	69 e0       	ldi	r22, 0x09	; 9
    3a6c:	c7 01       	movw	r24, r14
    3a6e:	9a dc       	rcall	.-1740   	; 0x33a4 <_ZN28navputter_keycode_menu_class17format_key_actionEh>
    3a70:	63 e3       	ldi	r22, 0x33	; 51
    3a72:	74 e0       	ldi	r23, 0x04	; 4
    3a74:	ce 01       	movw	r24, r28
    3a76:	0e 94 2f 03 	call	0x65e	; 0x65e <_ZN16usb_serial_class5writeEPKc>
    3a7a:	1f 92       	push	r1
    3a7c:	82 e6       	ldi	r24, 0x62	; 98
    3a7e:	8f 93       	push	r24
    3a80:	1f 93       	push	r17
    3a82:	0f 93       	push	r16
    3a84:	df 93       	push	r29
    3a86:	cf 93       	push	r28
    3a88:	0e 94 94 03 	call	0x728	; 0x728 <_ZN22navputter_serial_class5printEPKcz>
    3a8c:	6a e0       	ldi	r22, 0x0A	; 10
    3a8e:	c7 01       	movw	r24, r14
    3a90:	89 dc       	rcall	.-1774   	; 0x33a4 <_ZN28navputter_keycode_menu_class17format_key_actionEh>
    3a92:	63 e3       	ldi	r22, 0x33	; 51
    3a94:	74 e0       	ldi	r23, 0x04	; 4
    3a96:	ce 01       	movw	r24, r28
    3a98:	0e 94 2f 03 	call	0x65e	; 0x65e <_ZN16usb_serial_class5writeEPKc>
    3a9c:	1f 92       	push	r1
    3a9e:	83 e6       	ldi	r24, 0x63	; 99
    3aa0:	8f 93       	push	r24
    3aa2:	1f 93       	push	r17
    3aa4:	0f 93       	push	r16
    3aa6:	df 93       	push	r29
    3aa8:	cf 93       	push	r28
    3aaa:	0e 94 94 03 	call	0x728	; 0x728 <_ZN22navputter_serial_class5printEPKcz>
    3aae:	8d b7       	in	r24, 0x3d	; 61
    3ab0:	9e b7       	in	r25, 0x3e	; 62
    3ab2:	84 96       	adiw	r24, 0x24	; 36
    3ab4:	0f b6       	in	r0, 0x3f	; 63
    3ab6:	f8 94       	cli
    3ab8:	9e bf       	out	0x3e, r25	; 62
    3aba:	0f be       	out	0x3f, r0	; 63
    3abc:	8d bf       	out	0x3d, r24	; 61
    3abe:	6b e0       	ldi	r22, 0x0B	; 11
    3ac0:	c7 01       	movw	r24, r14
    3ac2:	70 dc       	rcall	.-1824   	; 0x33a4 <_ZN28navputter_keycode_menu_class17format_key_actionEh>
    3ac4:	63 e3       	ldi	r22, 0x33	; 51
    3ac6:	74 e0       	ldi	r23, 0x04	; 4
    3ac8:	ce 01       	movw	r24, r28
    3aca:	0e 94 2f 03 	call	0x65e	; 0x65e <_ZN16usb_serial_class5writeEPKc>
    3ace:	1f 92       	push	r1
    3ad0:	84 e6       	ldi	r24, 0x64	; 100
    3ad2:	8f 93       	push	r24
    3ad4:	1f 93       	push	r17
    3ad6:	0f 93       	push	r16
    3ad8:	df 93       	push	r29
    3ada:	cf 93       	push	r28
    3adc:	0e 94 94 03 	call	0x728	; 0x728 <_ZN22navputter_serial_class5printEPKcz>
    3ae0:	6c e0       	ldi	r22, 0x0C	; 12
    3ae2:	c7 01       	movw	r24, r14
    3ae4:	5f dc       	rcall	.-1858   	; 0x33a4 <_ZN28navputter_keycode_menu_class17format_key_actionEh>
    3ae6:	63 e3       	ldi	r22, 0x33	; 51
    3ae8:	74 e0       	ldi	r23, 0x04	; 4
    3aea:	ce 01       	movw	r24, r28
    3aec:	0e 94 2f 03 	call	0x65e	; 0x65e <_ZN16usb_serial_class5writeEPKc>
    3af0:	1f 92       	push	r1
    3af2:	85 e6       	ldi	r24, 0x65	; 101
    3af4:	8f 93       	push	r24
    3af6:	1f 93       	push	r17
    3af8:	0f 93       	push	r16
    3afa:	df 93       	push	r29
    3afc:	cf 93       	push	r28
    3afe:	0e 94 94 03 	call	0x728	; 0x728 <_ZN22navputter_serial_class5printEPKcz>
    3b02:	6d e0       	ldi	r22, 0x0D	; 13
    3b04:	c7 01       	movw	r24, r14
    3b06:	4e dc       	rcall	.-1892   	; 0x33a4 <_ZN28navputter_keycode_menu_class17format_key_actionEh>
    3b08:	63 e3       	ldi	r22, 0x33	; 51
    3b0a:	74 e0       	ldi	r23, 0x04	; 4
    3b0c:	ce 01       	movw	r24, r28
    3b0e:	0e 94 2f 03 	call	0x65e	; 0x65e <_ZN16usb_serial_class5writeEPKc>
    3b12:	1f 92       	push	r1
    3b14:	86 e6       	ldi	r24, 0x66	; 102
    3b16:	8f 93       	push	r24
    3b18:	1f 93       	push	r17
    3b1a:	0f 93       	push	r16
    3b1c:	df 93       	push	r29
    3b1e:	cf 93       	push	r28
    3b20:	0e 94 94 03 	call	0x728	; 0x728 <_ZN22navputter_serial_class5printEPKcz>
    3b24:	6e e0       	ldi	r22, 0x0E	; 14
    3b26:	c7 01       	movw	r24, r14
    3b28:	3d dc       	rcall	.-1926   	; 0x33a4 <_ZN28navputter_keycode_menu_class17format_key_actionEh>
    3b2a:	63 e3       	ldi	r22, 0x33	; 51
    3b2c:	74 e0       	ldi	r23, 0x04	; 4
    3b2e:	ce 01       	movw	r24, r28
    3b30:	0e 94 2f 03 	call	0x65e	; 0x65e <_ZN16usb_serial_class5writeEPKc>
    3b34:	1f 92       	push	r1
    3b36:	87 e6       	ldi	r24, 0x67	; 103
    3b38:	8f 93       	push	r24
    3b3a:	1f 93       	push	r17
    3b3c:	0f 93       	push	r16
    3b3e:	df 93       	push	r29
    3b40:	cf 93       	push	r28
    3b42:	0e 94 94 03 	call	0x728	; 0x728 <_ZN22navputter_serial_class5printEPKcz>
    3b46:	6f e0       	ldi	r22, 0x0F	; 15
    3b48:	c7 01       	movw	r24, r14
    3b4a:	2c dc       	rcall	.-1960   	; 0x33a4 <_ZN28navputter_keycode_menu_class17format_key_actionEh>
    3b4c:	63 e3       	ldi	r22, 0x33	; 51
    3b4e:	74 e0       	ldi	r23, 0x04	; 4
    3b50:	ce 01       	movw	r24, r28
    3b52:	0e 94 2f 03 	call	0x65e	; 0x65e <_ZN16usb_serial_class5writeEPKc>
    3b56:	1f 92       	push	r1
    3b58:	88 e6       	ldi	r24, 0x68	; 104
    3b5a:	8f 93       	push	r24
    3b5c:	1f 93       	push	r17
    3b5e:	0f 93       	push	r16
    3b60:	df 93       	push	r29
    3b62:	cf 93       	push	r28
    3b64:	0e 94 94 03 	call	0x728	; 0x728 <_ZN22navputter_serial_class5printEPKcz>
    3b68:	60 e1       	ldi	r22, 0x10	; 16
    3b6a:	c7 01       	movw	r24, r14
    3b6c:	1b dc       	rcall	.-1994   	; 0x33a4 <_ZN28navputter_keycode_menu_class17format_key_actionEh>
    3b6e:	63 e3       	ldi	r22, 0x33	; 51
    3b70:	74 e0       	ldi	r23, 0x04	; 4
    3b72:	ce 01       	movw	r24, r28
    3b74:	0e 94 2f 03 	call	0x65e	; 0x65e <_ZN16usb_serial_class5writeEPKc>
    3b78:	1f 92       	push	r1
    3b7a:	89 e6       	ldi	r24, 0x69	; 105
    3b7c:	8f 93       	push	r24
    3b7e:	1f 93       	push	r17
    3b80:	0f 93       	push	r16
    3b82:	df 93       	push	r29
    3b84:	cf 93       	push	r28
    3b86:	0e 94 94 03 	call	0x728	; 0x728 <_ZN22navputter_serial_class5printEPKcz>
    3b8a:	8d b7       	in	r24, 0x3d	; 61
    3b8c:	9e b7       	in	r25, 0x3e	; 62
    3b8e:	84 96       	adiw	r24, 0x24	; 36
    3b90:	0f b6       	in	r0, 0x3f	; 63
    3b92:	f8 94       	cli
    3b94:	9e bf       	out	0x3e, r25	; 62
    3b96:	0f be       	out	0x3f, r0	; 63
    3b98:	8d bf       	out	0x3d, r24	; 61
    3b9a:	61 e1       	ldi	r22, 0x11	; 17
    3b9c:	c7 01       	movw	r24, r14
    3b9e:	02 dc       	rcall	.-2044   	; 0x33a4 <_ZN28navputter_keycode_menu_class17format_key_actionEh>
    3ba0:	63 e3       	ldi	r22, 0x33	; 51
    3ba2:	74 e0       	ldi	r23, 0x04	; 4
    3ba4:	ce 01       	movw	r24, r28
    3ba6:	0e 94 2f 03 	call	0x65e	; 0x65e <_ZN16usb_serial_class5writeEPKc>
    3baa:	1f 92       	push	r1
    3bac:	8a e6       	ldi	r24, 0x6A	; 106
    3bae:	8f 93       	push	r24
    3bb0:	1f 93       	push	r17
    3bb2:	0f 93       	push	r16
    3bb4:	df 93       	push	r29
    3bb6:	cf 93       	push	r28
    3bb8:	0e 94 94 03 	call	0x728	; 0x728 <_ZN22navputter_serial_class5printEPKcz>
    3bbc:	62 e1       	ldi	r22, 0x12	; 18
    3bbe:	c7 01       	movw	r24, r14
    3bc0:	f1 db       	rcall	.-2078   	; 0x33a4 <_ZN28navputter_keycode_menu_class17format_key_actionEh>
    3bc2:	0f 90       	pop	r0
    3bc4:	0f 90       	pop	r0
    3bc6:	0f 90       	pop	r0
    3bc8:	0f 90       	pop	r0
    3bca:	0f 90       	pop	r0
    3bcc:	0f 90       	pop	r0
    3bce:	63 e3       	ldi	r22, 0x33	; 51
    3bd0:	74 e0       	ldi	r23, 0x04	; 4
    3bd2:	ce 01       	movw	r24, r28
}
    3bd4:	df 91       	pop	r29
    3bd6:	cf 91       	pop	r28
    3bd8:	1f 91       	pop	r17
    3bda:	0f 91       	pop	r16
    3bdc:	ff 90       	pop	r15
    3bde:	ef 90       	pop	r14
    KP_KEY_LIST
    3be0:	0c 94 2f 03 	jmp	0x65e	; 0x65e <_ZN16usb_serial_class5writeEPKc>

00003be4 <_ZN28navputter_keycode_menu_class11load_keymapEv>:
{
    3be4:	cf 93       	push	r28
    3be6:	df 93       	push	r29
    3be8:	ec 01       	movw	r28, r24
    if ( CONFIG.key_maps == 0 )
    3bea:	80 91 6e 03 	lds	r24, 0x036E	; 0x80036e <myputter+0x26e>
    3bee:	81 11       	cpse	r24, r1
    3bf0:	1d c0       	rjmp	.+58     	; 0x3c2c <_ZN28navputter_keycode_menu_class11load_keymapEv+0x48>
        SERIAL.print_P( global_keycode_error_no_keymaps_str, EOLN, EOLN, EOLN );
    3bf2:	83 e3       	ldi	r24, 0x33	; 51
    3bf4:	94 e0       	ldi	r25, 0x04	; 4
    3bf6:	9f 93       	push	r25
    3bf8:	8f 93       	push	r24
    3bfa:	9f 93       	push	r25
    3bfc:	8f 93       	push	r24
    3bfe:	9f 93       	push	r25
    3c00:	8f 93       	push	r24
    3c02:	89 eb       	ldi	r24, 0xB9	; 185
    3c04:	91 e0       	ldi	r25, 0x01	; 1
    3c06:	9f 93       	push	r25
    3c08:	8f 93       	push	r24
    3c0a:	8a e1       	ldi	r24, 0x1A	; 26
    3c0c:	91 e0       	ldi	r25, 0x01	; 1
    3c0e:	9f 93       	push	r25
    3c10:	8f 93       	push	r24
    3c12:	0e 94 96 07 	call	0xf2c	; 0xf2c <_ZN22navputter_serial_class7print_PEPKcz>
        read_command();
    3c16:	ce 01       	movw	r24, r28
    3c18:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <_ZN25navputter_menu_base_class12read_commandEv>
    3c1c:	8d b7       	in	r24, 0x3d	; 61
    3c1e:	9e b7       	in	r25, 0x3e	; 62
    3c20:	0a 96       	adiw	r24, 0x0a	; 10
    3c22:	0f b6       	in	r0, 0x3f	; 63
    3c24:	f8 94       	cli
    3c26:	9e bf       	out	0x3e, r25	; 62
    3c28:	0f be       	out	0x3f, r0	; 63
    3c2a:	8d bf       	out	0x3d, r24	; 61
    } SERIAL.print_P( global_keycode_load_str, CONFIG.key_maps, EOLN);  
    3c2c:	83 e3       	ldi	r24, 0x33	; 51
    3c2e:	94 e0       	ldi	r25, 0x04	; 4
    3c30:	9f 93       	push	r25
    3c32:	8f 93       	push	r24
    3c34:	80 91 6e 03 	lds	r24, 0x036E	; 0x80036e <myputter+0x26e>
    3c38:	1f 92       	push	r1
    3c3a:	8f 93       	push	r24
    3c3c:	83 ed       	ldi	r24, 0xD3	; 211
    3c3e:	91 e0       	ldi	r25, 0x01	; 1
    3c40:	9f 93       	push	r25
    3c42:	8f 93       	push	r24
    3c44:	8a e1       	ldi	r24, 0x1A	; 26
    3c46:	91 e0       	ldi	r25, 0x01	; 1
    3c48:	9f 93       	push	r25
    3c4a:	8f 93       	push	r24
    3c4c:	0e 94 96 07 	call	0xf2c	; 0xf2c <_ZN22navputter_serial_class7print_PEPKcz>
    3c50:	8b e0       	ldi	r24, 0x0B	; 11
    3c52:	8a 83       	std	Y+2, r24	; 0x02
}
    3c54:	8d b7       	in	r24, 0x3d	; 61
    3c56:	9e b7       	in	r25, 0x3e	; 62
    3c58:	08 96       	adiw	r24, 0x08	; 8
    3c5a:	0f b6       	in	r0, 0x3f	; 63
    3c5c:	f8 94       	cli
    3c5e:	9e bf       	out	0x3e, r25	; 62
    3c60:	0f be       	out	0x3f, r0	; 63
    3c62:	8d bf       	out	0x3d, r24	; 61
    3c64:	df 91       	pop	r29
    3c66:	cf 91       	pop	r28
    3c68:	08 95       	ret

00003c6a <_ZN28navputter_keycode_menu_class14key_edit_usageEv>:
{
    3c6a:	cf 92       	push	r12
    3c6c:	df 92       	push	r13
    3c6e:	ef 92       	push	r14
    3c70:	ff 92       	push	r15
    3c72:	0f 93       	push	r16
    3c74:	1f 93       	push	r17
    3c76:	cf 93       	push	r28
    3c78:	df 93       	push	r29
    SERIAL.print_P( global_progmem_keycode_editmenu_format_string_2);
    3c7a:	87 e8       	ldi	r24, 0x87	; 135
    3c7c:	91 e0       	ldi	r25, 0x01	; 1
    3c7e:	9f 93       	push	r25
    3c80:	8f 93       	push	r24
    3c82:	ca e1       	ldi	r28, 0x1A	; 26
    3c84:	d1 e0       	ldi	r29, 0x01	; 1
    3c86:	df 93       	push	r29
    3c88:	cf 93       	push	r28
    3c8a:	0e 94 96 07 	call	0xf2c	; 0xf2c <_ZN22navputter_serial_class7print_PEPKcz>
    KP_KEY_LIST
    3c8e:	1f 92       	push	r1
    3c90:	81 e3       	ldi	r24, 0x31	; 49
    3c92:	8f 93       	push	r24
    3c94:	83 e3       	ldi	r24, 0x33	; 51
    3c96:	c8 2e       	mov	r12, r24
    3c98:	84 e0       	ldi	r24, 0x04	; 4
    3c9a:	d8 2e       	mov	r13, r24
    3c9c:	df 92       	push	r13
    3c9e:	cf 92       	push	r12
    3ca0:	00 e8       	ldi	r16, 0x80	; 128
    3ca2:	11 e0       	ldi	r17, 0x01	; 1
    3ca4:	1f 93       	push	r17
    3ca6:	0f 93       	push	r16
    3ca8:	df 93       	push	r29
    3caa:	cf 93       	push	r28
    3cac:	0e 94 96 07 	call	0xf2c	; 0xf2c <_ZN22navputter_serial_class7print_PEPKcz>
    3cb0:	1f 92       	push	r1
    3cb2:	82 e3       	ldi	r24, 0x32	; 50
    3cb4:	8f 93       	push	r24
    3cb6:	9e e4       	ldi	r25, 0x4E	; 78
    3cb8:	e9 2e       	mov	r14, r25
    3cba:	95 e0       	ldi	r25, 0x05	; 5
    3cbc:	f9 2e       	mov	r15, r25
    3cbe:	ff 92       	push	r15
    3cc0:	ef 92       	push	r14
    3cc2:	1f 93       	push	r17
    3cc4:	0f 93       	push	r16
    3cc6:	df 93       	push	r29
    3cc8:	cf 93       	push	r28
    3cca:	0e 94 96 07 	call	0xf2c	; 0xf2c <_ZN22navputter_serial_class7print_PEPKcz>
    3cce:	1f 92       	push	r1
    3cd0:	83 e3       	ldi	r24, 0x33	; 51
    3cd2:	8f 93       	push	r24
    3cd4:	ff 92       	push	r15
    3cd6:	ef 92       	push	r14
    3cd8:	1f 93       	push	r17
    3cda:	0f 93       	push	r16
    3cdc:	df 93       	push	r29
    3cde:	cf 93       	push	r28
    3ce0:	0e 94 96 07 	call	0xf2c	; 0xf2c <_ZN22navputter_serial_class7print_PEPKcz>
    3ce4:	1f 92       	push	r1
    3ce6:	84 e3       	ldi	r24, 0x34	; 52
    3ce8:	8f 93       	push	r24
    3cea:	ff 92       	push	r15
    3cec:	ef 92       	push	r14
    3cee:	1f 93       	push	r17
    3cf0:	0f 93       	push	r16
    3cf2:	df 93       	push	r29
    3cf4:	cf 93       	push	r28
    3cf6:	0e 94 96 07 	call	0xf2c	; 0xf2c <_ZN22navputter_serial_class7print_PEPKcz>
    3cfa:	8d b7       	in	r24, 0x3d	; 61
    3cfc:	9e b7       	in	r25, 0x3e	; 62
    3cfe:	84 96       	adiw	r24, 0x24	; 36
    3d00:	0f b6       	in	r0, 0x3f	; 63
    3d02:	f8 94       	cli
    3d04:	9e bf       	out	0x3e, r25	; 62
    3d06:	0f be       	out	0x3f, r0	; 63
    3d08:	8d bf       	out	0x3d, r24	; 61
    3d0a:	1f 92       	push	r1
    3d0c:	85 e3       	ldi	r24, 0x35	; 53
    3d0e:	8f 93       	push	r24
    3d10:	df 92       	push	r13
    3d12:	cf 92       	push	r12
    3d14:	1f 93       	push	r17
    3d16:	0f 93       	push	r16
    3d18:	df 93       	push	r29
    3d1a:	cf 93       	push	r28
    3d1c:	0e 94 96 07 	call	0xf2c	; 0xf2c <_ZN22navputter_serial_class7print_PEPKcz>
    3d20:	1f 92       	push	r1
    3d22:	86 e3       	ldi	r24, 0x36	; 54
    3d24:	8f 93       	push	r24
    3d26:	ff 92       	push	r15
    3d28:	ef 92       	push	r14
    3d2a:	1f 93       	push	r17
    3d2c:	0f 93       	push	r16
    3d2e:	df 93       	push	r29
    3d30:	cf 93       	push	r28
    3d32:	0e 94 96 07 	call	0xf2c	; 0xf2c <_ZN22navputter_serial_class7print_PEPKcz>
    3d36:	1f 92       	push	r1
    3d38:	87 e3       	ldi	r24, 0x37	; 55
    3d3a:	8f 93       	push	r24
    3d3c:	ff 92       	push	r15
    3d3e:	ef 92       	push	r14
    3d40:	1f 93       	push	r17
    3d42:	0f 93       	push	r16
    3d44:	df 93       	push	r29
    3d46:	cf 93       	push	r28
    3d48:	0e 94 96 07 	call	0xf2c	; 0xf2c <_ZN22navputter_serial_class7print_PEPKcz>
    3d4c:	1f 92       	push	r1
    3d4e:	88 e3       	ldi	r24, 0x38	; 56
    3d50:	8f 93       	push	r24
    3d52:	ff 92       	push	r15
    3d54:	ef 92       	push	r14
    3d56:	1f 93       	push	r17
    3d58:	0f 93       	push	r16
    3d5a:	df 93       	push	r29
    3d5c:	cf 93       	push	r28
    3d5e:	0e 94 96 07 	call	0xf2c	; 0xf2c <_ZN22navputter_serial_class7print_PEPKcz>
    3d62:	8d b7       	in	r24, 0x3d	; 61
    3d64:	9e b7       	in	r25, 0x3e	; 62
    3d66:	80 96       	adiw	r24, 0x20	; 32
    3d68:	0f b6       	in	r0, 0x3f	; 63
    3d6a:	f8 94       	cli
    3d6c:	9e bf       	out	0x3e, r25	; 62
    3d6e:	0f be       	out	0x3f, r0	; 63
    3d70:	8d bf       	out	0x3d, r24	; 61
    3d72:	1f 92       	push	r1
    3d74:	89 e3       	ldi	r24, 0x39	; 57
    3d76:	8f 93       	push	r24
    3d78:	df 92       	push	r13
    3d7a:	cf 92       	push	r12
    3d7c:	1f 93       	push	r17
    3d7e:	0f 93       	push	r16
    3d80:	df 93       	push	r29
    3d82:	cf 93       	push	r28
    3d84:	0e 94 96 07 	call	0xf2c	; 0xf2c <_ZN22navputter_serial_class7print_PEPKcz>
    3d88:	1f 92       	push	r1
    3d8a:	81 e6       	ldi	r24, 0x61	; 97
    3d8c:	8f 93       	push	r24
    3d8e:	ff 92       	push	r15
    3d90:	ef 92       	push	r14
    3d92:	1f 93       	push	r17
    3d94:	0f 93       	push	r16
    3d96:	df 93       	push	r29
    3d98:	cf 93       	push	r28
    3d9a:	0e 94 96 07 	call	0xf2c	; 0xf2c <_ZN22navputter_serial_class7print_PEPKcz>
    3d9e:	1f 92       	push	r1
    3da0:	82 e6       	ldi	r24, 0x62	; 98
    3da2:	8f 93       	push	r24
    3da4:	ff 92       	push	r15
    3da6:	ef 92       	push	r14
    3da8:	1f 93       	push	r17
    3daa:	0f 93       	push	r16
    3dac:	df 93       	push	r29
    3dae:	cf 93       	push	r28
    3db0:	0e 94 96 07 	call	0xf2c	; 0xf2c <_ZN22navputter_serial_class7print_PEPKcz>
    3db4:	1f 92       	push	r1
    3db6:	83 e6       	ldi	r24, 0x63	; 99
    3db8:	8f 93       	push	r24
    3dba:	ff 92       	push	r15
    3dbc:	ef 92       	push	r14
    3dbe:	1f 93       	push	r17
    3dc0:	0f 93       	push	r16
    3dc2:	df 93       	push	r29
    3dc4:	cf 93       	push	r28
    3dc6:	0e 94 96 07 	call	0xf2c	; 0xf2c <_ZN22navputter_serial_class7print_PEPKcz>
    3dca:	8d b7       	in	r24, 0x3d	; 61
    3dcc:	9e b7       	in	r25, 0x3e	; 62
    3dce:	80 96       	adiw	r24, 0x20	; 32
    3dd0:	0f b6       	in	r0, 0x3f	; 63
    3dd2:	f8 94       	cli
    3dd4:	9e bf       	out	0x3e, r25	; 62
    3dd6:	0f be       	out	0x3f, r0	; 63
    3dd8:	8d bf       	out	0x3d, r24	; 61
    3dda:	1f 92       	push	r1
    3ddc:	84 e6       	ldi	r24, 0x64	; 100
    3dde:	8f 93       	push	r24
    3de0:	df 92       	push	r13
    3de2:	cf 92       	push	r12
    3de4:	1f 93       	push	r17
    3de6:	0f 93       	push	r16
    3de8:	df 93       	push	r29
    3dea:	cf 93       	push	r28
    3dec:	0e 94 96 07 	call	0xf2c	; 0xf2c <_ZN22navputter_serial_class7print_PEPKcz>
    3df0:	1f 92       	push	r1
    3df2:	85 e6       	ldi	r24, 0x65	; 101
    3df4:	8f 93       	push	r24
    3df6:	ff 92       	push	r15
    3df8:	ef 92       	push	r14
    3dfa:	1f 93       	push	r17
    3dfc:	0f 93       	push	r16
    3dfe:	df 93       	push	r29
    3e00:	cf 93       	push	r28
    3e02:	0e 94 96 07 	call	0xf2c	; 0xf2c <_ZN22navputter_serial_class7print_PEPKcz>
    3e06:	1f 92       	push	r1
    3e08:	86 e6       	ldi	r24, 0x66	; 102
    3e0a:	8f 93       	push	r24
    3e0c:	ff 92       	push	r15
    3e0e:	ef 92       	push	r14
    3e10:	1f 93       	push	r17
    3e12:	0f 93       	push	r16
    3e14:	df 93       	push	r29
    3e16:	cf 93       	push	r28
    3e18:	0e 94 96 07 	call	0xf2c	; 0xf2c <_ZN22navputter_serial_class7print_PEPKcz>
    3e1c:	1f 92       	push	r1
    3e1e:	87 e6       	ldi	r24, 0x67	; 103
    3e20:	8f 93       	push	r24
    3e22:	ff 92       	push	r15
    3e24:	ef 92       	push	r14
    3e26:	1f 93       	push	r17
    3e28:	0f 93       	push	r16
    3e2a:	df 93       	push	r29
    3e2c:	cf 93       	push	r28
    3e2e:	0e 94 96 07 	call	0xf2c	; 0xf2c <_ZN22navputter_serial_class7print_PEPKcz>
    3e32:	8d b7       	in	r24, 0x3d	; 61
    3e34:	9e b7       	in	r25, 0x3e	; 62
    3e36:	80 96       	adiw	r24, 0x20	; 32
    3e38:	0f b6       	in	r0, 0x3f	; 63
    3e3a:	f8 94       	cli
    3e3c:	9e bf       	out	0x3e, r25	; 62
    3e3e:	0f be       	out	0x3f, r0	; 63
    3e40:	8d bf       	out	0x3d, r24	; 61
    3e42:	1f 92       	push	r1
    3e44:	88 e6       	ldi	r24, 0x68	; 104
    3e46:	8f 93       	push	r24
    3e48:	df 92       	push	r13
    3e4a:	cf 92       	push	r12
    3e4c:	1f 93       	push	r17
    3e4e:	0f 93       	push	r16
    3e50:	df 93       	push	r29
    3e52:	cf 93       	push	r28
    3e54:	0e 94 96 07 	call	0xf2c	; 0xf2c <_ZN22navputter_serial_class7print_PEPKcz>
    3e58:	1f 92       	push	r1
    3e5a:	89 e6       	ldi	r24, 0x69	; 105
    3e5c:	8f 93       	push	r24
    3e5e:	ff 92       	push	r15
    3e60:	ef 92       	push	r14
    3e62:	1f 93       	push	r17
    3e64:	0f 93       	push	r16
    3e66:	df 93       	push	r29
    3e68:	cf 93       	push	r28
    3e6a:	0e 94 96 07 	call	0xf2c	; 0xf2c <_ZN22navputter_serial_class7print_PEPKcz>
    3e6e:	1f 92       	push	r1
    3e70:	8a e6       	ldi	r24, 0x6A	; 106
    3e72:	8f 93       	push	r24
    3e74:	ff 92       	push	r15
    3e76:	ef 92       	push	r14
    3e78:	1f 93       	push	r17
    3e7a:	0f 93       	push	r16
    3e7c:	df 93       	push	r29
    3e7e:	cf 93       	push	r28
    3e80:	0e 94 96 07 	call	0xf2c	; 0xf2c <_ZN22navputter_serial_class7print_PEPKcz>
    SERIAL.print_P( eoln_str );
    3e84:	8c e3       	ldi	r24, 0x3C	; 60
    3e86:	91 e0       	ldi	r25, 0x01	; 1
    3e88:	9f 93       	push	r25
    3e8a:	8f 93       	push	r24
    3e8c:	df 93       	push	r29
    3e8e:	cf 93       	push	r28
    3e90:	0e 94 96 07 	call	0xf2c	; 0xf2c <_ZN22navputter_serial_class7print_PEPKcz>
    SERIAL.print_P( keycode_menu_str_1);
    3e94:	81 e4       	ldi	r24, 0x41	; 65
    3e96:	91 e0       	ldi	r25, 0x01	; 1
    3e98:	9f 93       	push	r25
    3e9a:	8f 93       	push	r24
    3e9c:	df 93       	push	r29
    3e9e:	cf 93       	push	r28
    3ea0:	0e 94 96 07 	call	0xf2c	; 0xf2c <_ZN22navputter_serial_class7print_PEPKcz>
}
    3ea4:	8d b7       	in	r24, 0x3d	; 61
    3ea6:	9e b7       	in	r25, 0x3e	; 62
    3ea8:	80 96       	adiw	r24, 0x20	; 32
    3eaa:	0f b6       	in	r0, 0x3f	; 63
    3eac:	f8 94       	cli
    3eae:	9e bf       	out	0x3e, r25	; 62
    3eb0:	0f be       	out	0x3f, r0	; 63
    3eb2:	8d bf       	out	0x3d, r24	; 61
    3eb4:	df 91       	pop	r29
    3eb6:	cf 91       	pop	r28
    3eb8:	1f 91       	pop	r17
    3eba:	0f 91       	pop	r16
    3ebc:	ff 90       	pop	r15
    3ebe:	ef 90       	pop	r14
    3ec0:	df 90       	pop	r13
    3ec2:	cf 90       	pop	r12
    3ec4:	08 95       	ret

00003ec6 <_ZN28navputter_keycode_menu_class11edit_keymapEv>:
{
    3ec6:	cf 93       	push	r28
    3ec8:	df 93       	push	r29
    3eca:	ec 01       	movw	r28, r24
    show_keymap();
    3ecc:	13 dd       	rcall	.-1498   	; 0x38f4 <_ZN28navputter_keycode_menu_class11show_keymapEv>
    key_edit_usage();
    3ece:	ce 01       	movw	r24, r28
    3ed0:	cc de       	rcall	.-616    	; 0x3c6a <_ZN28navputter_keycode_menu_class14key_edit_usageEv>
    3ed2:	88 e0       	ldi	r24, 0x08	; 8
    3ed4:	8a 83       	std	Y+2, r24	; 0x02
}
    3ed6:	df 91       	pop	r29
    3ed8:	cf 91       	pop	r28
    3eda:	08 95       	ret

00003edc <_ZN28navputter_keycode_menu_class18edit_pin_map_usageEv>:
{
    3edc:	2f 92       	push	r2
    3ede:	3f 92       	push	r3
    3ee0:	4f 92       	push	r4
    3ee2:	5f 92       	push	r5
    3ee4:	7f 92       	push	r7
    3ee6:	8f 92       	push	r8
    3ee8:	9f 92       	push	r9
    3eea:	af 92       	push	r10
    3eec:	bf 92       	push	r11
    3eee:	cf 92       	push	r12
    3ef0:	df 92       	push	r13
    3ef2:	ef 92       	push	r14
    3ef4:	ff 92       	push	r15
    3ef6:	0f 93       	push	r16
    3ef8:	1f 93       	push	r17
    3efa:	cf 93       	push	r28
    3efc:	df 93       	push	r29
    3efe:	6c 01       	movw	r12, r24
    SERIAL.print_P(global_dump_keymap_string_4, EOLN);
    3f00:	83 e3       	ldi	r24, 0x33	; 51
    3f02:	94 e0       	ldi	r25, 0x04	; 4
    3f04:	9f 93       	push	r25
    3f06:	8f 93       	push	r24
    3f08:	88 eb       	ldi	r24, 0xB8	; 184
    3f0a:	90 e0       	ldi	r25, 0x00	; 0
    3f0c:	9f 93       	push	r25
    3f0e:	8f 93       	push	r24
    3f10:	8a e1       	ldi	r24, 0x1A	; 26
    3f12:	91 e0       	ldi	r25, 0x01	; 1
    3f14:	9f 93       	push	r25
    3f16:	8f 93       	push	r24
    3f18:	0e 94 96 07 	call	0xf2c	; 0xf2c <_ZN22navputter_serial_class7print_PEPKcz>
    for (r=0; r< MAX_KEY_ROWS; r++)
    3f1c:	76 01       	movw	r14, r12
    3f1e:	0f 90       	pop	r0
    3f20:	0f 90       	pop	r0
    3f22:	0f 90       	pop	r0
    3f24:	0f 90       	pop	r0
    3f26:	0f 90       	pop	r0
    3f28:	0f 90       	pop	r0
    SERIAL.print_P(global_dump_keymap_string_4, EOLN);
    3f2a:	10 e0       	ldi	r17, 0x00	; 0
    3f2c:	00 e0       	ldi	r16, 0x00	; 0
        SERIAL.print_P(global_dump_keymap_string_5,r);
    3f2e:	ca e1       	ldi	r28, 0x1A	; 26
    3f30:	d1 e0       	ldi	r29, 0x01	; 1
                    SERIAL.print("    " );
    3f32:	88 e3       	ldi	r24, 0x38	; 56
    3f34:	28 2e       	mov	r2, r24
    3f36:	88 e0       	ldi	r24, 0x08	; 8
    3f38:	38 2e       	mov	r3, r24
                    SERIAL.print("%2.2d  ",m_key_map[r][c]);
    3f3a:	90 e3       	ldi	r25, 0x30	; 48
    3f3c:	49 2e       	mov	r4, r25
    3f3e:	98 e0       	ldi	r25, 0x08	; 8
    3f40:	59 2e       	mov	r5, r25
        SERIAL.print(EOLN);
    3f42:	23 e3       	ldi	r18, 0x33	; 51
    3f44:	82 2e       	mov	r8, r18
    3f46:	24 e0       	ldi	r18, 0x04	; 4
    3f48:	92 2e       	mov	r9, r18
        SERIAL.print_P(global_dump_keymap_string_5,r);
    3f4a:	1f 93       	push	r17
    3f4c:	0f 93       	push	r16
    3f4e:	8c ea       	ldi	r24, 0xAC	; 172
    3f50:	90 e0       	ldi	r25, 0x00	; 0
    3f52:	9f 93       	push	r25
    3f54:	8f 93       	push	r24
    3f56:	df 93       	push	r29
    3f58:	cf 93       	push	r28
    3f5a:	0e 94 96 07 	call	0xf2c	; 0xf2c <_ZN22navputter_serial_class7print_PEPKcz>
    3f5e:	0f 90       	pop	r0
    3f60:	0f 90       	pop	r0
    3f62:	0f 90       	pop	r0
    3f64:	0f 90       	pop	r0
    3f66:	0f 90       	pop	r0
    3f68:	0f 90       	pop	r0
    3f6a:	57 01       	movw	r10, r14
        for (c=0; c<MAX_KEY_COLS; c++)
    3f6c:	71 2c       	mov	r7, r1
            if ( (m_edit_pin_row == r) && (m_edit_pin_col == c))
    3f6e:	f6 01       	movw	r30, r12
    3f70:	83 81       	ldd	r24, Z+3	; 0x03
    3f72:	80 13       	cpse	r24, r16
    3f74:	10 c0       	rjmp	.+32     	; 0x3f96 <_ZN28navputter_keycode_menu_class18edit_pin_map_usageEv+0xba>
    3f76:	84 81       	ldd	r24, Z+4	; 0x04
    3f78:	87 11       	cpse	r24, r7
    3f7a:	0d c0       	rjmp	.+26     	; 0x3f96 <_ZN28navputter_keycode_menu_class18edit_pin_map_usageEv+0xba>
                SERIAL.print("XX  ");
    3f7c:	8b e2       	ldi	r24, 0x2B	; 43
    3f7e:	98 e0       	ldi	r25, 0x08	; 8
    3f80:	9f 93       	push	r25
    3f82:	8f 93       	push	r24
    3f84:	df 93       	push	r29
    3f86:	cf 93       	push	r28
                    SERIAL.print("    " );
    3f88:	0e 94 94 03 	call	0x728	; 0x728 <_ZN22navputter_serial_class5printEPKcz>
    3f8c:	0f 90       	pop	r0
    3f8e:	0f 90       	pop	r0
    3f90:	0f 90       	pop	r0
    3f92:	0f 90       	pop	r0
    3f94:	13 c0       	rjmp	.+38     	; 0x3fbc <_ZN28navputter_keycode_menu_class18edit_pin_map_usageEv+0xe0>
                if ( m_key_map[r][c] != 0xff)
    3f96:	f5 01       	movw	r30, r10
    3f98:	87 85       	ldd	r24, Z+15	; 0x0f
    3f9a:	8f 3f       	cpi	r24, 0xFF	; 255
    3f9c:	09 f4       	brne	.+2      	; 0x3fa0 <_ZN28navputter_keycode_menu_class18edit_pin_map_usageEv+0xc4>
    3f9e:	44 c0       	rjmp	.+136    	; 0x4028 <_ZN28navputter_keycode_menu_class18edit_pin_map_usageEv+0x14c>
                    SERIAL.print("%2.2d  ",m_key_map[r][c]);
    3fa0:	1f 92       	push	r1
    3fa2:	8f 93       	push	r24
    3fa4:	5f 92       	push	r5
    3fa6:	4f 92       	push	r4
    3fa8:	df 93       	push	r29
    3faa:	cf 93       	push	r28
    3fac:	0e 94 94 03 	call	0x728	; 0x728 <_ZN22navputter_serial_class5printEPKcz>
    3fb0:	0f 90       	pop	r0
    3fb2:	0f 90       	pop	r0
    3fb4:	0f 90       	pop	r0
    3fb6:	0f 90       	pop	r0
    3fb8:	0f 90       	pop	r0
    3fba:	0f 90       	pop	r0
        for (c=0; c<MAX_KEY_COLS; c++)
    3fbc:	73 94       	inc	r7
    3fbe:	ef ef       	ldi	r30, 0xFF	; 255
    3fc0:	ae 1a       	sub	r10, r30
    3fc2:	be 0a       	sbc	r11, r30
    3fc4:	f6 e0       	ldi	r31, 0x06	; 6
    3fc6:	7f 12       	cpse	r7, r31
    3fc8:	d2 cf       	rjmp	.-92     	; 0x3f6e <_ZN28navputter_keycode_menu_class18edit_pin_map_usageEv+0x92>
        SERIAL.print(EOLN);
    3fca:	9f 92       	push	r9
    3fcc:	8f 92       	push	r8
    3fce:	df 93       	push	r29
    3fd0:	cf 93       	push	r28
    3fd2:	0e 94 94 03 	call	0x728	; 0x728 <_ZN22navputter_serial_class5printEPKcz>
    3fd6:	0f 5f       	subi	r16, 0xFF	; 255
    3fd8:	1f 4f       	sbci	r17, 0xFF	; 255
    3fda:	96 e0       	ldi	r25, 0x06	; 6
    3fdc:	e9 0e       	add	r14, r25
    3fde:	f1 1c       	adc	r15, r1
    for (r=0; r< MAX_KEY_ROWS; r++)
    3fe0:	0f 90       	pop	r0
    3fe2:	0f 90       	pop	r0
    3fe4:	0f 90       	pop	r0
    3fe6:	0f 90       	pop	r0
    3fe8:	06 30       	cpi	r16, 0x06	; 6
    3fea:	11 05       	cpc	r17, r1
    3fec:	09 f0       	breq	.+2      	; 0x3ff0 <_ZN28navputter_keycode_menu_class18edit_pin_map_usageEv+0x114>
    3fee:	ad cf       	rjmp	.-166    	; 0x3f4a <_ZN28navputter_keycode_menu_class18edit_pin_map_usageEv+0x6e>
    SERIAL.print(EOLN);
    3ff0:	9f 92       	push	r9
    3ff2:	8f 92       	push	r8
    3ff4:	df 93       	push	r29
    3ff6:	cf 93       	push	r28
    3ff8:	0e 94 94 03 	call	0x728	; 0x728 <_ZN22navputter_serial_class5printEPKcz>
} 
    3ffc:	0f 90       	pop	r0
    3ffe:	0f 90       	pop	r0
    4000:	0f 90       	pop	r0
    4002:	0f 90       	pop	r0
    4004:	df 91       	pop	r29
    4006:	cf 91       	pop	r28
    4008:	1f 91       	pop	r17
    400a:	0f 91       	pop	r16
    400c:	ff 90       	pop	r15
    400e:	ef 90       	pop	r14
    4010:	df 90       	pop	r13
    4012:	cf 90       	pop	r12
    4014:	bf 90       	pop	r11
    4016:	af 90       	pop	r10
    4018:	9f 90       	pop	r9
    401a:	8f 90       	pop	r8
    401c:	7f 90       	pop	r7
    401e:	5f 90       	pop	r5
    4020:	4f 90       	pop	r4
    4022:	3f 90       	pop	r3
    4024:	2f 90       	pop	r2
    4026:	08 95       	ret
                    SERIAL.print("    " );
    4028:	3f 92       	push	r3
    402a:	2f 92       	push	r2
    402c:	df 93       	push	r29
    402e:	cf 93       	push	r28
    4030:	ab cf       	rjmp	.-170    	; 0x3f88 <_ZN28navputter_keycode_menu_class18edit_pin_map_usageEv+0xac>

00004032 <_ZN28navputter_keycode_menu_class12edit_pin_mapEv>:
{
    4032:	cf 92       	push	r12
    4034:	df 92       	push	r13
    4036:	ef 92       	push	r14
    4038:	ff 92       	push	r15
    403a:	0f 93       	push	r16
    403c:	1f 93       	push	r17
    403e:	cf 93       	push	r28
    4040:	df 93       	push	r29
    4042:	6c 01       	movw	r12, r24
    KEY_PIN_MENU
    4044:	83 e3       	ldi	r24, 0x33	; 51
    4046:	e8 2e       	mov	r14, r24
    4048:	84 e0       	ldi	r24, 0x04	; 4
    404a:	f8 2e       	mov	r15, r24
    404c:	ff 92       	push	r15
    404e:	ef 92       	push	r14
    4050:	8d e3       	ldi	r24, 0x3D	; 61
    4052:	98 e0       	ldi	r25, 0x08	; 8
    4054:	9f 93       	push	r25
    4056:	8f 93       	push	r24
    4058:	1f 92       	push	r1
    405a:	83 e6       	ldi	r24, 0x63	; 99
    405c:	8f 93       	push	r24
    405e:	0e e7       	ldi	r16, 0x7E	; 126
    4060:	15 e0       	ldi	r17, 0x05	; 5
    4062:	1f 93       	push	r17
    4064:	0f 93       	push	r16
    4066:	ca e1       	ldi	r28, 0x1A	; 26
    4068:	d1 e0       	ldi	r29, 0x01	; 1
    406a:	df 93       	push	r29
    406c:	cf 93       	push	r28
    406e:	0e 94 94 03 	call	0x728	; 0x728 <_ZN22navputter_serial_class5printEPKcz>
    4072:	ff 92       	push	r15
    4074:	ef 92       	push	r14
    4076:	89 e4       	ldi	r24, 0x49	; 73
    4078:	98 e0       	ldi	r25, 0x08	; 8
    407a:	9f 93       	push	r25
    407c:	8f 93       	push	r24
    407e:	1f 92       	push	r1
    4080:	82 e7       	ldi	r24, 0x72	; 114
    4082:	8f 93       	push	r24
    4084:	1f 93       	push	r17
    4086:	0f 93       	push	r16
    4088:	df 93       	push	r29
    408a:	cf 93       	push	r28
    408c:	0e 94 94 03 	call	0x728	; 0x728 <_ZN22navputter_serial_class5printEPKcz>
    4090:	ff 92       	push	r15
    4092:	ef 92       	push	r14
    4094:	82 e5       	ldi	r24, 0x52	; 82
    4096:	98 e0       	ldi	r25, 0x08	; 8
    4098:	9f 93       	push	r25
    409a:	8f 93       	push	r24
    409c:	1f 92       	push	r1
    409e:	85 e6       	ldi	r24, 0x65	; 101
    40a0:	8f 93       	push	r24
    40a2:	1f 93       	push	r17
    40a4:	0f 93       	push	r16
    40a6:	df 93       	push	r29
    40a8:	cf 93       	push	r28
    40aa:	0e 94 94 03 	call	0x728	; 0x728 <_ZN22navputter_serial_class5printEPKcz>
    40ae:	ff 92       	push	r15
    40b0:	ef 92       	push	r14
    40b2:	87 e5       	ldi	r24, 0x57	; 87
    40b4:	98 e0       	ldi	r25, 0x08	; 8
    40b6:	9f 93       	push	r25
    40b8:	8f 93       	push	r24
    40ba:	1f 92       	push	r1
    40bc:	81 e7       	ldi	r24, 0x71	; 113
    40be:	8f 93       	push	r24
    40c0:	1f 93       	push	r17
    40c2:	0f 93       	push	r16
    40c4:	df 93       	push	r29
    40c6:	cf 93       	push	r28
    40c8:	0e 94 94 03 	call	0x728	; 0x728 <_ZN22navputter_serial_class5printEPKcz>
    m_edit_pin_row = 0;
    40cc:	f6 01       	movw	r30, r12
    40ce:	13 82       	std	Z+3, r1	; 0x03
    m_edit_pin_col = 0;
    40d0:	14 82       	std	Z+4, r1	; 0x04
    m_int_ix = 0;
    40d2:	ec 52       	subi	r30, 0x2C	; 44
    40d4:	ff 4f       	sbci	r31, 0xFF	; 255
    40d6:	10 82       	st	Z, r1
    edit_pin_map_usage();
    40d8:	8d b7       	in	r24, 0x3d	; 61
    40da:	9e b7       	in	r25, 0x3e	; 62
    40dc:	88 96       	adiw	r24, 0x28	; 40
    40de:	0f b6       	in	r0, 0x3f	; 63
    40e0:	f8 94       	cli
    40e2:	9e bf       	out	0x3e, r25	; 62
    40e4:	0f be       	out	0x3f, r0	; 63
    40e6:	8d bf       	out	0x3d, r24	; 61
    40e8:	c6 01       	movw	r24, r12
    40ea:	f8 de       	rcall	.-528    	; 0x3edc <_ZN28navputter_keycode_menu_class18edit_pin_map_usageEv>
    40ec:	8f e0       	ldi	r24, 0x0F	; 15
    40ee:	f6 01       	movw	r30, r12
    40f0:	82 83       	std	Z+2, r24	; 0x02
}
    40f2:	df 91       	pop	r29
    40f4:	cf 91       	pop	r28
    40f6:	1f 91       	pop	r17
    40f8:	0f 91       	pop	r16
    40fa:	ff 90       	pop	r15
    40fc:	ef 90       	pop	r14
    40fe:	df 90       	pop	r13
    4100:	cf 90       	pop	r12
    4102:	08 95       	ret

00004104 <_ZN28navputter_keycode_menu_class11save_keymapEv>:
{
    4104:	cf 93       	push	r28
    4106:	df 93       	push	r29
    4108:	ec 01       	movw	r28, r24
    if ( CONFIG.key_maps )
    410a:	20 91 6e 03 	lds	r18, 0x036E	; 0x80036e <myputter+0x26e>
    410e:	22 23       	and	r18, r18
    4110:	d1 f0       	breq	.+52     	; 0x4146 <_ZN28navputter_keycode_menu_class11save_keymapEv+0x42>
        SERIAL.print_P( global_save_keymap_string_1, EOLN, CONFIG.key_maps, EOLN );
    4112:	83 e3       	ldi	r24, 0x33	; 51
    4114:	94 e0       	ldi	r25, 0x04	; 4
    4116:	9f 93       	push	r25
    4118:	8f 93       	push	r24
    411a:	1f 92       	push	r1
    411c:	2f 93       	push	r18
    411e:	9f 93       	push	r25
    4120:	8f 93       	push	r24
    4122:	83 e0       	ldi	r24, 0x03	; 3
    4124:	91 e0       	ldi	r25, 0x01	; 1
    4126:	9f 93       	push	r25
    4128:	8f 93       	push	r24
    412a:	8a e1       	ldi	r24, 0x1A	; 26
    412c:	91 e0       	ldi	r25, 0x01	; 1
    412e:	9f 93       	push	r25
    4130:	8f 93       	push	r24
    4132:	0e 94 96 07 	call	0xf2c	; 0xf2c <_ZN22navputter_serial_class7print_PEPKcz>
    4136:	8d b7       	in	r24, 0x3d	; 61
    4138:	9e b7       	in	r25, 0x3e	; 62
    413a:	0a 96       	adiw	r24, 0x0a	; 10
    413c:	0f b6       	in	r0, 0x3f	; 63
    413e:	f8 94       	cli
    4140:	9e bf       	out	0x3e, r25	; 62
    4142:	0f be       	out	0x3f, r0	; 63
    4144:	8d bf       	out	0x3d, r24	; 61
    SERIAL.print_P( global_save_keymap_string_2, CONFIG.key_maps, CONFIG.key_maps );
    4146:	80 91 6e 03 	lds	r24, 0x036E	; 0x80036e <myputter+0x26e>
    414a:	1f 92       	push	r1
    414c:	8f 93       	push	r24
    414e:	1f 92       	push	r1
    4150:	8f 93       	push	r24
    4152:	89 ed       	ldi	r24, 0xD9	; 217
    4154:	90 e0       	ldi	r25, 0x00	; 0
    4156:	9f 93       	push	r25
    4158:	8f 93       	push	r24
    415a:	8a e1       	ldi	r24, 0x1A	; 26
    415c:	91 e0       	ldi	r25, 0x01	; 1
    415e:	9f 93       	push	r25
    4160:	8f 93       	push	r24
    4162:	0e 94 96 07 	call	0xf2c	; 0xf2c <_ZN22navputter_serial_class7print_PEPKcz>
    4166:	8c e0       	ldi	r24, 0x0C	; 12
    4168:	8a 83       	std	Y+2, r24	; 0x02
}
    416a:	8d b7       	in	r24, 0x3d	; 61
    416c:	9e b7       	in	r25, 0x3e	; 62
    416e:	08 96       	adiw	r24, 0x08	; 8
    4170:	0f b6       	in	r0, 0x3f	; 63
    4172:	f8 94       	cli
    4174:	9e bf       	out	0x3e, r25	; 62
    4176:	0f be       	out	0x3f, r0	; 63
    4178:	8d bf       	out	0x3d, r24	; 61
    417a:	df 91       	pop	r29
    417c:	cf 91       	pop	r28
    417e:	08 95       	ret

00004180 <_ZN28navputter_keycode_menu_class4quitEv>:
    myputter.clear_menu();
    4180:	0e 94 82 03 	call	0x704	; 0x704 <_ZN15navputter_class10clear_menuEv.isra.25.constprop.30>
    return malloc(objsize); 
    4184:	83 e0       	ldi	r24, 0x03	; 3
    4186:	90 e0       	ldi	r25, 0x00	; 0
    4188:	0e 94 35 2f 	call	0x5e6a	; 0x5e6a <malloc>
    navputter_main_menu_class *mm = new navputter_main_menu_class();
    418c:	fc 01       	movw	r30, r24
    418e:	12 82       	std	Z+2, r1	; 0x02
class navputter_main_menu_class : public navputter_menu_base_class
    4190:	20 e8       	ldi	r18, 0x80	; 128
    4192:	38 e0       	ldi	r19, 0x08	; 8
    4194:	31 83       	std	Z+1, r19	; 0x01
    4196:	20 83       	st	Z, r18
    assert(mm);
    4198:	00 97       	sbiw	r24, 0x00	; 0
    419a:	11 f4       	brne	.+4      	; 0x41a0 <_ZN28navputter_keycode_menu_class4quitEv+0x20>
    419c:	0e 94 6a 31 	call	0x62d4	; 0x62d4 <abort>
    myputter.set_menu(mm);
    41a0:	bc 01       	movw	r22, r24
    41a2:	80 e0       	ldi	r24, 0x00	; 0
    41a4:	91 e0       	ldi	r25, 0x01	; 1
    41a6:	0c 94 be 08 	jmp	0x117c	; 0x117c <_ZN15navputter_class8set_menuEP25navputter_menu_base_class>

000041aa <_ZN28navputter_keycode_menu_class4pollEv>:
{
    41aa:	ef 92       	push	r14
    41ac:	ff 92       	push	r15
    41ae:	0f 93       	push	r16
    41b0:	1f 93       	push	r17
    41b2:	cf 93       	push	r28
    41b4:	df 93       	push	r29
    41b6:	ec 01       	movw	r28, r24
    switch( get_state() )
    41b8:	8a 81       	ldd	r24, Y+2	; 0x02
        return m_state;
    41ba:	8c 30       	cpi	r24, 0x0C	; 12
    41bc:	09 f4       	brne	.+2      	; 0x41c0 <_ZN28navputter_keycode_menu_class4pollEv+0x16>
    41be:	2c c3       	rjmp	.+1624   	; 0x4818 <_ZN28navputter_keycode_menu_class4pollEv+0x66e>
    41c0:	f0 f5       	brcc	.+124    	; 0x423e <_ZN28navputter_keycode_menu_class4pollEv+0x94>
    41c2:	88 30       	cpi	r24, 0x08	; 8
    41c4:	09 f4       	brne	.+2      	; 0x41c8 <_ZN28navputter_keycode_menu_class4pollEv+0x1e>
    41c6:	ca c0       	rjmp	.+404    	; 0x435c <_ZN28navputter_keycode_menu_class4pollEv+0x1b2>
    41c8:	40 f4       	brcc	.+16     	; 0x41da <_ZN28navputter_keycode_menu_class4pollEv+0x30>
    41ca:	88 23       	and	r24, r24
    41cc:	09 f4       	brne	.+2      	; 0x41d0 <_ZN28navputter_keycode_menu_class4pollEv+0x26>
    41ce:	76 c0       	rjmp	.+236    	; 0x42bc <_ZN28navputter_keycode_menu_class4pollEv+0x112>
            myputter.error( ERROR_KEYMAP_EDITOR_INVALID_STATE );
    41d0:	88 e0       	ldi	r24, 0x08	; 8
    41d2:	0e 94 0b 07 	call	0xe16	; 0xe16 <_ZN15navputter_class5errorEh.constprop.29>
            assert(0);
    41d6:	0e 94 6a 31 	call	0x62d4	; 0x62d4 <abort>
    41da:	8a 30       	cpi	r24, 0x0A	; 10
    41dc:	09 f4       	brne	.+2      	; 0x41e0 <_ZN28navputter_keycode_menu_class4pollEv+0x36>
    41de:	b7 c2       	rjmp	.+1390   	; 0x474e <_ZN28navputter_keycode_menu_class4pollEv+0x5a4>
    41e0:	8b 30       	cpi	r24, 0x0B	; 11
    41e2:	b1 f7       	brne	.-20     	; 0x41d0 <_ZN28navputter_keycode_menu_class4pollEv+0x26>
            c = SERIAL.read();
    41e4:	8a e1       	ldi	r24, 0x1A	; 26
    41e6:	91 e0       	ldi	r25, 0x01	; 1
    41e8:	0e 94 0d 03 	call	0x61a	; 0x61a <_ZN22navputter_serial_class4readEv>
            if ( c == 0xff ) return;
    41ec:	8f 3f       	cpi	r24, 0xFF	; 255
    41ee:	09 f4       	brne	.+2      	; 0x41f2 <_ZN28navputter_keycode_menu_class4pollEv+0x48>
    41f0:	ef c0       	rjmp	.+478    	; 0x43d0 <_ZN28navputter_keycode_menu_class4pollEv+0x226>
            if ( !isdigit( c ) )
    41f2:	48 2f       	mov	r20, r24
    41f4:	40 53       	subi	r20, 0x30	; 48
    41f6:	55 0b       	sbc	r21, r21
    41f8:	4a 30       	cpi	r20, 0x0A	; 10
    41fa:	51 05       	cpc	r21, r1
    41fc:	08 f4       	brcc	.+2      	; 0x4200 <_ZN28navputter_keycode_menu_class4pollEv+0x56>
    41fe:	3c c3       	rjmp	.+1656   	; 0x4878 <_ZN28navputter_keycode_menu_class4pollEv+0x6ce>
                if ( c == '\n' || c == '\r' )
    4200:	8a 30       	cpi	r24, 0x0A	; 10
    4202:	11 f0       	breq	.+4      	; 0x4208 <_ZN28navputter_keycode_menu_class4pollEv+0x5e>
    4204:	8d 30       	cpi	r24, 0x0D	; 13
    4206:	b9 f4       	brne	.+46     	; 0x4236 <_ZN28navputter_keycode_menu_class4pollEv+0x8c>
                    m_int_value[m_int_ix]=0;
    4208:	fe 01       	movw	r30, r28
    420a:	ec 52       	subi	r30, 0x2C	; 44
    420c:	ff 4f       	sbci	r31, 0xFF	; 255
    420e:	e0 81       	ld	r30, Z
    4210:	ec 0f       	add	r30, r28
    4212:	fd 2f       	mov	r31, r29
    4214:	f1 1d       	adc	r31, r1
    4216:	e4 53       	subi	r30, 0x34	; 52
    4218:	ff 4f       	sbci	r31, 0xFF	; 255
    421a:	10 82       	st	Z, r1
                    uint8_t i = atoi((const char *)m_int_value);
    421c:	ce 01       	movw	r24, r28
    421e:	84 53       	subi	r24, 0x34	; 52
    4220:	9f 4f       	sbci	r25, 0xFF	; 255
    4222:	0e 94 6e 31 	call	0x62dc	; 0x62dc <atoi>
                    if ( i >= CONFIG.key_maps )
    4226:	90 91 6e 03 	lds	r25, 0x036E	; 0x80036e <myputter+0x26e>
    422a:	89 17       	cp	r24, r25
    422c:	08 f4       	brcc	.+2      	; 0x4230 <_ZN28navputter_keycode_menu_class4pollEv+0x86>
    422e:	df c2       	rjmp	.+1470   	; 0x47ee <_ZN28navputter_keycode_menu_class4pollEv+0x644>
                        myputter.error( ERROR_KEYMAP_OUT_OF_RANGE );
    4230:	89 e0       	ldi	r24, 0x09	; 9
    4232:	0e 94 0b 07 	call	0xe16	; 0xe16 <_ZN15navputter_class5errorEh.constprop.29>
                myputter.error( ERROR_KEYMAP_NOT_A_NUMBER );
    4236:	8a e0       	ldi	r24, 0x0A	; 10
    4238:	0e 94 0b 07 	call	0xe16	; 0xe16 <_ZN15navputter_class5errorEh.constprop.29>
    423c:	97 c0       	rjmp	.+302    	; 0x436c <_ZN28navputter_keycode_menu_class4pollEv+0x1c2>
    423e:	8e 30       	cpi	r24, 0x0E	; 14
    4240:	09 f4       	brne	.+2      	; 0x4244 <_ZN28navputter_keycode_menu_class4pollEv+0x9a>
    4242:	d8 c2       	rjmp	.+1456   	; 0x47f4 <_ZN28navputter_keycode_menu_class4pollEv+0x64a>
    4244:	08 f4       	brcc	.+2      	; 0x4248 <_ZN28navputter_keycode_menu_class4pollEv+0x9e>
    4246:	c4 c0       	rjmp	.+392    	; 0x43d0 <_ZN28navputter_keycode_menu_class4pollEv+0x226>
    4248:	8f 30       	cpi	r24, 0x0F	; 15
    424a:	09 f4       	brne	.+2      	; 0x424e <_ZN28navputter_keycode_menu_class4pollEv+0xa4>
    424c:	22 c3       	rjmp	.+1604   	; 0x4892 <_ZN28navputter_keycode_menu_class4pollEv+0x6e8>
    424e:	80 31       	cpi	r24, 0x10	; 16
    4250:	09 f0       	breq	.+2      	; 0x4254 <_ZN28navputter_keycode_menu_class4pollEv+0xaa>
    4252:	be cf       	rjmp	.-132    	; 0x41d0 <_ZN28navputter_keycode_menu_class4pollEv+0x26>
            c = SERIAL.read();
    4254:	8a e1       	ldi	r24, 0x1A	; 26
    4256:	91 e0       	ldi	r25, 0x01	; 1
    4258:	0e 94 0d 03 	call	0x61a	; 0x61a <_ZN22navputter_serial_class4readEv>
            if ( c == 0xff ) return;
    425c:	8f 3f       	cpi	r24, 0xFF	; 255
    425e:	09 f4       	brne	.+2      	; 0x4262 <_ZN28navputter_keycode_menu_class4pollEv+0xb8>
    4260:	b7 c0       	rjmp	.+366    	; 0x43d0 <_ZN28navputter_keycode_menu_class4pollEv+0x226>
            if ( isdigit(c) )
    4262:	de 01       	movw	r26, r28
    4264:	ac 52       	subi	r26, 0x2C	; 44
    4266:	bf 4f       	sbci	r27, 0xFF	; 255
    4268:	48 2f       	mov	r20, r24
    426a:	40 53       	subi	r20, 0x30	; 48
    426c:	55 0b       	sbc	r21, r21
    426e:	4a 30       	cpi	r20, 0x0A	; 10
    4270:	51 05       	cpc	r21, r1
    4272:	50 f4       	brcc	.+20     	; 0x4288 <_ZN28navputter_keycode_menu_class4pollEv+0xde>
    4274:	ec 91       	ld	r30, X
                m_int_value[m_int_ix++]=c;
    4276:	91 e0       	ldi	r25, 0x01	; 1
    4278:	9e 0f       	add	r25, r30
    427a:	9c 93       	st	X, r25
    427c:	ec 0f       	add	r30, r28
    427e:	fd 2f       	mov	r31, r29
    4280:	f1 1d       	adc	r31, r1
    4282:	e4 53       	subi	r30, 0x34	; 52
    4284:	ff 4f       	sbci	r31, 0xFF	; 255
    4286:	80 83       	st	Z, r24
            if ( m_int_ix >= 1 )
    4288:	eb 80       	ldd	r14, Y+3	; 0x03
    428a:	f1 2c       	mov	r15, r1
    428c:	ec 81       	ldd	r30, Y+4	; 0x04
    428e:	0e 2f       	mov	r16, r30
    4290:	10 e0       	ldi	r17, 0x00	; 0
    4292:	8c 91       	ld	r24, X
    4294:	88 23       	and	r24, r24
    4296:	09 f4       	brne	.+2      	; 0x429a <_ZN28navputter_keycode_menu_class4pollEv+0xf0>
    4298:	1a c3       	rjmp	.+1588   	; 0x48ce <_ZN28navputter_keycode_menu_class4pollEv+0x724>
                uint8_t i = atoi((const char *)m_int_value);
    429a:	ce 01       	movw	r24, r28
    429c:	84 53       	subi	r24, 0x34	; 52
    429e:	9f 4f       	sbci	r25, 0xFF	; 255
    42a0:	0e 94 6e 31 	call	0x62dc	; 0x62dc <atoi>
                m_key_map[m_edit_pin_row][m_edit_pin_col] = i;
    42a4:	96 e0       	ldi	r25, 0x06	; 6
    42a6:	9e 9d       	mul	r25, r14
    42a8:	f0 01       	movw	r30, r0
    42aa:	9f 9d       	mul	r25, r15
    42ac:	f0 0d       	add	r31, r0
    42ae:	11 24       	eor	r1, r1
    42b0:	ec 0f       	add	r30, r28
    42b2:	fd 1f       	adc	r31, r29
    42b4:	e0 0f       	add	r30, r16
    42b6:	f1 1f       	adc	r31, r17
                m_key_map[m_edit_pin_row][m_edit_pin_col] = 0xff;
    42b8:	87 87       	std	Z+15, r24	; 0x0f
    42ba:	31 c0       	rjmp	.+98     	; 0x431e <_ZN28navputter_keycode_menu_class4pollEv+0x174>
            c = SERIAL.read();
    42bc:	8a e1       	ldi	r24, 0x1A	; 26
    42be:	91 e0       	ldi	r25, 0x01	; 1
    42c0:	0e 94 0d 03 	call	0x61a	; 0x61a <_ZN22navputter_serial_class4readEv>
            if ( c==0xff ) return;
    42c4:	8f 3f       	cpi	r24, 0xFF	; 255
    42c6:	09 f4       	brne	.+2      	; 0x42ca <_ZN28navputter_keycode_menu_class4pollEv+0x120>
    42c8:	83 c0       	rjmp	.+262    	; 0x43d0 <_ZN28navputter_keycode_menu_class4pollEv+0x226>
                KEYCODE_MENU_LIST
    42ca:	8c 36       	cpi	r24, 0x6C	; 108
    42cc:	41 f4       	brne	.+16     	; 0x42de <_ZN28navputter_keycode_menu_class4pollEv+0x134>
    42ce:	ce 01       	movw	r24, r28
}
    42d0:	df 91       	pop	r29
    42d2:	cf 91       	pop	r28
    42d4:	1f 91       	pop	r17
    42d6:	0f 91       	pop	r16
    42d8:	ff 90       	pop	r15
    42da:	ef 90       	pop	r14
                KEYCODE_MENU_LIST
    42dc:	83 cc       	rjmp	.-1786   	; 0x3be4 <_ZN28navputter_keycode_menu_class11load_keymapEv>
    42de:	83 37       	cpi	r24, 0x73	; 115
    42e0:	41 f4       	brne	.+16     	; 0x42f2 <_ZN28navputter_keycode_menu_class4pollEv+0x148>
    42e2:	ce 01       	movw	r24, r28
}
    42e4:	df 91       	pop	r29
    42e6:	cf 91       	pop	r28
    42e8:	1f 91       	pop	r17
    42ea:	0f 91       	pop	r16
    42ec:	ff 90       	pop	r15
                KEYCODE_MENU_LIST
    42ee:	ef 90       	pop	r14
    42f0:	09 cf       	rjmp	.-494    	; 0x4104 <_ZN28navputter_keycode_menu_class11save_keymapEv>
    42f2:	85 36       	cpi	r24, 0x65	; 101
    42f4:	41 f4       	brne	.+16     	; 0x4306 <_ZN28navputter_keycode_menu_class4pollEv+0x15c>
    42f6:	ce 01       	movw	r24, r28
}
    42f8:	df 91       	pop	r29
    42fa:	cf 91       	pop	r28
    42fc:	1f 91       	pop	r17
    42fe:	0f 91       	pop	r16
    4300:	ff 90       	pop	r15
                KEYCODE_MENU_LIST
    4302:	ef 90       	pop	r14
    4304:	e0 cd       	rjmp	.-1088   	; 0x3ec6 <_ZN28navputter_keycode_menu_class11edit_keymapEv>
    4306:	84 36       	cpi	r24, 0x64	; 100
    4308:	41 f4       	brne	.+16     	; 0x431a <_ZN28navputter_keycode_menu_class4pollEv+0x170>
    show_keymap();
    430a:	ce 01       	movw	r24, r28
}
    430c:	df 91       	pop	r29
    430e:	cf 91       	pop	r28
    4310:	1f 91       	pop	r17
    4312:	0f 91       	pop	r16
    4314:	ff 90       	pop	r15
    show_keymap();
    4316:	ef 90       	pop	r14
    4318:	ed ca       	rjmp	.-2598   	; 0x38f4 <_ZN28navputter_keycode_menu_class11show_keymapEv>
                KEYCODE_MENU_LIST
    431a:	80 37       	cpi	r24, 0x70	; 112
    431c:	41 f4       	brne	.+16     	; 0x432e <_ZN28navputter_keycode_menu_class4pollEv+0x184>
    431e:	ce 01       	movw	r24, r28
}
    4320:	df 91       	pop	r29
    4322:	cf 91       	pop	r28
    4324:	1f 91       	pop	r17
    4326:	0f 91       	pop	r16
    4328:	ff 90       	pop	r15
                KEYCODE_MENU_LIST
    432a:	ef 90       	pop	r14
    432c:	82 ce       	rjmp	.-764    	; 0x4032 <_ZN28navputter_keycode_menu_class12edit_pin_mapEv>
    432e:	81 37       	cpi	r24, 0x71	; 113
    4330:	41 f4       	brne	.+16     	; 0x4342 <_ZN28navputter_keycode_menu_class4pollEv+0x198>
    4332:	ce 01       	movw	r24, r28
}
    4334:	df 91       	pop	r29
    4336:	cf 91       	pop	r28
    4338:	1f 91       	pop	r17
    433a:	0f 91       	pop	r16
    433c:	ff 90       	pop	r15
                KEYCODE_MENU_LIST
    433e:	ef 90       	pop	r14
    4340:	1f cf       	rjmp	.-450    	; 0x4180 <_ZN28navputter_keycode_menu_class4quitEv>
                usage();
    4342:	e8 81       	ld	r30, Y
    4344:	f9 81       	ldd	r31, Y+1	; 0x01
    4346:	06 80       	ldd	r0, Z+6	; 0x06
    4348:	f7 81       	ldd	r31, Z+7	; 0x07
    434a:	e0 2d       	mov	r30, r0
    434c:	ce 01       	movw	r24, r28
}
    434e:	df 91       	pop	r29
    4350:	cf 91       	pop	r28
    4352:	1f 91       	pop	r17
    4354:	0f 91       	pop	r16
    4356:	ff 90       	pop	r15
    4358:	ef 90       	pop	r14
                usage();
    435a:	09 94       	ijmp
            c = SERIAL.read();
    435c:	8a e1       	ldi	r24, 0x1A	; 26
    435e:	91 e0       	ldi	r25, 0x01	; 1
    4360:	0e 94 0d 03 	call	0x61a	; 0x61a <_ZN22navputter_serial_class4readEv>
            if ( c == 0xff ) return;
    4364:	8f 3f       	cpi	r24, 0xFF	; 255
    4366:	a1 f1       	breq	.+104    	; 0x43d0 <_ZN28navputter_keycode_menu_class4pollEv+0x226>
            if ( c == 'q' )
    4368:	81 37       	cpi	r24, 0x71	; 113
    436a:	49 f4       	brne	.+18     	; 0x437e <_ZN28navputter_keycode_menu_class4pollEv+0x1d4>
                read_command();
    436c:	ce 01       	movw	r24, r28
}
    436e:	df 91       	pop	r29
    4370:	cf 91       	pop	r28
    4372:	1f 91       	pop	r17
    4374:	0f 91       	pop	r16
    4376:	ff 90       	pop	r15
    4378:	ef 90       	pop	r14
                read_command();
    437a:	0c 94 7a 08 	jmp	0x10f4	; 0x10f4 <_ZN25navputter_menu_base_class12read_commandEv>
            else if ( c == 'w' )
    437e:	87 37       	cpi	r24, 0x77	; 119
    4380:	19 f4       	brne	.+6      	; 0x4388 <_ZN28navputter_keycode_menu_class4pollEv+0x1de>
        m_state = state;
    4382:	89 e0       	ldi	r24, 0x09	; 9
    4384:	8a 83       	std	Y+2, r24	; 0x02
                        return;
    4386:	24 c0       	rjmp	.+72     	; 0x43d0 <_ZN28navputter_keycode_menu_class4pollEv+0x226>
                KP_KEY_LIST
    4388:	81 33       	cpi	r24, 0x31	; 49
    438a:	49 f5       	brne	.+82     	; 0x43de <_ZN28navputter_keycode_menu_class4pollEv+0x234>
    438c:	1f 92       	push	r1
    438e:	1f 92       	push	r1
    4390:	8c e5       	ldi	r24, 0x5C	; 92
    4392:	98 e0       	ldi	r25, 0x08	; 8
    4394:	9f 93       	push	r25
    4396:	8f 93       	push	r24
    4398:	8a e1       	ldi	r24, 0x1A	; 26
    439a:	91 e0       	ldi	r25, 0x01	; 1
    439c:	9f 93       	push	r25
    439e:	8f 93       	push	r24
    43a0:	0e 94 94 03 	call	0x728	; 0x728 <_ZN22navputter_serial_class5printEPKcz>
    43a4:	fe 01       	movw	r30, r28
    43a6:	e5 53       	subi	r30, 0x35	; 53
    43a8:	ff 4f       	sbci	r31, 0xFF	; 255
    43aa:	10 82       	st	Z, r1
    43ac:	ce 01       	movw	r24, r28
    43ae:	0e 94 24 16 	call	0x2c48	; 0x2c48 <_ZN28navputter_keycode_menu_class18keycode_edit_usageEv>
    43b2:	60 e0       	ldi	r22, 0x00	; 0
    43b4:	ce 01       	movw	r24, r28
    43b6:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <_ZN28navputter_keycode_menu_class17format_key_actionEh>
    43ba:	ce 01       	movw	r24, r28
    43bc:	0e 94 76 15 	call	0x2aec	; 0x2aec <_ZN28navputter_keycode_menu_class28set_keycode_display_indiciesEv>
    43c0:	8a e0       	ldi	r24, 0x0A	; 10
    43c2:	8a 83       	std	Y+2, r24	; 0x02
    43c4:	0f 90       	pop	r0
    43c6:	0f 90       	pop	r0
    43c8:	0f 90       	pop	r0
    43ca:	0f 90       	pop	r0
    43cc:	0f 90       	pop	r0
    43ce:	0f 90       	pop	r0
}
    43d0:	df 91       	pop	r29
    43d2:	cf 91       	pop	r28
    43d4:	1f 91       	pop	r17
    43d6:	0f 91       	pop	r16
    43d8:	ff 90       	pop	r15
    43da:	ef 90       	pop	r14
    43dc:	08 95       	ret
                KP_KEY_LIST
    43de:	82 33       	cpi	r24, 0x32	; 50
    43e0:	b1 f4       	brne	.+44     	; 0x440e <_ZN28navputter_keycode_menu_class4pollEv+0x264>
    43e2:	1f 92       	push	r1
    43e4:	11 e0       	ldi	r17, 0x01	; 1
    43e6:	1f 93       	push	r17
    43e8:	8c e5       	ldi	r24, 0x5C	; 92
    43ea:	98 e0       	ldi	r25, 0x08	; 8
    43ec:	9f 93       	push	r25
    43ee:	8f 93       	push	r24
    43f0:	8a e1       	ldi	r24, 0x1A	; 26
    43f2:	91 e0       	ldi	r25, 0x01	; 1
    43f4:	9f 93       	push	r25
    43f6:	8f 93       	push	r24
    43f8:	0e 94 94 03 	call	0x728	; 0x728 <_ZN22navputter_serial_class5printEPKcz>
    43fc:	fe 01       	movw	r30, r28
    43fe:	e5 53       	subi	r30, 0x35	; 53
    4400:	ff 4f       	sbci	r31, 0xFF	; 255
    4402:	10 83       	st	Z, r17
    4404:	ce 01       	movw	r24, r28
    4406:	0e 94 24 16 	call	0x2c48	; 0x2c48 <_ZN28navputter_keycode_menu_class18keycode_edit_usageEv>
    440a:	61 e0       	ldi	r22, 0x01	; 1
    440c:	d3 cf       	rjmp	.-90     	; 0x43b4 <_ZN28navputter_keycode_menu_class4pollEv+0x20a>
    440e:	83 33       	cpi	r24, 0x33	; 51
    4410:	b1 f4       	brne	.+44     	; 0x443e <_ZN28navputter_keycode_menu_class4pollEv+0x294>
    4412:	1f 92       	push	r1
    4414:	12 e0       	ldi	r17, 0x02	; 2
    4416:	1f 93       	push	r17
    4418:	8c e5       	ldi	r24, 0x5C	; 92
    441a:	98 e0       	ldi	r25, 0x08	; 8
    441c:	9f 93       	push	r25
    441e:	8f 93       	push	r24
    4420:	8a e1       	ldi	r24, 0x1A	; 26
    4422:	91 e0       	ldi	r25, 0x01	; 1
    4424:	9f 93       	push	r25
    4426:	8f 93       	push	r24
    4428:	0e 94 94 03 	call	0x728	; 0x728 <_ZN22navputter_serial_class5printEPKcz>
    442c:	fe 01       	movw	r30, r28
    442e:	e5 53       	subi	r30, 0x35	; 53
    4430:	ff 4f       	sbci	r31, 0xFF	; 255
    4432:	10 83       	st	Z, r17
    4434:	ce 01       	movw	r24, r28
    4436:	0e 94 24 16 	call	0x2c48	; 0x2c48 <_ZN28navputter_keycode_menu_class18keycode_edit_usageEv>
    443a:	62 e0       	ldi	r22, 0x02	; 2
    443c:	bb cf       	rjmp	.-138    	; 0x43b4 <_ZN28navputter_keycode_menu_class4pollEv+0x20a>
    443e:	84 33       	cpi	r24, 0x34	; 52
    4440:	b1 f4       	brne	.+44     	; 0x446e <_ZN28navputter_keycode_menu_class4pollEv+0x2c4>
    4442:	1f 92       	push	r1
    4444:	13 e0       	ldi	r17, 0x03	; 3
    4446:	1f 93       	push	r17
    4448:	8c e5       	ldi	r24, 0x5C	; 92
    444a:	98 e0       	ldi	r25, 0x08	; 8
    444c:	9f 93       	push	r25
    444e:	8f 93       	push	r24
    4450:	8a e1       	ldi	r24, 0x1A	; 26
    4452:	91 e0       	ldi	r25, 0x01	; 1
    4454:	9f 93       	push	r25
    4456:	8f 93       	push	r24
    4458:	0e 94 94 03 	call	0x728	; 0x728 <_ZN22navputter_serial_class5printEPKcz>
    445c:	fe 01       	movw	r30, r28
    445e:	e5 53       	subi	r30, 0x35	; 53
    4460:	ff 4f       	sbci	r31, 0xFF	; 255
    4462:	10 83       	st	Z, r17
    4464:	ce 01       	movw	r24, r28
    4466:	0e 94 24 16 	call	0x2c48	; 0x2c48 <_ZN28navputter_keycode_menu_class18keycode_edit_usageEv>
    446a:	63 e0       	ldi	r22, 0x03	; 3
    446c:	a3 cf       	rjmp	.-186    	; 0x43b4 <_ZN28navputter_keycode_menu_class4pollEv+0x20a>
    446e:	85 33       	cpi	r24, 0x35	; 53
    4470:	b1 f4       	brne	.+44     	; 0x449e <_ZN28navputter_keycode_menu_class4pollEv+0x2f4>
    4472:	1f 92       	push	r1
    4474:	14 e0       	ldi	r17, 0x04	; 4
    4476:	1f 93       	push	r17
    4478:	8c e5       	ldi	r24, 0x5C	; 92
    447a:	98 e0       	ldi	r25, 0x08	; 8
    447c:	9f 93       	push	r25
    447e:	8f 93       	push	r24
    4480:	8a e1       	ldi	r24, 0x1A	; 26
    4482:	91 e0       	ldi	r25, 0x01	; 1
    4484:	9f 93       	push	r25
    4486:	8f 93       	push	r24
    4488:	0e 94 94 03 	call	0x728	; 0x728 <_ZN22navputter_serial_class5printEPKcz>
    448c:	fe 01       	movw	r30, r28
    448e:	e5 53       	subi	r30, 0x35	; 53
    4490:	ff 4f       	sbci	r31, 0xFF	; 255
    4492:	10 83       	st	Z, r17
    4494:	ce 01       	movw	r24, r28
    4496:	0e 94 24 16 	call	0x2c48	; 0x2c48 <_ZN28navputter_keycode_menu_class18keycode_edit_usageEv>
    449a:	64 e0       	ldi	r22, 0x04	; 4
    449c:	8b cf       	rjmp	.-234    	; 0x43b4 <_ZN28navputter_keycode_menu_class4pollEv+0x20a>
    449e:	86 33       	cpi	r24, 0x36	; 54
    44a0:	b1 f4       	brne	.+44     	; 0x44ce <_ZN28navputter_keycode_menu_class4pollEv+0x324>
    44a2:	1f 92       	push	r1
    44a4:	15 e0       	ldi	r17, 0x05	; 5
    44a6:	1f 93       	push	r17
    44a8:	8c e5       	ldi	r24, 0x5C	; 92
    44aa:	98 e0       	ldi	r25, 0x08	; 8
    44ac:	9f 93       	push	r25
    44ae:	8f 93       	push	r24
    44b0:	8a e1       	ldi	r24, 0x1A	; 26
    44b2:	91 e0       	ldi	r25, 0x01	; 1
    44b4:	9f 93       	push	r25
    44b6:	8f 93       	push	r24
    44b8:	0e 94 94 03 	call	0x728	; 0x728 <_ZN22navputter_serial_class5printEPKcz>
    44bc:	fe 01       	movw	r30, r28
    44be:	e5 53       	subi	r30, 0x35	; 53
    44c0:	ff 4f       	sbci	r31, 0xFF	; 255
    44c2:	10 83       	st	Z, r17
    44c4:	ce 01       	movw	r24, r28
    44c6:	0e 94 24 16 	call	0x2c48	; 0x2c48 <_ZN28navputter_keycode_menu_class18keycode_edit_usageEv>
    44ca:	65 e0       	ldi	r22, 0x05	; 5
    44cc:	73 cf       	rjmp	.-282    	; 0x43b4 <_ZN28navputter_keycode_menu_class4pollEv+0x20a>
    44ce:	87 33       	cpi	r24, 0x37	; 55
    44d0:	b1 f4       	brne	.+44     	; 0x44fe <_ZN28navputter_keycode_menu_class4pollEv+0x354>
    44d2:	1f 92       	push	r1
    44d4:	16 e0       	ldi	r17, 0x06	; 6
    44d6:	1f 93       	push	r17
    44d8:	8c e5       	ldi	r24, 0x5C	; 92
    44da:	98 e0       	ldi	r25, 0x08	; 8
    44dc:	9f 93       	push	r25
    44de:	8f 93       	push	r24
    44e0:	8a e1       	ldi	r24, 0x1A	; 26
    44e2:	91 e0       	ldi	r25, 0x01	; 1
    44e4:	9f 93       	push	r25
    44e6:	8f 93       	push	r24
    44e8:	0e 94 94 03 	call	0x728	; 0x728 <_ZN22navputter_serial_class5printEPKcz>
    44ec:	fe 01       	movw	r30, r28
    44ee:	e5 53       	subi	r30, 0x35	; 53
    44f0:	ff 4f       	sbci	r31, 0xFF	; 255
    44f2:	10 83       	st	Z, r17
    44f4:	ce 01       	movw	r24, r28
    44f6:	0e 94 24 16 	call	0x2c48	; 0x2c48 <_ZN28navputter_keycode_menu_class18keycode_edit_usageEv>
    44fa:	66 e0       	ldi	r22, 0x06	; 6
    44fc:	5b cf       	rjmp	.-330    	; 0x43b4 <_ZN28navputter_keycode_menu_class4pollEv+0x20a>
    44fe:	88 33       	cpi	r24, 0x38	; 56
    4500:	b1 f4       	brne	.+44     	; 0x452e <_ZN28navputter_keycode_menu_class4pollEv+0x384>
    4502:	1f 92       	push	r1
    4504:	17 e0       	ldi	r17, 0x07	; 7
    4506:	1f 93       	push	r17
    4508:	8c e5       	ldi	r24, 0x5C	; 92
    450a:	98 e0       	ldi	r25, 0x08	; 8
    450c:	9f 93       	push	r25
    450e:	8f 93       	push	r24
    4510:	8a e1       	ldi	r24, 0x1A	; 26
    4512:	91 e0       	ldi	r25, 0x01	; 1
    4514:	9f 93       	push	r25
    4516:	8f 93       	push	r24
    4518:	0e 94 94 03 	call	0x728	; 0x728 <_ZN22navputter_serial_class5printEPKcz>
    451c:	fe 01       	movw	r30, r28
    451e:	e5 53       	subi	r30, 0x35	; 53
    4520:	ff 4f       	sbci	r31, 0xFF	; 255
    4522:	10 83       	st	Z, r17
    4524:	ce 01       	movw	r24, r28
    4526:	0e 94 24 16 	call	0x2c48	; 0x2c48 <_ZN28navputter_keycode_menu_class18keycode_edit_usageEv>
    452a:	67 e0       	ldi	r22, 0x07	; 7
    452c:	43 cf       	rjmp	.-378    	; 0x43b4 <_ZN28navputter_keycode_menu_class4pollEv+0x20a>
    452e:	89 33       	cpi	r24, 0x39	; 57
    4530:	b1 f4       	brne	.+44     	; 0x455e <_ZN28navputter_keycode_menu_class4pollEv+0x3b4>
    4532:	1f 92       	push	r1
    4534:	18 e0       	ldi	r17, 0x08	; 8
    4536:	1f 93       	push	r17
    4538:	8c e5       	ldi	r24, 0x5C	; 92
    453a:	98 e0       	ldi	r25, 0x08	; 8
    453c:	9f 93       	push	r25
    453e:	8f 93       	push	r24
    4540:	8a e1       	ldi	r24, 0x1A	; 26
    4542:	91 e0       	ldi	r25, 0x01	; 1
    4544:	9f 93       	push	r25
    4546:	8f 93       	push	r24
    4548:	0e 94 94 03 	call	0x728	; 0x728 <_ZN22navputter_serial_class5printEPKcz>
    454c:	fe 01       	movw	r30, r28
    454e:	e5 53       	subi	r30, 0x35	; 53
    4550:	ff 4f       	sbci	r31, 0xFF	; 255
    4552:	10 83       	st	Z, r17
    4554:	ce 01       	movw	r24, r28
    4556:	0e 94 24 16 	call	0x2c48	; 0x2c48 <_ZN28navputter_keycode_menu_class18keycode_edit_usageEv>
    455a:	68 e0       	ldi	r22, 0x08	; 8
    455c:	2b cf       	rjmp	.-426    	; 0x43b4 <_ZN28navputter_keycode_menu_class4pollEv+0x20a>
    455e:	81 36       	cpi	r24, 0x61	; 97
    4560:	b1 f4       	brne	.+44     	; 0x458e <_ZN28navputter_keycode_menu_class4pollEv+0x3e4>
    4562:	1f 92       	push	r1
    4564:	19 e0       	ldi	r17, 0x09	; 9
    4566:	1f 93       	push	r17
    4568:	8c e5       	ldi	r24, 0x5C	; 92
    456a:	98 e0       	ldi	r25, 0x08	; 8
    456c:	9f 93       	push	r25
    456e:	8f 93       	push	r24
    4570:	8a e1       	ldi	r24, 0x1A	; 26
    4572:	91 e0       	ldi	r25, 0x01	; 1
    4574:	9f 93       	push	r25
    4576:	8f 93       	push	r24
    4578:	0e 94 94 03 	call	0x728	; 0x728 <_ZN22navputter_serial_class5printEPKcz>
    457c:	fe 01       	movw	r30, r28
    457e:	e5 53       	subi	r30, 0x35	; 53
    4580:	ff 4f       	sbci	r31, 0xFF	; 255
    4582:	10 83       	st	Z, r17
    4584:	ce 01       	movw	r24, r28
    4586:	0e 94 24 16 	call	0x2c48	; 0x2c48 <_ZN28navputter_keycode_menu_class18keycode_edit_usageEv>
    458a:	69 e0       	ldi	r22, 0x09	; 9
    458c:	13 cf       	rjmp	.-474    	; 0x43b4 <_ZN28navputter_keycode_menu_class4pollEv+0x20a>
    458e:	82 36       	cpi	r24, 0x62	; 98
    4590:	e9 f4       	brne	.+58     	; 0x45cc <_ZN28navputter_keycode_menu_class4pollEv+0x422>
    4592:	1f 92       	push	r1
    4594:	1a e0       	ldi	r17, 0x0A	; 10
    4596:	1f 93       	push	r17
    4598:	8c e5       	ldi	r24, 0x5C	; 92
    459a:	98 e0       	ldi	r25, 0x08	; 8
    459c:	9f 93       	push	r25
    459e:	8f 93       	push	r24
    45a0:	8a e1       	ldi	r24, 0x1A	; 26
    45a2:	91 e0       	ldi	r25, 0x01	; 1
    45a4:	9f 93       	push	r25
    45a6:	8f 93       	push	r24
    45a8:	0e 94 94 03 	call	0x728	; 0x728 <_ZN22navputter_serial_class5printEPKcz>
    45ac:	fe 01       	movw	r30, r28
    45ae:	e5 53       	subi	r30, 0x35	; 53
    45b0:	ff 4f       	sbci	r31, 0xFF	; 255
    45b2:	10 83       	st	Z, r17
    45b4:	ce 01       	movw	r24, r28
    45b6:	0e 94 24 16 	call	0x2c48	; 0x2c48 <_ZN28navputter_keycode_menu_class18keycode_edit_usageEv>
    45ba:	6a e0       	ldi	r22, 0x0A	; 10
    45bc:	ce 01       	movw	r24, r28
    45be:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <_ZN28navputter_keycode_menu_class17format_key_actionEh>
    45c2:	ce 01       	movw	r24, r28
    45c4:	0e 94 76 15 	call	0x2aec	; 0x2aec <_ZN28navputter_keycode_menu_class28set_keycode_display_indiciesEv>
    45c8:	1a 83       	std	Y+2, r17	; 0x02
    45ca:	fc ce       	rjmp	.-520    	; 0x43c4 <_ZN28navputter_keycode_menu_class4pollEv+0x21a>
    45cc:	83 36       	cpi	r24, 0x63	; 99
    45ce:	b1 f4       	brne	.+44     	; 0x45fc <_ZN28navputter_keycode_menu_class4pollEv+0x452>
    45d0:	1f 92       	push	r1
    45d2:	1b e0       	ldi	r17, 0x0B	; 11
    45d4:	1f 93       	push	r17
    45d6:	8c e5       	ldi	r24, 0x5C	; 92
    45d8:	98 e0       	ldi	r25, 0x08	; 8
    45da:	9f 93       	push	r25
    45dc:	8f 93       	push	r24
    45de:	8a e1       	ldi	r24, 0x1A	; 26
    45e0:	91 e0       	ldi	r25, 0x01	; 1
    45e2:	9f 93       	push	r25
    45e4:	8f 93       	push	r24
    45e6:	0e 94 94 03 	call	0x728	; 0x728 <_ZN22navputter_serial_class5printEPKcz>
    45ea:	fe 01       	movw	r30, r28
    45ec:	e5 53       	subi	r30, 0x35	; 53
    45ee:	ff 4f       	sbci	r31, 0xFF	; 255
    45f0:	10 83       	st	Z, r17
    45f2:	ce 01       	movw	r24, r28
    45f4:	0e 94 24 16 	call	0x2c48	; 0x2c48 <_ZN28navputter_keycode_menu_class18keycode_edit_usageEv>
    45f8:	6b e0       	ldi	r22, 0x0B	; 11
    45fa:	dc ce       	rjmp	.-584    	; 0x43b4 <_ZN28navputter_keycode_menu_class4pollEv+0x20a>
    45fc:	84 36       	cpi	r24, 0x64	; 100
    45fe:	b1 f4       	brne	.+44     	; 0x462c <_ZN28navputter_keycode_menu_class4pollEv+0x482>
    4600:	1f 92       	push	r1
    4602:	1c e0       	ldi	r17, 0x0C	; 12
    4604:	1f 93       	push	r17
    4606:	8c e5       	ldi	r24, 0x5C	; 92
    4608:	98 e0       	ldi	r25, 0x08	; 8
    460a:	9f 93       	push	r25
    460c:	8f 93       	push	r24
    460e:	8a e1       	ldi	r24, 0x1A	; 26
    4610:	91 e0       	ldi	r25, 0x01	; 1
    4612:	9f 93       	push	r25
    4614:	8f 93       	push	r24
    4616:	0e 94 94 03 	call	0x728	; 0x728 <_ZN22navputter_serial_class5printEPKcz>
    461a:	fe 01       	movw	r30, r28
    461c:	e5 53       	subi	r30, 0x35	; 53
    461e:	ff 4f       	sbci	r31, 0xFF	; 255
    4620:	10 83       	st	Z, r17
    4622:	ce 01       	movw	r24, r28
    4624:	0e 94 24 16 	call	0x2c48	; 0x2c48 <_ZN28navputter_keycode_menu_class18keycode_edit_usageEv>
    4628:	6c e0       	ldi	r22, 0x0C	; 12
    462a:	c4 ce       	rjmp	.-632    	; 0x43b4 <_ZN28navputter_keycode_menu_class4pollEv+0x20a>
    462c:	85 36       	cpi	r24, 0x65	; 101
    462e:	b1 f4       	brne	.+44     	; 0x465c <_ZN28navputter_keycode_menu_class4pollEv+0x4b2>
    4630:	1f 92       	push	r1
    4632:	1d e0       	ldi	r17, 0x0D	; 13
    4634:	1f 93       	push	r17
    4636:	8c e5       	ldi	r24, 0x5C	; 92
    4638:	98 e0       	ldi	r25, 0x08	; 8
    463a:	9f 93       	push	r25
    463c:	8f 93       	push	r24
    463e:	8a e1       	ldi	r24, 0x1A	; 26
    4640:	91 e0       	ldi	r25, 0x01	; 1
    4642:	9f 93       	push	r25
    4644:	8f 93       	push	r24
    4646:	0e 94 94 03 	call	0x728	; 0x728 <_ZN22navputter_serial_class5printEPKcz>
    464a:	fe 01       	movw	r30, r28
    464c:	e5 53       	subi	r30, 0x35	; 53
    464e:	ff 4f       	sbci	r31, 0xFF	; 255
    4650:	10 83       	st	Z, r17
    4652:	ce 01       	movw	r24, r28
    4654:	0e 94 24 16 	call	0x2c48	; 0x2c48 <_ZN28navputter_keycode_menu_class18keycode_edit_usageEv>
    4658:	6d e0       	ldi	r22, 0x0D	; 13
    465a:	ac ce       	rjmp	.-680    	; 0x43b4 <_ZN28navputter_keycode_menu_class4pollEv+0x20a>
    465c:	86 36       	cpi	r24, 0x66	; 102
    465e:	b1 f4       	brne	.+44     	; 0x468c <_ZN28navputter_keycode_menu_class4pollEv+0x4e2>
    4660:	1f 92       	push	r1
    4662:	1e e0       	ldi	r17, 0x0E	; 14
    4664:	1f 93       	push	r17
    4666:	8c e5       	ldi	r24, 0x5C	; 92
    4668:	98 e0       	ldi	r25, 0x08	; 8
    466a:	9f 93       	push	r25
    466c:	8f 93       	push	r24
    466e:	8a e1       	ldi	r24, 0x1A	; 26
    4670:	91 e0       	ldi	r25, 0x01	; 1
    4672:	9f 93       	push	r25
    4674:	8f 93       	push	r24
    4676:	0e 94 94 03 	call	0x728	; 0x728 <_ZN22navputter_serial_class5printEPKcz>
    467a:	fe 01       	movw	r30, r28
    467c:	e5 53       	subi	r30, 0x35	; 53
    467e:	ff 4f       	sbci	r31, 0xFF	; 255
    4680:	10 83       	st	Z, r17
    4682:	ce 01       	movw	r24, r28
    4684:	0e 94 24 16 	call	0x2c48	; 0x2c48 <_ZN28navputter_keycode_menu_class18keycode_edit_usageEv>
    4688:	6e e0       	ldi	r22, 0x0E	; 14
    468a:	94 ce       	rjmp	.-728    	; 0x43b4 <_ZN28navputter_keycode_menu_class4pollEv+0x20a>
    468c:	87 36       	cpi	r24, 0x67	; 103
    468e:	b1 f4       	brne	.+44     	; 0x46bc <_ZN28navputter_keycode_menu_class4pollEv+0x512>
    4690:	1f 92       	push	r1
    4692:	1f e0       	ldi	r17, 0x0F	; 15
    4694:	1f 93       	push	r17
    4696:	8c e5       	ldi	r24, 0x5C	; 92
    4698:	98 e0       	ldi	r25, 0x08	; 8
    469a:	9f 93       	push	r25
    469c:	8f 93       	push	r24
    469e:	8a e1       	ldi	r24, 0x1A	; 26
    46a0:	91 e0       	ldi	r25, 0x01	; 1
    46a2:	9f 93       	push	r25
    46a4:	8f 93       	push	r24
    46a6:	0e 94 94 03 	call	0x728	; 0x728 <_ZN22navputter_serial_class5printEPKcz>
    46aa:	fe 01       	movw	r30, r28
    46ac:	e5 53       	subi	r30, 0x35	; 53
    46ae:	ff 4f       	sbci	r31, 0xFF	; 255
    46b0:	10 83       	st	Z, r17
    46b2:	ce 01       	movw	r24, r28
    46b4:	0e 94 24 16 	call	0x2c48	; 0x2c48 <_ZN28navputter_keycode_menu_class18keycode_edit_usageEv>
    46b8:	6f e0       	ldi	r22, 0x0F	; 15
    46ba:	7c ce       	rjmp	.-776    	; 0x43b4 <_ZN28navputter_keycode_menu_class4pollEv+0x20a>
    46bc:	88 36       	cpi	r24, 0x68	; 104
    46be:	b1 f4       	brne	.+44     	; 0x46ec <_ZN28navputter_keycode_menu_class4pollEv+0x542>
    46c0:	1f 92       	push	r1
    46c2:	10 e1       	ldi	r17, 0x10	; 16
    46c4:	1f 93       	push	r17
    46c6:	8c e5       	ldi	r24, 0x5C	; 92
    46c8:	98 e0       	ldi	r25, 0x08	; 8
    46ca:	9f 93       	push	r25
    46cc:	8f 93       	push	r24
    46ce:	8a e1       	ldi	r24, 0x1A	; 26
    46d0:	91 e0       	ldi	r25, 0x01	; 1
    46d2:	9f 93       	push	r25
    46d4:	8f 93       	push	r24
    46d6:	0e 94 94 03 	call	0x728	; 0x728 <_ZN22navputter_serial_class5printEPKcz>
    46da:	fe 01       	movw	r30, r28
    46dc:	e5 53       	subi	r30, 0x35	; 53
    46de:	ff 4f       	sbci	r31, 0xFF	; 255
    46e0:	10 83       	st	Z, r17
    46e2:	ce 01       	movw	r24, r28
    46e4:	0e 94 24 16 	call	0x2c48	; 0x2c48 <_ZN28navputter_keycode_menu_class18keycode_edit_usageEv>
    46e8:	60 e1       	ldi	r22, 0x10	; 16
    46ea:	64 ce       	rjmp	.-824    	; 0x43b4 <_ZN28navputter_keycode_menu_class4pollEv+0x20a>
    46ec:	89 36       	cpi	r24, 0x69	; 105
    46ee:	b1 f4       	brne	.+44     	; 0x471c <_ZN28navputter_keycode_menu_class4pollEv+0x572>
    46f0:	1f 92       	push	r1
    46f2:	11 e1       	ldi	r17, 0x11	; 17
    46f4:	1f 93       	push	r17
    46f6:	8c e5       	ldi	r24, 0x5C	; 92
    46f8:	98 e0       	ldi	r25, 0x08	; 8
    46fa:	9f 93       	push	r25
    46fc:	8f 93       	push	r24
    46fe:	8a e1       	ldi	r24, 0x1A	; 26
    4700:	91 e0       	ldi	r25, 0x01	; 1
    4702:	9f 93       	push	r25
    4704:	8f 93       	push	r24
    4706:	0e 94 94 03 	call	0x728	; 0x728 <_ZN22navputter_serial_class5printEPKcz>
    470a:	fe 01       	movw	r30, r28
    470c:	e5 53       	subi	r30, 0x35	; 53
    470e:	ff 4f       	sbci	r31, 0xFF	; 255
    4710:	10 83       	st	Z, r17
    4712:	ce 01       	movw	r24, r28
    4714:	0e 94 24 16 	call	0x2c48	; 0x2c48 <_ZN28navputter_keycode_menu_class18keycode_edit_usageEv>
    4718:	61 e1       	ldi	r22, 0x11	; 17
    471a:	4c ce       	rjmp	.-872    	; 0x43b4 <_ZN28navputter_keycode_menu_class4pollEv+0x20a>
    471c:	8a 36       	cpi	r24, 0x6A	; 106
    471e:	09 f0       	breq	.+2      	; 0x4722 <_ZN28navputter_keycode_menu_class4pollEv+0x578>
    4720:	57 ce       	rjmp	.-850    	; 0x43d0 <_ZN28navputter_keycode_menu_class4pollEv+0x226>
    4722:	1f 92       	push	r1
    4724:	12 e1       	ldi	r17, 0x12	; 18
    4726:	1f 93       	push	r17
    4728:	8c e5       	ldi	r24, 0x5C	; 92
    472a:	98 e0       	ldi	r25, 0x08	; 8
    472c:	9f 93       	push	r25
    472e:	8f 93       	push	r24
    4730:	8a e1       	ldi	r24, 0x1A	; 26
    4732:	91 e0       	ldi	r25, 0x01	; 1
    4734:	9f 93       	push	r25
    4736:	8f 93       	push	r24
    4738:	0e 94 94 03 	call	0x728	; 0x728 <_ZN22navputter_serial_class5printEPKcz>
    473c:	fe 01       	movw	r30, r28
    473e:	e5 53       	subi	r30, 0x35	; 53
    4740:	ff 4f       	sbci	r31, 0xFF	; 255
    4742:	10 83       	st	Z, r17
    4744:	ce 01       	movw	r24, r28
    4746:	0e 94 24 16 	call	0x2c48	; 0x2c48 <_ZN28navputter_keycode_menu_class18keycode_edit_usageEv>
    474a:	62 e1       	ldi	r22, 0x12	; 18
    474c:	33 ce       	rjmp	.-922    	; 0x43b4 <_ZN28navputter_keycode_menu_class4pollEv+0x20a>
            c = SERIAL.read();
    474e:	8a e1       	ldi	r24, 0x1A	; 26
    4750:	91 e0       	ldi	r25, 0x01	; 1
    4752:	0e 94 0d 03 	call	0x61a	; 0x61a <_ZN22navputter_serial_class4readEv>
    4756:	18 2f       	mov	r17, r24
            if ( c == 0xff ) return;
    4758:	8f 3f       	cpi	r24, 0xFF	; 255
    475a:	09 f4       	brne	.+2      	; 0x475e <_ZN28navputter_keycode_menu_class4pollEv+0x5b4>
    475c:	39 ce       	rjmp	.-910    	; 0x43d0 <_ZN28navputter_keycode_menu_class4pollEv+0x226>
            KEYCODE_EDIT_LIST
    475e:	81 36       	cpi	r24, 0x61	; 97
    4760:	e1 f4       	brne	.+56     	; 0x479a <_ZN28navputter_keycode_menu_class4pollEv+0x5f0>
    4762:	ce 01       	movw	r24, r28
    4764:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <_ZN28navputter_keycode_menu_class11next_actionEv>
            SERIAL.write(EOLN);
    4768:	63 e3       	ldi	r22, 0x33	; 51
    476a:	74 e0       	ldi	r23, 0x04	; 4
    476c:	8a e1       	ldi	r24, 0x1A	; 26
    476e:	91 e0       	ldi	r25, 0x01	; 1
    4770:	0e 94 2f 03 	call	0x65e	; 0x65e <_ZN16usb_serial_class5writeEPKc>
            keycode_edit_usage();
    4774:	ce 01       	movw	r24, r28
    4776:	0e 94 24 16 	call	0x2c48	; 0x2c48 <_ZN28navputter_keycode_menu_class18keycode_edit_usageEv>
            if ( c != 'q' ) format_key_action(m_seq);
    477a:	11 37       	cpi	r17, 0x71	; 113
    477c:	09 f4       	brne	.+2      	; 0x4780 <_ZN28navputter_keycode_menu_class4pollEv+0x5d6>
    477e:	28 ce       	rjmp	.-944    	; 0x43d0 <_ZN28navputter_keycode_menu_class4pollEv+0x226>
    4780:	fe 01       	movw	r30, r28
    4782:	e5 53       	subi	r30, 0x35	; 53
    4784:	ff 4f       	sbci	r31, 0xFF	; 255
    4786:	60 81       	ld	r22, Z
    4788:	ce 01       	movw	r24, r28
}
    478a:	df 91       	pop	r29
    478c:	cf 91       	pop	r28
    478e:	1f 91       	pop	r17
    4790:	0f 91       	pop	r16
    4792:	ff 90       	pop	r15
    4794:	ef 90       	pop	r14
            if ( c != 'q' ) format_key_action(m_seq);
    4796:	0c 94 d2 19 	jmp	0x33a4	; 0x33a4 <_ZN28navputter_keycode_menu_class17format_key_actionEh>
            KEYCODE_EDIT_LIST
    479a:	83 37       	cpi	r24, 0x73	; 115
    479c:	21 f4       	brne	.+8      	; 0x47a6 <_ZN28navputter_keycode_menu_class4pollEv+0x5fc>
    479e:	ce 01       	movw	r24, r28
    47a0:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <_ZN28navputter_keycode_menu_class11prev_actionEv>
    47a4:	e1 cf       	rjmp	.-62     	; 0x4768 <_ZN28navputter_keycode_menu_class4pollEv+0x5be>
    47a6:	84 36       	cpi	r24, 0x64	; 100
    47a8:	21 f4       	brne	.+8      	; 0x47b2 <_ZN28navputter_keycode_menu_class4pollEv+0x608>
    47aa:	ce 01       	movw	r24, r28
    47ac:	0e 94 22 17 	call	0x2e44	; 0x2e44 <_ZN28navputter_keycode_menu_class8next_keyEv>
    47b0:	db cf       	rjmp	.-74     	; 0x4768 <_ZN28navputter_keycode_menu_class4pollEv+0x5be>
    47b2:	86 36       	cpi	r24, 0x66	; 102
    47b4:	21 f4       	brne	.+8      	; 0x47be <_ZN28navputter_keycode_menu_class4pollEv+0x614>
    47b6:	ce 01       	movw	r24, r28
    47b8:	0e 94 f4 16 	call	0x2de8	; 0x2de8 <_ZN28navputter_keycode_menu_class8prev_keyEv>
    47bc:	d5 cf       	rjmp	.-86     	; 0x4768 <_ZN28navputter_keycode_menu_class4pollEv+0x5be>
    47be:	8a 37       	cpi	r24, 0x7A	; 122
    47c0:	21 f4       	brne	.+8      	; 0x47ca <_ZN28navputter_keycode_menu_class4pollEv+0x620>
    47c2:	ce 01       	movw	r24, r28
    47c4:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <_ZN28navputter_keycode_menu_class13next_modifierEv>
    47c8:	cf cf       	rjmp	.-98     	; 0x4768 <_ZN28navputter_keycode_menu_class4pollEv+0x5be>
    47ca:	88 37       	cpi	r24, 0x78	; 120
    47cc:	21 f4       	brne	.+8      	; 0x47d6 <_ZN28navputter_keycode_menu_class4pollEv+0x62c>
    47ce:	ce 01       	movw	r24, r28
    47d0:	0e 94 80 17 	call	0x2f00	; 0x2f00 <_ZN28navputter_keycode_menu_class13prev_modifierEv>
    47d4:	c9 cf       	rjmp	.-110    	; 0x4768 <_ZN28navputter_keycode_menu_class4pollEv+0x5be>
    47d6:	8e 36       	cpi	r24, 0x6E	; 110
    47d8:	21 f4       	brne	.+8      	; 0x47e2 <_ZN28navputter_keycode_menu_class4pollEv+0x638>
    47da:	ce 01       	movw	r24, r28
    47dc:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <_ZN28navputter_keycode_menu_class9edit_nextEv>
    47e0:	c3 cf       	rjmp	.-122    	; 0x4768 <_ZN28navputter_keycode_menu_class4pollEv+0x5be>
    47e2:	81 37       	cpi	r24, 0x71	; 113
    47e4:	09 f6       	brne	.-126    	; 0x4768 <_ZN28navputter_keycode_menu_class4pollEv+0x5be>
    read_command();
    47e6:	ce 01       	movw	r24, r28
    47e8:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <_ZN25navputter_menu_base_class12read_commandEv>
    47ec:	bd cf       	rjmp	.-134    	; 0x4768 <_ZN28navputter_keycode_menu_class4pollEv+0x5be>
    47ee:	8d e0       	ldi	r24, 0x0D	; 13
    47f0:	8a 83       	std	Y+2, r24	; 0x02
    47f2:	21 cd       	rjmp	.-1470   	; 0x4236 <_ZN28navputter_keycode_menu_class4pollEv+0x8c>
            c = atoi((const char *)m_int_value);
    47f4:	ce 01       	movw	r24, r28
    47f6:	84 53       	subi	r24, 0x34	; 52
    47f8:	9f 4f       	sbci	r25, 0xFF	; 255
    47fa:	0e 94 6e 31 	call	0x62dc	; 0x62dc <atoi>
    47fe:	18 2f       	mov	r17, r24
            if (( c > CONFIG.key_maps )||(c<0))
    4800:	80 91 6e 03 	lds	r24, 0x036E	; 0x80036e <myputter+0x26e>
    4804:	81 17       	cp	r24, r17
    4806:	18 f4       	brcc	.+6      	; 0x480e <_ZN28navputter_keycode_menu_class4pollEv+0x664>
                myputter.error( ERROR_KEYMAP_OUT_OF_RANGE );
    4808:	89 e0       	ldi	r24, 0x09	; 9
    480a:	0e 94 0b 07 	call	0xe16	; 0xe16 <_ZN15navputter_class5errorEh.constprop.29>
            save_keymap_to_eeprom( c ); 
    480e:	61 2f       	mov	r22, r17
    4810:	ce 01       	movw	r24, r28
    4812:	0e 94 09 16 	call	0x2c12	; 0x2c12 <_ZN28navputter_keycode_menu_class21save_keymap_to_eepromEh>
            read_command();
    4816:	aa cd       	rjmp	.-1196   	; 0x436c <_ZN28navputter_keycode_menu_class4pollEv+0x1c2>
            c = SERIAL.read();
    4818:	8a e1       	ldi	r24, 0x1A	; 26
    481a:	91 e0       	ldi	r25, 0x01	; 1
    481c:	0e 94 0d 03 	call	0x61a	; 0x61a <_ZN22navputter_serial_class4readEv>
            if ( c == 0xff ) return;
    4820:	8f 3f       	cpi	r24, 0xFF	; 255
    4822:	09 f4       	brne	.+2      	; 0x4826 <_ZN28navputter_keycode_menu_class4pollEv+0x67c>
    4824:	d5 cd       	rjmp	.-1110   	; 0x43d0 <_ZN28navputter_keycode_menu_class4pollEv+0x226>
            if ( !isdigit( c ) )
    4826:	48 2f       	mov	r20, r24
    4828:	40 53       	subi	r20, 0x30	; 48
    482a:	55 0b       	sbc	r21, r21
    482c:	4a 30       	cpi	r20, 0x0A	; 10
    482e:	51 05       	cpc	r21, r1
    4830:	18 f1       	brcs	.+70     	; 0x4878 <_ZN28navputter_keycode_menu_class4pollEv+0x6ce>
                if ( c == '\n' || c == '\r' )
    4832:	8a 30       	cpi	r24, 0x0A	; 10
    4834:	19 f0       	breq	.+6      	; 0x483c <_ZN28navputter_keycode_menu_class4pollEv+0x692>
    4836:	8d 30       	cpi	r24, 0x0D	; 13
    4838:	09 f0       	breq	.+2      	; 0x483c <_ZN28navputter_keycode_menu_class4pollEv+0x692>
    483a:	fd cc       	rjmp	.-1542   	; 0x4236 <_ZN28navputter_keycode_menu_class4pollEv+0x8c>
                    m_int_value[m_int_ix]=0;
    483c:	fe 01       	movw	r30, r28
    483e:	ec 52       	subi	r30, 0x2C	; 44
    4840:	ff 4f       	sbci	r31, 0xFF	; 255
    4842:	e0 81       	ld	r30, Z
    4844:	ec 0f       	add	r30, r28
    4846:	fd 2f       	mov	r31, r29
    4848:	f1 1d       	adc	r31, r1
    484a:	e4 53       	subi	r30, 0x34	; 52
    484c:	ff 4f       	sbci	r31, 0xFF	; 255
    484e:	10 82       	st	Z, r1
                    uint8_t i = atoi((const char *)m_int_value);
    4850:	ce 01       	movw	r24, r28
    4852:	84 53       	subi	r24, 0x34	; 52
    4854:	9f 4f       	sbci	r25, 0xFF	; 255
    4856:	0e 94 6e 31 	call	0x62dc	; 0x62dc <atoi>
                    if ( i >  CONFIG.key_maps )
    485a:	90 91 6e 03 	lds	r25, 0x036E	; 0x80036e <myputter+0x26e>
    485e:	98 17       	cp	r25, r24
    4860:	48 f4       	brcc	.+18     	; 0x4874 <_ZN28navputter_keycode_menu_class4pollEv+0x6ca>
                        myputter.error( ERROR_KEYMAP_OUT_OF_RANGE );
    4862:	89 e0       	ldi	r24, 0x09	; 9
}
    4864:	df 91       	pop	r29
    4866:	cf 91       	pop	r28
    4868:	1f 91       	pop	r17
    486a:	0f 91       	pop	r16
    486c:	ff 90       	pop	r15
    486e:	ef 90       	pop	r14
                        myputter.error( ERROR_KEYMAP_OUT_OF_RANGE );
    4870:	0c 94 0b 07 	jmp	0xe16	; 0xe16 <_ZN15navputter_class5errorEh.constprop.29>
    4874:	8e e0       	ldi	r24, 0x0E	; 14
    4876:	86 cd       	rjmp	.-1268   	; 0x4384 <_ZN28navputter_keycode_menu_class4pollEv+0x1da>
                m_int_value[m_int_ix++] = c;
    4878:	fe 01       	movw	r30, r28
    487a:	ec 52       	subi	r30, 0x2C	; 44
    487c:	ff 4f       	sbci	r31, 0xFF	; 255
    487e:	90 81       	ld	r25, Z
    4880:	21 e0       	ldi	r18, 0x01	; 1
    4882:	29 0f       	add	r18, r25
    4884:	20 83       	st	Z, r18
    4886:	c9 0f       	add	r28, r25
    4888:	d1 1d       	adc	r29, r1
    488a:	c4 53       	subi	r28, 0x34	; 52
    488c:	df 4f       	sbci	r29, 0xFF	; 255
    488e:	88 83       	st	Y, r24
    4890:	9f cd       	rjmp	.-1218   	; 0x43d0 <_ZN28navputter_keycode_menu_class4pollEv+0x226>
            c = SERIAL.read();
    4892:	8a e1       	ldi	r24, 0x1A	; 26
    4894:	91 e0       	ldi	r25, 0x01	; 1
    4896:	0e 94 0d 03 	call	0x61a	; 0x61a <_ZN22navputter_serial_class4readEv>
            if ( c == 0xff ) return;
    489a:	8f 3f       	cpi	r24, 0xFF	; 255
    489c:	09 f4       	brne	.+2      	; 0x48a0 <_ZN28navputter_keycode_menu_class4pollEv+0x6f6>
    489e:	98 cd       	rjmp	.-1232   	; 0x43d0 <_ZN28navputter_keycode_menu_class4pollEv+0x226>
            KEY_PIN_MENU
    48a0:	83 36       	cpi	r24, 0x63	; 99
    48a2:	69 f4       	brne	.+26     	; 0x48be <_ZN28navputter_keycode_menu_class4pollEv+0x714>
        m_edit_pin_col++;
    48a4:	8c 81       	ldd	r24, Y+4	; 0x04
    48a6:	8f 5f       	subi	r24, 0xFF	; 255
        if ( m_edit_pin_col == MAX_KEY_COLS ) m_edit_pin_col = 0;
    48a8:	86 30       	cpi	r24, 0x06	; 6
    48aa:	11 f5       	brne	.+68     	; 0x48f0 <_ZN28navputter_keycode_menu_class4pollEv+0x746>
    48ac:	1c 82       	std	Y+4, r1	; 0x04
            if ( c != 'q' ) edit_pin_map_usage();
    48ae:	ce 01       	movw	r24, r28
}
    48b0:	df 91       	pop	r29
    48b2:	cf 91       	pop	r28
    48b4:	1f 91       	pop	r17
    48b6:	0f 91       	pop	r16
    48b8:	ff 90       	pop	r15
            if ( c != 'q' ) edit_pin_map_usage();
    48ba:	ef 90       	pop	r14
    48bc:	0f cb       	rjmp	.-2530   	; 0x3edc <_ZN28navputter_keycode_menu_class18edit_pin_map_usageEv>
            KEY_PIN_MENU
    48be:	82 37       	cpi	r24, 0x72	; 114
    48c0:	c9 f4       	brne	.+50     	; 0x48f4 <_ZN28navputter_keycode_menu_class4pollEv+0x74a>
        m_edit_pin_col++;
    48c2:	8b 81       	ldd	r24, Y+3	; 0x03
    48c4:	8f 5f       	subi	r24, 0xFF	; 255
        if ( m_edit_pin_col == MAX_KEY_COLS ) m_edit_pin_col = 0;
    48c6:	86 30       	cpi	r24, 0x06	; 6
    48c8:	71 f4       	brne	.+28     	; 0x48e6 <_ZN28navputter_keycode_menu_class4pollEv+0x73c>
    48ca:	1b 82       	std	Y+3, r1	; 0x03
    48cc:	f0 cf       	rjmp	.-32     	; 0x48ae <_ZN28navputter_keycode_menu_class4pollEv+0x704>
                m_key_map[m_edit_pin_row][m_edit_pin_col] = 0xff;
    48ce:	86 e0       	ldi	r24, 0x06	; 6
    48d0:	8e 9d       	mul	r24, r14
    48d2:	f0 01       	movw	r30, r0
    48d4:	8f 9d       	mul	r24, r15
    48d6:	f0 0d       	add	r31, r0
    48d8:	11 24       	eor	r1, r1
    48da:	ec 0f       	add	r30, r28
    48dc:	fd 1f       	adc	r31, r29
    48de:	e0 0f       	add	r30, r16
    48e0:	f1 1f       	adc	r31, r17
    48e2:	8f ef       	ldi	r24, 0xFF	; 255
    48e4:	e9 cc       	rjmp	.-1582   	; 0x42b8 <_ZN28navputter_keycode_menu_class4pollEv+0x10e>
        m_edit_pin_col++;
    48e6:	8b 83       	std	Y+3, r24	; 0x03
    48e8:	e2 cf       	rjmp	.-60     	; 0x48ae <_ZN28navputter_keycode_menu_class4pollEv+0x704>
            KEY_PIN_MENU
    48ea:	81 37       	cpi	r24, 0x71	; 113
    48ec:	01 f7       	brne	.-64     	; 0x48ae <_ZN28navputter_keycode_menu_class4pollEv+0x704>
    48ee:	3e cd       	rjmp	.-1412   	; 0x436c <_ZN28navputter_keycode_menu_class4pollEv+0x1c2>
    48f0:	8c 83       	std	Y+4, r24	; 0x04
    48f2:	dd cf       	rjmp	.-70     	; 0x48ae <_ZN28navputter_keycode_menu_class4pollEv+0x704>
    48f4:	85 36       	cpi	r24, 0x65	; 101
    48f6:	c9 f7       	brne	.-14     	; 0x48ea <_ZN28navputter_keycode_menu_class4pollEv+0x740>
        m_state = state;
    48f8:	80 e1       	ldi	r24, 0x10	; 16
    48fa:	8a 83       	std	Y+2, r24	; 0x02
        m_int_ix = 0;
    48fc:	fe 01       	movw	r30, r28
    48fe:	ec 52       	subi	r30, 0x2C	; 44
    4900:	ff 4f       	sbci	r31, 0xFF	; 255
    4902:	10 82       	st	Z, r1
        edit_pin_field_usage();
    4904:	ce 01       	movw	r24, r28
    4906:	0e 94 bd 16 	call	0x2d7a	; 0x2d7a <_ZN28navputter_keycode_menu_class20edit_pin_field_usageEv>
    490a:	d1 cf       	rjmp	.-94     	; 0x48ae <_ZN28navputter_keycode_menu_class4pollEv+0x704>

0000490c <_ZN25navputter_work_pool_class9start_jobEP22navputter_worker_class>:

void navputter_work_pool_class::start_job( navputter_worker_class *job )
{
    490c:	cf 93       	push	r28
    490e:	df 93       	push	r29
    4910:	fc 01       	movw	r30, r24
    4912:	db 01       	movw	r26, r22
    if ( job->is_running() )
    4914:	17 96       	adiw	r26, 0x07	; 7
    4916:	8c 91       	ld	r24, X
    4918:	17 97       	sbiw	r26, 0x07	; 7
    491a:	88 23       	and	r24, r24
    491c:	29 f0       	breq	.+10     	; 0x4928 <_ZN25navputter_work_pool_class9start_jobEP22navputter_worker_class+0x1c>
    {
        myputter.error( ERROR_JOB_RUNNING );
    491e:	8c e0       	ldi	r24, 0x0C	; 12
    }
    job->set_state( WORKER_STARTING );
    job->set_start( global_ticks );
    add_job_list(job);
    job->start();
}
    4920:	df 91       	pop	r29
    4922:	cf 91       	pop	r28
        myputter.error( ERROR_JOB_RUNNING );
    4924:	0c 94 0b 07 	jmp	0xe16	; 0xe16 <_ZN15navputter_class5errorEh.constprop.29>
        m_state = new_state;
    4928:	81 e0       	ldi	r24, 0x01	; 1
    492a:	16 96       	adiw	r26, 0x06	; 6
    492c:	8c 93       	st	X, r24
    492e:	16 97       	sbiw	r26, 0x06	; 6
    job->set_start( global_ticks );
    4930:	40 91 be 08 	lds	r20, 0x08BE	; 0x8008be <global_ticks>
    4934:	50 91 bf 08 	lds	r21, 0x08BF	; 0x8008bf <global_ticks+0x1>
    4938:	60 91 c0 08 	lds	r22, 0x08C0	; 0x8008c0 <global_ticks+0x2>
    493c:	70 91 c1 08 	lds	r23, 0x08C1	; 0x8008c1 <global_ticks+0x3>
        m_start = ticks;
    4940:	12 96       	adiw	r26, 0x02	; 2
    4942:	4d 93       	st	X+, r20
    4944:	5d 93       	st	X+, r21
    4946:	6d 93       	st	X+, r22
    4948:	7c 93       	st	X, r23
    494a:	15 97       	sbiw	r26, 0x05	; 5
        if ( !m_job_tail )
    494c:	c2 81       	ldd	r28, Z+2	; 0x02
    494e:	d3 81       	ldd	r29, Z+3	; 0x03
    4950:	20 97       	sbiw	r28, 0x00	; 0
    4952:	71 f4       	brne	.+28     	; 0x4970 <_ZN25navputter_work_pool_class9start_jobEP22navputter_worker_class+0x64>
            m_job_head = m_job_tail = job;
    4954:	b3 83       	std	Z+3, r27	; 0x03
    4956:	a2 83       	std	Z+2, r26	; 0x02
    4958:	b1 83       	std	Z+1, r27	; 0x01
    495a:	a0 83       	st	Z, r26
    job->start();
    495c:	ed 91       	ld	r30, X+
    495e:	fc 91       	ld	r31, X
    4960:	11 97       	sbiw	r26, 0x01	; 1
    4962:	01 90       	ld	r0, Z+
    4964:	f0 81       	ld	r31, Z
    4966:	e0 2d       	mov	r30, r0
    4968:	cd 01       	movw	r24, r26
}
    496a:	df 91       	pop	r29
    496c:	cf 91       	pop	r28
    job->start();
    496e:	09 94       	ijmp
        m_next = job;
    4970:	bd 87       	std	Y+13, r27	; 0x0d
    4972:	ac 87       	std	Y+12, r26	; 0x0c
            job->set_prev_job( m_job_tail );
    4974:	82 81       	ldd	r24, Z+2	; 0x02
    4976:	93 81       	ldd	r25, Z+3	; 0x03
        m_prev = job;
    4978:	1f 96       	adiw	r26, 0x0f	; 15
    497a:	9c 93       	st	X, r25
    497c:	8e 93       	st	-X, r24
    497e:	1e 97       	sbiw	r26, 0x0e	; 14
        m_next = job;
    4980:	1d 96       	adiw	r26, 0x0d	; 13
    4982:	1c 92       	st	X, r1
    4984:	1e 92       	st	-X, r1
    4986:	1c 97       	sbiw	r26, 0x0c	; 12
            m_job_tail = job;
    4988:	b3 83       	std	Z+3, r27	; 0x03
    498a:	a2 83       	std	Z+2, r26	; 0x02
    498c:	e7 cf       	rjmp	.-50     	; 0x495c <_ZN25navputter_work_pool_class9start_jobEP22navputter_worker_class+0x50>

0000498e <_ZN21navputter_timer_class4pollEv>:

void navputter_timer_class::poll(void)
{
    498e:	cf 93       	push	r28
    4990:	df 93       	push	r29
    4992:	ec 01       	movw	r28, r24
    if ( global_ticks >= m_call_next )
    4994:	80 91 be 08 	lds	r24, 0x08BE	; 0x8008be <global_ticks>
    4998:	90 91 bf 08 	lds	r25, 0x08BF	; 0x8008bf <global_ticks+0x1>
    499c:	a0 91 c0 08 	lds	r26, 0x08C0	; 0x8008c0 <global_ticks+0x2>
    49a0:	b0 91 c1 08 	lds	r27, 0x08C1	; 0x8008c1 <global_ticks+0x3>
    49a4:	4a 81       	ldd	r20, Y+2	; 0x02
    49a6:	5b 81       	ldd	r21, Y+3	; 0x03
    49a8:	6c 81       	ldd	r22, Y+4	; 0x04
    49aa:	7d 81       	ldd	r23, Y+5	; 0x05
    49ac:	84 17       	cp	r24, r20
    49ae:	95 07       	cpc	r25, r21
    49b0:	a6 07       	cpc	r26, r22
    49b2:	b7 07       	cpc	r27, r23
    49b4:	c8 f0       	brcs	.+50     	; 0x49e8 <_ZN21navputter_timer_class4pollEv+0x5a>
    {
        m_call_next = global_ticks + m_interval;
    49b6:	40 91 be 08 	lds	r20, 0x08BE	; 0x8008be <global_ticks>
    49ba:	50 91 bf 08 	lds	r21, 0x08BF	; 0x8008bf <global_ticks+0x1>
    49be:	60 91 c0 08 	lds	r22, 0x08C0	; 0x8008c0 <global_ticks+0x2>
    49c2:	70 91 c1 08 	lds	r23, 0x08C1	; 0x8008c1 <global_ticks+0x3>
    49c6:	8a 85       	ldd	r24, Y+10	; 0x0a
    49c8:	9b 85       	ldd	r25, Y+11	; 0x0b
    49ca:	ac 85       	ldd	r26, Y+12	; 0x0c
    49cc:	bd 85       	ldd	r27, Y+13	; 0x0d
    49ce:	84 0f       	add	r24, r20
    49d0:	95 1f       	adc	r25, r21
    49d2:	a6 1f       	adc	r26, r22
    49d4:	b7 1f       	adc	r27, r23
    49d6:	8a 83       	std	Y+2, r24	; 0x02
    49d8:	9b 83       	std	Y+3, r25	; 0x03
    49da:	ac 83       	std	Y+4, r26	; 0x04
    49dc:	bd 83       	std	Y+5, r27	; 0x05
        tick();
    49de:	e8 81       	ld	r30, Y
    49e0:	f9 81       	ldd	r31, Y+1	; 0x01
        if ( m_callback ) m_callback();
    49e2:	30 97       	sbiw	r30, 0x00	; 0
    49e4:	09 f0       	breq	.+2      	; 0x49e8 <_ZN21navputter_timer_class4pollEv+0x5a>
    49e6:	09 95       	icall
    }
    if ( m_last_work != global_ticks )
    49e8:	80 91 be 08 	lds	r24, 0x08BE	; 0x8008be <global_ticks>
    49ec:	90 91 bf 08 	lds	r25, 0x08BF	; 0x8008bf <global_ticks+0x1>
    49f0:	a0 91 c0 08 	lds	r26, 0x08C0	; 0x8008c0 <global_ticks+0x2>
    49f4:	b0 91 c1 08 	lds	r27, 0x08C1	; 0x8008c1 <global_ticks+0x3>
    49f8:	4e 81       	ldd	r20, Y+6	; 0x06
    49fa:	5f 81       	ldd	r21, Y+7	; 0x07
    49fc:	68 85       	ldd	r22, Y+8	; 0x08
    49fe:	79 85       	ldd	r23, Y+9	; 0x09
    4a00:	48 17       	cp	r20, r24
    4a02:	59 07       	cpc	r21, r25
    4a04:	6a 07       	cpc	r22, r26
    4a06:	7b 07       	cpc	r23, r27
    4a08:	91 f0       	breq	.+36     	; 0x4a2e <_ZN21navputter_timer_class4pollEv+0xa0>
    {
        m_last_work = global_ticks;
    4a0a:	80 91 be 08 	lds	r24, 0x08BE	; 0x8008be <global_ticks>
    4a0e:	90 91 bf 08 	lds	r25, 0x08BF	; 0x8008bf <global_ticks+0x1>
    4a12:	a0 91 c0 08 	lds	r26, 0x08C0	; 0x8008c0 <global_ticks+0x2>
    4a16:	b0 91 c1 08 	lds	r27, 0x08C1	; 0x8008c1 <global_ticks+0x3>
    4a1a:	8e 83       	std	Y+6, r24	; 0x06
    4a1c:	9f 83       	std	Y+7, r25	; 0x07
    4a1e:	a8 87       	std	Y+8, r26	; 0x08
    4a20:	b9 87       	std	Y+9, r27	; 0x09
        WORKERS.tick();
    4a22:	85 e1       	ldi	r24, 0x15	; 21
    4a24:	91 e0       	ldi	r25, 0x01	; 1
    }
}
    4a26:	df 91       	pop	r29
    4a28:	cf 91       	pop	r28
        WORKERS.tick();
    4a2a:	0c 94 35 08 	jmp	0x106a	; 0x106a <_ZN25navputter_work_pool_class4tickEv>
}
    4a2e:	df 91       	pop	r29
    4a30:	cf 91       	pop	r28
    4a32:	08 95       	ret

00004a34 <main>:
{
    4a34:	cd b7       	in	r28, 0x3d	; 61
    4a36:	de b7       	in	r29, 0x3e	; 62
    4a38:	6e 97       	sbiw	r28, 0x1e	; 30
    4a3a:	0f b6       	in	r0, 0x3f	; 63
    4a3c:	f8 94       	cli
    4a3e:	de bf       	out	0x3e, r29	; 62
    4a40:	0f be       	out	0x3f, r0	; 63
    4a42:	cd bf       	out	0x3d, r28	; 61
    PUTT=&myputter;
    4a44:	80 e0       	ldi	r24, 0x00	; 0
    4a46:	91 e0       	ldi	r25, 0x01	; 1
    4a48:	90 93 c3 08 	sts	0x08C3, r25	; 0x8008c3 <PUTT+0x1>
    4a4c:	80 93 c2 08 	sts	0x08C2, r24	; 0x8008c2 <PUTT>
    myputter.begin();
    4a50:	0e 94 41 10 	call	0x2082	; 0x2082 <_ZN15navputter_class5beginEv>
    SERIAL.write( EOLN );
    4a54:	63 e3       	ldi	r22, 0x33	; 51
    4a56:	74 e0       	ldi	r23, 0x04	; 4
    4a58:	8a e1       	ldi	r24, 0x1A	; 26
    4a5a:	91 e0       	ldi	r25, 0x01	; 1
    4a5c:	0e 94 2f 03 	call	0x65e	; 0x65e <_ZN16usb_serial_class5writeEPKc>
    SERIAL.write( EOLN );
    4a60:	63 e3       	ldi	r22, 0x33	; 51
    4a62:	74 e0       	ldi	r23, 0x04	; 4
    4a64:	8a e1       	ldi	r24, 0x1A	; 26
    4a66:	91 e0       	ldi	r25, 0x01	; 1
    4a68:	0e 94 2f 03 	call	0x65e	; 0x65e <_ZN16usb_serial_class5writeEPKc>
    return malloc(objsize); 
    4a6c:	83 e0       	ldi	r24, 0x03	; 3
    4a6e:	90 e0       	ldi	r25, 0x00	; 0
    4a70:	0e 94 35 2f 	call	0x5e6a	; 0x5e6a <malloc>
    navputter_main_menu_class *main_menu = new navputter_main_menu_class();
    4a74:	dc 01       	movw	r26, r24
    4a76:	12 96       	adiw	r26, 0x02	; 2
    4a78:	1c 92       	st	X, r1
    4a7a:	12 97       	sbiw	r26, 0x02	; 2
class navputter_main_menu_class : public navputter_menu_base_class
    4a7c:	20 e8       	ldi	r18, 0x80	; 128
    4a7e:	38 e0       	ldi	r19, 0x08	; 8
    4a80:	2d 93       	st	X+, r18
    4a82:	3c 93       	st	X, r19
    myputter.set_menu( main_menu ); 
    4a84:	bc 01       	movw	r22, r24
    4a86:	80 e0       	ldi	r24, 0x00	; 0
    4a88:	91 e0       	ldi	r25, 0x01	; 1
    4a8a:	0e 94 be 08 	call	0x117c	; 0x117c <_ZN15navputter_class8set_menuEP25navputter_menu_base_class>
class navputter_worker_pulse_class : public navputter_worker_class
    4a8e:	80 eb       	ldi	r24, 0xB0	; 176
    4a90:	98 e0       	ldi	r25, 0x08	; 8
    4a92:	9a 83       	std	Y+2, r25	; 0x02
    4a94:	89 83       	std	Y+1, r24	; 0x01
        m_port = port;
    4a96:	84 e6       	ldi	r24, 0x64	; 100
    4a98:	89 8b       	std	Y+17, r24	; 0x11
        m_pin_state_1 = pin_state_1;
    4a9a:	81 e0       	ldi	r24, 0x01	; 1
    4a9c:	8a 8b       	std	Y+18, r24	; 0x12
        m_pin_state_2 = pin_state_2;
    4a9e:	1b 8a       	std	Y+19, r1	; 0x13
        m_hold_time_1 = hold_time_1;
    4aa0:	8a e0       	ldi	r24, 0x0A	; 10
    4aa2:	90 e0       	ldi	r25, 0x00	; 0
    4aa4:	9d 8b       	std	Y+21, r25	; 0x15
    4aa6:	8c 8b       	std	Y+20, r24	; 0x14
        m_hold_time_2 = hold_time_2;
    4aa8:	9f 8b       	std	Y+23, r25	; 0x17
    4aaa:	8e 8b       	std	Y+22, r24	; 0x16
        m_cycles = cycles;
    4aac:	84 e6       	ldi	r24, 0x64	; 100
    4aae:	90 e0       	ldi	r25, 0x00	; 0
    4ab0:	99 8f       	std	Y+25, r25	; 0x19
    4ab2:	88 8f       	std	Y+24, r24	; 0x18
    WORKERS.start_job( &work );
    4ab4:	be 01       	movw	r22, r28
    4ab6:	6f 5f       	subi	r22, 0xFF	; 255
    4ab8:	7f 4f       	sbci	r23, 0xFF	; 255
    4aba:	85 e1       	ldi	r24, 0x15	; 21
    4abc:	91 e0       	ldi	r25, 0x01	; 1
    4abe:	26 df       	rcall	.-436    	; 0x490c <_ZN25navputter_work_pool_class9start_jobEP22navputter_worker_class>
        PAD.poll();
    4ac0:	80 e4       	ldi	r24, 0x40	; 64
    4ac2:	93 e0       	ldi	r25, 0x03	; 3
    4ac4:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <_ZN29navputter_tenkey_keypad_class4pollEv>
        TIMER.poll();
    4ac8:	87 e0       	ldi	r24, 0x07	; 7
    4aca:	91 e0       	ldi	r25, 0x01	; 1
    4acc:	60 df       	rcall	.-320    	; 0x498e <_ZN21navputter_timer_class4pollEv>
            wdt_reset();
    4ace:	a8 95       	wdr
        lufa_main_loop();
    4ad0:	e4 d0       	rcall	.+456    	; 0x4c9a <lufa_main_loop>
    4ad2:	80 91 65 03 	lds	r24, 0x0365	; 0x800365 <myputter+0x265>
        myputter.poll();
    4ad6:	90 91 66 03 	lds	r25, 0x0366	; 0x800366 <myputter+0x266>
    4ada:	00 97       	sbiw	r24, 0x00	; 0
    }


    void poll()
    {
        if ( m_cur_menu ) m_cur_menu->poll();
    4adc:	89 f3       	breq	.-30     	; 0x4ac0 <main+0x8c>
    4ade:	dc 01       	movw	r26, r24
    4ae0:	ed 91       	ld	r30, X+
    4ae2:	fc 91       	ld	r31, X
    4ae4:	04 80       	ldd	r0, Z+4	; 0x04
    4ae6:	f5 81       	ldd	r31, Z+5	; 0x05
    4ae8:	e0 2d       	mov	r30, r0
    4aea:	09 95       	icall
    4aec:	e9 cf       	rjmp	.-46     	; 0x4ac0 <main+0x8c>

00004aee <_GLOBAL__sub_I_HID_Report_IDs>:
    4aee:	ec e1       	ldi	r30, 0x1C	; 28
navputter_class myputter={};
    4af0:	f1 e0       	ldi	r31, 0x01	; 1
    4af2:	86 e2       	ldi	r24, 0x26	; 38
    4af4:	df 01       	movw	r26, r30
    4af6:	1d 92       	st	X+, r1
    4af8:	8a 95       	dec	r24
    4afa:	e9 f7       	brne	.-6      	; 0x4af6 <_GLOBAL__sub_I_HID_Report_IDs+0x8>
class navputter_serial_class : public usb_serial_class
    4afc:	88 e7       	ldi	r24, 0x78	; 120
    4afe:	98 e0       	ldi	r25, 0x08	; 8
    4b00:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <myputter+0x1b>
    4b04:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <myputter+0x1a>
}
    4b08:	08 95       	ret

00004b0a <pop_key>:
 * pop function for the vserial driver to retrieve the next keypress. Returns 0 if no more
 * keys queued ortherwise key code in high order 2 bytes, modifier in low two bytes
 */
uint16_t pop_key(void)
{
    if ( out_key_tail == out_key_head ) 
    4b0a:	90 91 4a 09 	lds	r25, 0x094A	; 0x80094a <out_key_tail>
    4b0e:	80 91 4b 09 	lds	r24, 0x094B	; 0x80094b <out_key_head>
        return 0;
    4b12:	30 e0       	ldi	r19, 0x00	; 0
    4b14:	20 e0       	ldi	r18, 0x00	; 0
    if ( out_key_tail == out_key_head ) 
    4b16:	98 17       	cp	r25, r24
    4b18:	99 f0       	breq	.+38     	; 0x4b40 <pop_key+0x36>
    uint16_t key = out_key_buffer[ out_key_tail ];
    4b1a:	e0 91 4a 09 	lds	r30, 0x094A	; 0x80094a <out_key_tail>
    4b1e:	f0 e0       	ldi	r31, 0x00	; 0
    4b20:	ee 0f       	add	r30, r30
    4b22:	ff 1f       	adc	r31, r31
    4b24:	eb 5a       	subi	r30, 0xAB	; 171
    4b26:	f6 4f       	sbci	r31, 0xF6	; 246
    4b28:	20 81       	ld	r18, Z
    4b2a:	31 81       	ldd	r19, Z+1	; 0x01
    out_key_tail = ( out_key_tail == MAX_KEY_BUFFER_SZ ) ? 0 : out_key_tail+1;
    4b2c:	80 91 4a 09 	lds	r24, 0x094A	; 0x80094a <out_key_tail>
    4b30:	90 e0       	ldi	r25, 0x00	; 0
    4b32:	88 30       	cpi	r24, 0x08	; 8
    4b34:	19 f0       	breq	.+6      	; 0x4b3c <pop_key+0x32>
    4b36:	90 91 4a 09 	lds	r25, 0x094A	; 0x80094a <out_key_tail>
    4b3a:	9f 5f       	subi	r25, 0xFF	; 255
    4b3c:	90 93 4a 09 	sts	0x094A, r25	; 0x80094a <out_key_tail>
    return key; 
}
    4b40:	c9 01       	movw	r24, r18
    4b42:	08 95       	ret

00004b44 <push_key>:
 * simple circular buffer for holding keypresses until they can be transmitted
 * out the usb. Push the key and modifier. Key goes in high byte, modifiers in the low order byte.
 */
void push_key( uint16_t keypair )
{
    if ( out_key_head == MAX_KEY_BUFFER_SZ )
    4b44:	20 91 4b 09 	lds	r18, 0x094B	; 0x80094b <out_key_head>
    4b48:	28 30       	cpi	r18, 0x08	; 8
    4b4a:	81 f4       	brne	.+32     	; 0x4b6c <push_key+0x28>
    {
        if ( out_key_tail == 0 )
    4b4c:	20 91 4a 09 	lds	r18, 0x094A	; 0x80094a <out_key_tail>
    4b50:	22 23       	and	r18, r18
    4b52:	41 f1       	breq	.+80     	; 0x4ba4 <push_key+0x60>
        {
            return;  
        }
        else
        {
            out_key_buffer[out_key_head] = keypair;
    4b54:	e0 91 4b 09 	lds	r30, 0x094B	; 0x80094b <out_key_head>
    4b58:	f0 e0       	ldi	r31, 0x00	; 0
    4b5a:	ee 0f       	add	r30, r30
    4b5c:	ff 1f       	adc	r31, r31
    4b5e:	eb 5a       	subi	r30, 0xAB	; 171
    4b60:	f6 4f       	sbci	r31, 0xF6	; 246
    4b62:	91 83       	std	Z+1, r25	; 0x01
    4b64:	80 83       	st	Z, r24
            out_key_head = 0;
    4b66:	10 92 4b 09 	sts	0x094B, r1	; 0x80094b <out_key_head>
    4b6a:	08 95       	ret
        }
    }
    else
    {
        if ( out_key_head + 1 == out_key_tail )
    4b6c:	20 91 4b 09 	lds	r18, 0x094B	; 0x80094b <out_key_head>
    4b70:	40 91 4a 09 	lds	r20, 0x094A	; 0x80094a <out_key_tail>
    4b74:	30 e0       	ldi	r19, 0x00	; 0
    4b76:	2f 5f       	subi	r18, 0xFF	; 255
    4b78:	3f 4f       	sbci	r19, 0xFF	; 255
    4b7a:	42 17       	cp	r20, r18
    4b7c:	13 06       	cpc	r1, r19
    4b7e:	91 f0       	breq	.+36     	; 0x4ba4 <push_key+0x60>
        {
            return;
        }
        else
        {
            out_key_buffer[out_key_head] = keypair;
    4b80:	e0 91 4b 09 	lds	r30, 0x094B	; 0x80094b <out_key_head>
    4b84:	f0 e0       	ldi	r31, 0x00	; 0
    4b86:	ee 0f       	add	r30, r30
    4b88:	ff 1f       	adc	r31, r31
    4b8a:	eb 5a       	subi	r30, 0xAB	; 171
    4b8c:	f6 4f       	sbci	r31, 0xF6	; 246
    4b8e:	91 83       	std	Z+1, r25	; 0x01
    4b90:	80 83       	st	Z, r24
            out_key_head = ( out_key_head == MAX_KEY_BUFFER_SZ ) ? 0 : out_key_head+1;
    4b92:	80 91 4b 09 	lds	r24, 0x094B	; 0x80094b <out_key_head>
    4b96:	88 30       	cpi	r24, 0x08	; 8
    4b98:	31 f0       	breq	.+12     	; 0x4ba6 <push_key+0x62>
    4b9a:	80 91 4b 09 	lds	r24, 0x094B	; 0x80094b <out_key_head>
    4b9e:	8f 5f       	subi	r24, 0xFF	; 255
    4ba0:	80 93 4b 09 	sts	0x094B, r24	; 0x80094b <out_key_head>
        }
    }
}
    4ba4:	08 95       	ret
            out_key_head = ( out_key_head == MAX_KEY_BUFFER_SZ ) ? 0 : out_key_head+1;
    4ba6:	80 e0       	ldi	r24, 0x00	; 0
    4ba8:	fb cf       	rjmp	.-10     	; 0x4ba0 <push_key+0x5c>

00004baa <SetupHardware>:
 */
void SetupHardware(void)
{
#if (ARCH == ARCH_AVR8)
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
    4baa:	84 b7       	in	r24, 0x34	; 52
    4bac:	87 7f       	andi	r24, 0xF7	; 247
    4bae:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    4bb0:	0f b6       	in	r0, 0x3f	; 63
    4bb2:	f8 94       	cli
    4bb4:	a8 95       	wdr
    4bb6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    4bba:	88 61       	ori	r24, 0x18	; 24
    4bbc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    4bc0:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    4bc4:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
    4bc6:	80 e8       	ldi	r24, 0x80	; 128
    4bc8:	90 e0       	ldi	r25, 0x00	; 0
    4bca:	0f b6       	in	r0, 0x3f	; 63
    4bcc:	f8 94       	cli
    4bce:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
    4bd2:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
    4bd6:	0f be       	out	0x3f, r0	; 63

	PMIC.CTRL = PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm;
#endif

	/* Hardware Initialization */
	USB_Init();
    4bd8:	f2 c2       	rjmp	.+1508   	; 0x51be <USB_Init>

00004bda <EVENT_USB_Device_Connect>:


/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
}
    4bda:	08 95       	ret

00004bdc <EVENT_USB_Device_Disconnect>:
    4bdc:	08 95       	ret

00004bde <EVENT_USB_Device_ConfigurationChanged>:
}

void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;
	ConfigSuccess &= HID_Device_ConfigureEndpoints(&Device_HID_Interface);
    4bde:	8c e3       	ldi	r24, 0x3C	; 60
    4be0:	94 e0       	ldi	r25, 0x04	; 4
    4be2:	0e 94 40 2e 	call	0x5c80	; 0x5c80 <HID_Device_ConfigureEndpoints>
	ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
    4be6:	8c e4       	ldi	r24, 0x4C	; 76
    4be8:	94 e0       	ldi	r25, 0x04	; 4
    4bea:	81 d5       	rcall	.+2818   	; 0x56ee <CDC_Device_ConfigureEndpoints>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
    4bec:	e2 ee       	ldi	r30, 0xE2	; 226
    4bee:	f0 e0       	ldi	r31, 0x00	; 0
    4bf0:	80 81       	ld	r24, Z
    4bf2:	84 60       	ori	r24, 0x04	; 4
    4bf4:	80 83       	st	Z, r24
	USB_Device_EnableSOFEvents();
}
    4bf6:	08 95       	ret

00004bf8 <EVENT_USB_Device_ControlRequest>:

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
    4bf8:	8c e4       	ldi	r24, 0x4C	; 76
    4bfa:	94 e0       	ldi	r25, 0x04	; 4
    4bfc:	65 d6       	rcall	.+3274   	; 0x58c8 <CDC_Device_ProcessControlRequest>
	HID_Device_ProcessControlRequest(&Device_HID_Interface);
    4bfe:	8c e3       	ldi	r24, 0x3C	; 60
    4c00:	94 e0       	ldi	r25, 0x04	; 4
    4c02:	0d c7       	rjmp	.+3610   	; 0x5a1e <HID_Device_ProcessControlRequest>

00004c04 <CALLBACK_HID_Device_CreateHIDReport>:
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                         uint8_t* const ReportID,
                                         const uint8_t ReportType,
                                         void* ReportData,
                                         uint16_t* const ReportSize)
{
    4c04:	df 92       	push	r13
    4c06:	ef 92       	push	r14
    4c08:	ff 92       	push	r15
    4c0a:	0f 93       	push	r16
    4c0c:	1f 93       	push	r17
    4c0e:	cf 93       	push	r28
    4c10:	df 93       	push	r29
    4c12:	7b 01       	movw	r14, r22
    4c14:	e9 01       	movw	r28, r18
    USB_KeyboardReport_Data_t* KeyboardReport = (USB_KeyboardReport_Data_t*)ReportData;
    if ( key_state == SEND_KEY )
    4c16:	80 91 49 09 	lds	r24, 0x0949	; 0x800949 <key_state>
    4c1a:	81 11       	cpse	r24, r1
    4c1c:	2b c0       	rjmp	.+86     	; 0x4c74 <CALLBACK_HID_Device_CreateHIDReport+0x70>
    {
        uint16_t keypair = pop_key();
    4c1e:	75 df       	rcall	.-278    	; 0x4b0a <pop_key>
        key_state = CLEAR_KEY;
    4c20:	dd 24       	eor	r13, r13
    4c22:	d3 94       	inc	r13
    4c24:	d0 92 49 09 	sts	0x0949, r13	; 0x800949 <key_state>
        if ( keypair )
    4c28:	00 97       	sbiw	r24, 0x00	; 0
    4c2a:	61 f0       	breq	.+24     	; 0x4c44 <CALLBACK_HID_Device_CreateHIDReport+0x40>
        {
            uint8_t mod = 0;
            uint8_t key = 0;
            CONVERT_KEYPAIR( keypair, key, mod );
    4c2c:	98 83       	st	Y, r25
    4c2e:	8a 83       	std	Y+2, r24	; 0x02
    {
        KeyboardReport->Modifier = 0;
		KeyboardReport->KeyCode[0] = 0;
        key_state = SEND_KEY;
    }
	*ReportID   = HID_REPORTID_KeyboardReport;
    4c30:	82 e0       	ldi	r24, 0x02	; 2
    4c32:	f7 01       	movw	r30, r14
    4c34:	80 83       	st	Z, r24
	*ReportSize = sizeof(USB_KeyboardReport_Data_t);
    4c36:	88 e0       	ldi	r24, 0x08	; 8
    4c38:	90 e0       	ldi	r25, 0x00	; 0
    4c3a:	f8 01       	movw	r30, r16
    4c3c:	91 83       	std	Z+1, r25	; 0x01
    4c3e:	80 83       	st	Z, r24
    return false;
    4c40:	80 e0       	ldi	r24, 0x00	; 0
    4c42:	10 c0       	rjmp	.+32     	; 0x4c64 <CALLBACK_HID_Device_CreateHIDReport+0x60>

PROCESS_MOUSE:
    {
		USB_MouseReport_Data_t* MouseReport = (USB_MouseReport_Data_t*)ReportData;
        get_mouse_status( &MouseReport->Y, &MouseReport->X, &MouseReport->Button );        
    4c44:	be 01       	movw	r22, r28
    4c46:	6f 5f       	subi	r22, 0xFF	; 255
    4c48:	7f 4f       	sbci	r23, 0xFF	; 255
    4c4a:	ae 01       	movw	r20, r28
    4c4c:	ce 01       	movw	r24, r28
    4c4e:	02 96       	adiw	r24, 0x02	; 2
    4c50:	0e 94 8a 0c 	call	0x1914	; 0x1914 <get_mouse_status>
		*ReportID   = HID_REPORTID_MouseReport;
    4c54:	f7 01       	movw	r30, r14
    4c56:	d0 82       	st	Z, r13
		*ReportSize = sizeof(USB_MouseReport_Data_t);
    4c58:	83 e0       	ldi	r24, 0x03	; 3
    4c5a:	90 e0       	ldi	r25, 0x00	; 0
    4c5c:	f8 01       	movw	r30, r16
    4c5e:	91 83       	std	Z+1, r25	; 0x01
    4c60:	80 83       	st	Z, r24
		return true;
    4c62:	81 e0       	ldi	r24, 0x01	; 1
	}
}
    4c64:	df 91       	pop	r29
    4c66:	cf 91       	pop	r28
    4c68:	1f 91       	pop	r17
    4c6a:	0f 91       	pop	r16
    4c6c:	ff 90       	pop	r15
    4c6e:	ef 90       	pop	r14
    4c70:	df 90       	pop	r13
    4c72:	08 95       	ret
        KeyboardReport->Modifier = 0;
    4c74:	18 82       	st	Y, r1
		KeyboardReport->KeyCode[0] = 0;
    4c76:	1a 82       	std	Y+2, r1	; 0x02
        key_state = SEND_KEY;
    4c78:	10 92 49 09 	sts	0x0949, r1	; 0x800949 <key_state>
    4c7c:	d9 cf       	rjmp	.-78     	; 0x4c30 <CALLBACK_HID_Device_CreateHIDReport+0x2c>

00004c7e <CALLBACK_HID_Device_ProcessHIDReport>:
                                          const uint8_t ReportType,
                                          const void* ReportData,
                                          const uint16_t ReportSize)
{

}
    4c7e:	08 95       	ret

00004c80 <EVENT_USB_Device_StartOfFrame>:
			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration and state.
			 */
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo) ATTR_ALWAYS_INLINE ATTR_NON_NULL_PTR_ARG(1);
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
			{
				if (HIDInterfaceInfo->State.IdleMSRemaining)
    4c80:	80 91 4a 04 	lds	r24, 0x044A	; 0x80044a <Device_HID_Interface+0xe>
    4c84:	90 91 4b 04 	lds	r25, 0x044B	; 0x80044b <Device_HID_Interface+0xf>
    4c88:	00 97       	sbiw	r24, 0x00	; 0
    4c8a:	29 f0       	breq	.+10     	; 0x4c96 <EVENT_USB_Device_StartOfFrame+0x16>
				  HIDInterfaceInfo->State.IdleMSRemaining--;
    4c8c:	01 97       	sbiw	r24, 0x01	; 1
    4c8e:	90 93 4b 04 	sts	0x044B, r25	; 0x80044b <Device_HID_Interface+0xf>
    4c92:	80 93 4a 04 	sts	0x044A, r24	; 0x80044a <Device_HID_Interface+0xe>

/** Event handler for the USB device Start Of Frame event. */
void EVENT_USB_Device_StartOfFrame(void)
{
	HID_Device_MillisecondElapsed(&Device_HID_Interface);
}
    4c96:	08 95       	ret

00004c98 <EVENT_CDC_Device_ControLineStateChanged>:
	   in the pending data from the USB endpoints.
	*/
	bool HostReady = (CDCInterfaceInfo->State.ControlLineStates.HostToDevice & CDC_CONTROL_LINE_OUT_DTR) != 0;

	(void)HostReady;
}
    4c98:	08 95       	ret

00004c9a <lufa_main_loop>:

void lufa_main_loop(void)
{
	CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
    4c9a:	8c e4       	ldi	r24, 0x4C	; 76
    4c9c:	94 e0       	ldi	r25, 0x04	; 4
    4c9e:	b0 d5       	rcall	.+2912   	; 0x5800 <CDC_Device_USBTask>
    uint8_t c = CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
    4ca0:	8c e4       	ldi	r24, 0x4C	; 76
    4ca2:	94 e0       	ldi	r25, 0x04	; 4
    4ca4:	c3 d5       	rcall	.+2950   	; 0x582c <CDC_Device_ReceiveByte>
    if ( c != 0xff )
    4ca6:	8f 3f       	cpi	r24, 0xFF	; 255
    4ca8:	11 f0       	breq	.+4      	; 0x4cae <lufa_main_loop+0x14>
    {
        ser_push(c);
    4caa:	0e 94 86 0a 	call	0x150c	; 0x150c <ser_push>
    } 
    HID_Device_USBTask(&Device_HID_Interface);
    4cae:	8c e3       	ldi	r24, 0x3C	; 60
    4cb0:	94 e0       	ldi	r25, 0x04	; 4
    USB_USBTask();
    4cb2:	f9 d7       	rcall	.+4082   	; 0x5ca6 <HID_Device_USBTask>
    4cb4:	01 c5       	rjmp	.+2562   	; 0x56b8 <USB_USBTask>

00004cb6 <CALLBACK_USB_GetDescriptor>:

uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint16_t wIndex,
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
    4cb6:	29 2f       	mov	r18, r25
    4cb8:	33 27       	eor	r19, r19
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
    4cba:	23 30       	cpi	r18, 0x03	; 3
    4cbc:	31 05       	cpc	r19, r1
    4cbe:	d1 f0       	breq	.+52     	; 0x4cf4 <CALLBACK_USB_GetDescriptor+0x3e>
    4cc0:	70 f4       	brcc	.+28     	; 0x4cde <CALLBACK_USB_GetDescriptor+0x28>
    4cc2:	21 30       	cpi	r18, 0x01	; 1
    4cc4:	31 05       	cpc	r19, r1
    4cc6:	51 f1       	breq	.+84     	; 0x4d1c <CALLBACK_USB_GetDescriptor+0x66>
    4cc8:	22 30       	cpi	r18, 0x02	; 2
    4cca:	31 05       	cpc	r19, r1
    4ccc:	61 f1       	breq	.+88     	; 0x4d26 <CALLBACK_USB_GetDescriptor+0x70>
	uint16_t    Size    = NO_DESCRIPTOR;
    4cce:	90 e0       	ldi	r25, 0x00	; 0
    4cd0:	80 e0       	ldi	r24, 0x00	; 0
	const void* Address = NULL;
    4cd2:	30 e0       	ldi	r19, 0x00	; 0
    4cd4:	20 e0       	ldi	r18, 0x00	; 0
			Address = &HIDReport;
			Size    = sizeof(HIDReport);
			break;
	}

	*DescriptorAddress = Address;
    4cd6:	fa 01       	movw	r30, r20
    4cd8:	31 83       	std	Z+1, r19	; 0x01
    4cda:	20 83       	st	Z, r18
	return Size;
}
    4cdc:	08 95       	ret
    4cde:	21 32       	cpi	r18, 0x21	; 33
    4ce0:	31 05       	cpc	r19, r1
    4ce2:	31 f1       	breq	.+76     	; 0x4d30 <CALLBACK_USB_GetDescriptor+0x7a>
    4ce4:	22 32       	cpi	r18, 0x22	; 34
    4ce6:	31 05       	cpc	r19, r1
    4ce8:	91 f7       	brne	.-28     	; 0x4cce <CALLBACK_USB_GetDescriptor+0x18>
			Size    = sizeof(HIDReport);
    4cea:	89 e7       	ldi	r24, 0x79	; 121
    4cec:	90 e0       	ldi	r25, 0x00	; 0
			Address = &HIDReport;
    4cee:	2c e4       	ldi	r18, 0x4C	; 76
    4cf0:	35 e0       	ldi	r19, 0x05	; 5
    4cf2:	f1 cf       	rjmp	.-30     	; 0x4cd6 <CALLBACK_USB_GetDescriptor+0x20>
			switch (DescriptorNumber)
    4cf4:	99 27       	eor	r25, r25
    4cf6:	81 30       	cpi	r24, 0x01	; 1
    4cf8:	91 05       	cpc	r25, r1
    4cfa:	69 f0       	breq	.+26     	; 0x4d16 <CALLBACK_USB_GetDescriptor+0x60>
    4cfc:	00 97       	sbiw	r24, 0x00	; 0
    4cfe:	29 f0       	breq	.+10     	; 0x4d0a <CALLBACK_USB_GetDescriptor+0x54>
    4d00:	02 97       	sbiw	r24, 0x02	; 2
    4d02:	29 f7       	brne	.-54     	; 0x4cce <CALLBACK_USB_GetDescriptor+0x18>
					Size    = pgm_read_byte(&ProductString.Header.Size);
    4d04:	e9 e8       	ldi	r30, 0x89	; 137
    4d06:	f4 e0       	ldi	r31, 0x04	; 4
    4d08:	02 c0       	rjmp	.+4      	; 0x4d0e <CALLBACK_USB_GetDescriptor+0x58>
					Size    = pgm_read_byte(&LanguageString.Header.Size);
    4d0a:	e7 ed       	ldi	r30, 0xD7	; 215
    4d0c:	f4 e0       	ldi	r31, 0x04	; 4
					Size    = pgm_read_byte(&ProductString.Header.Size);
    4d0e:	84 91       	lpm	r24, Z
    4d10:	90 e0       	ldi	r25, 0x00	; 0
					Address = &ProductString;
    4d12:	9f 01       	movw	r18, r30
					break;
    4d14:	e0 cf       	rjmp	.-64     	; 0x4cd6 <CALLBACK_USB_GetDescriptor+0x20>
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
    4d16:	eb eb       	ldi	r30, 0xBB	; 187
    4d18:	f4 e0       	ldi	r31, 0x04	; 4
    4d1a:	f9 cf       	rjmp	.-14     	; 0x4d0e <CALLBACK_USB_GetDescriptor+0x58>
			Size    = sizeof(USB_Descriptor_Device_t);
    4d1c:	82 e1       	ldi	r24, 0x12	; 18
    4d1e:	90 e0       	ldi	r25, 0x00	; 0
			Address = &DeviceDescriptor;
    4d20:	2a e3       	ldi	r18, 0x3A	; 58
    4d22:	35 e0       	ldi	r19, 0x05	; 5
    4d24:	d8 cf       	rjmp	.-80     	; 0x4cd6 <CALLBACK_USB_GetDescriptor+0x20>
			Size    = sizeof(USB_Descriptor_Configuration_t);
    4d26:	8f e5       	ldi	r24, 0x5F	; 95
    4d28:	90 e0       	ldi	r25, 0x00	; 0
			Address = &ConfigurationDescriptor;
    4d2a:	2b ed       	ldi	r18, 0xDB	; 219
    4d2c:	34 e0       	ldi	r19, 0x04	; 4
    4d2e:	d3 cf       	rjmp	.-90     	; 0x4cd6 <CALLBACK_USB_GetDescriptor+0x20>
			Size    = sizeof(USB_HID_Descriptor_HID_t);
    4d30:	89 e0       	ldi	r24, 0x09	; 9
    4d32:	90 e0       	ldi	r25, 0x00	; 0
			Address = &ConfigurationDescriptor.HID_HIDData;
    4d34:	2a e2       	ldi	r18, 0x2A	; 42
    4d36:	35 e0       	ldi	r19, 0x05	; 5
    4d38:	ce cf       	rjmp	.-100    	; 0x4cd6 <CALLBACK_USB_GetDescriptor+0x20>

00004d3a <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    4d3a:	af 92       	push	r10
    4d3c:	bf 92       	push	r11
    4d3e:	cf 92       	push	r12
    4d40:	df 92       	push	r13
    4d42:	ff 92       	push	r15
    4d44:	0f 93       	push	r16
    4d46:	1f 93       	push	r17
    4d48:	cf 93       	push	r28
    4d4a:	df 93       	push	r29
    4d4c:	6c 01       	movw	r12, r24
    4d4e:	eb 01       	movw	r28, r22
    4d50:	8a 01       	movw	r16, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    4d52:	c6 d1       	rcall	.+908    	; 0x50e0 <Endpoint_WaitUntilReady>
    4d54:	f8 2e       	mov	r15, r24
    4d56:	81 11       	cpse	r24, r1
    4d58:	23 c0       	rjmp	.+70     	; 0x4da0 <Endpoint_Write_Stream_LE+0x66>
	  return ErrorCode;

	if (BytesProcessed != NULL)
    4d5a:	01 15       	cp	r16, r1
    4d5c:	11 05       	cpc	r17, r1
    4d5e:	39 f0       	breq	.+14     	; 0x4d6e <Endpoint_Write_Stream_LE+0x34>
	{
		Length -= *BytesProcessed;
    4d60:	f8 01       	movw	r30, r16
    4d62:	80 81       	ld	r24, Z
    4d64:	91 81       	ldd	r25, Z+1	; 0x01
    4d66:	c8 1b       	sub	r28, r24
    4d68:	d9 0b       	sbc	r29, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    4d6a:	c8 0e       	add	r12, r24
    4d6c:	d9 1e       	adc	r13, r25
{
    4d6e:	b1 2c       	mov	r11, r1
    4d70:	a1 2c       	mov	r10, r1
	}

	while (Length)
    4d72:	20 97       	sbiw	r28, 0x00	; 0
    4d74:	a9 f0       	breq	.+42     	; 0x4da0 <Endpoint_Write_Stream_LE+0x66>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    4d76:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    4d7a:	85 fd       	sbrc	r24, 5
    4d7c:	21 c0       	rjmp	.+66     	; 0x4dc0 <Endpoint_Write_Stream_LE+0x86>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    4d7e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    4d82:	8e 77       	andi	r24, 0x7E	; 126
    4d84:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
    4d88:	01 15       	cp	r16, r1
    4d8a:	11 05       	cpc	r17, r1
    4d8c:	a1 f0       	breq	.+40     	; 0x4db6 <Endpoint_Write_Stream_LE+0x7c>
			{
				*BytesProcessed += BytesInTransfer;
    4d8e:	f8 01       	movw	r30, r16
    4d90:	80 81       	ld	r24, Z
    4d92:	91 81       	ldd	r25, Z+1	; 0x01
    4d94:	a8 0e       	add	r10, r24
    4d96:	b9 1e       	adc	r11, r25
    4d98:	b1 82       	std	Z+1, r11	; 0x01
    4d9a:	a0 82       	st	Z, r10
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
    4d9c:	85 e0       	ldi	r24, 0x05	; 5
    4d9e:	f8 2e       	mov	r15, r24
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    4da0:	8f 2d       	mov	r24, r15
    4da2:	df 91       	pop	r29
    4da4:	cf 91       	pop	r28
    4da6:	1f 91       	pop	r17
    4da8:	0f 91       	pop	r16
    4daa:	ff 90       	pop	r15
    4dac:	df 90       	pop	r13
    4dae:	cf 90       	pop	r12
    4db0:	bf 90       	pop	r11
    4db2:	af 90       	pop	r10
			if ((ErrorCode = Endpoint_WaitUntilReady()))
    4db4:	08 95       	ret
    4db6:	94 d1       	rcall	.+808    	; 0x50e0 <Endpoint_WaitUntilReady>
    4db8:	88 23       	and	r24, r24
    4dba:	d9 f2       	breq	.-74     	; 0x4d72 <Endpoint_Write_Stream_LE+0x38>
    4dbc:	f8 2e       	mov	r15, r24
    4dbe:	f0 cf       	rjmp	.-32     	; 0x4da0 <Endpoint_Write_Stream_LE+0x66>
			TEMPLATE_TRANSFER_BYTE(DataStream);
    4dc0:	f6 01       	movw	r30, r12
    4dc2:	81 91       	ld	r24, Z+
    4dc4:	6f 01       	movw	r12, r30
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    4dc6:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			Length--;
    4dca:	21 97       	sbiw	r28, 0x01	; 1
			BytesInTransfer++;
    4dcc:	ff ef       	ldi	r31, 0xFF	; 255
    4dce:	af 1a       	sub	r10, r31
    4dd0:	bf 0a       	sbc	r11, r31
    4dd2:	cf cf       	rjmp	.-98     	; 0x4d72 <Endpoint_Write_Stream_LE+0x38>

00004dd4 <Endpoint_Write_Control_Stream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
    4dd4:	fc 01       	movw	r30, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    4dd6:	80 91 70 09 	lds	r24, 0x0970	; 0x800970 <USB_ControlRequest+0x6>
    4dda:	90 91 71 09 	lds	r25, 0x0971	; 0x800971 <USB_ControlRequest+0x7>
    4dde:	86 17       	cp	r24, r22
    4de0:	97 07       	cpc	r25, r23
    4de2:	a0 f0       	brcs	.+40     	; 0x4e0c <Endpoint_Write_Control_Stream_LE+0x38>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    4de4:	61 15       	cp	r22, r1
    4de6:	71 05       	cpc	r23, r1
    4de8:	29 f4       	brne	.+10     	; 0x4df4 <Endpoint_Write_Control_Stream_LE+0x20>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    4dea:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    4dee:	9e 77       	andi	r25, 0x7E	; 126
    4df0:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    4df4:	90 e0       	ldi	r25, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    4df6:	61 15       	cp	r22, r1
    4df8:	71 05       	cpc	r23, r1
    4dfa:	51 f4       	brne	.+20     	; 0x4e10 <Endpoint_Write_Control_Stream_LE+0x3c>
    4dfc:	91 11       	cpse	r25, r1
    4dfe:	08 c0       	rjmp	.+16     	; 0x4e10 <Endpoint_Write_Control_Stream_LE+0x3c>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    4e00:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    4e04:	82 ff       	sbrs	r24, 2
    4e06:	34 c0       	rjmp	.+104    	; 0x4e70 <Endpoint_Write_Control_Stream_LE+0x9c>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    4e08:	80 e0       	ldi	r24, 0x00	; 0
    4e0a:	08 95       	ret
    4e0c:	bc 01       	movw	r22, r24
    4e0e:	f2 cf       	rjmp	.-28     	; 0x4df4 <Endpoint_Write_Control_Stream_LE+0x20>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    4e10:	80 91 69 09 	lds	r24, 0x0969	; 0x800969 <USB_DeviceState>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    4e14:	88 23       	and	r24, r24
    4e16:	c1 f1       	breq	.+112    	; 0x4e88 <Endpoint_Write_Control_Stream_LE+0xb4>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    4e18:	85 30       	cpi	r24, 0x05	; 5
    4e1a:	c1 f1       	breq	.+112    	; 0x4e8c <Endpoint_Write_Control_Stream_LE+0xb8>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    4e1c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		else if (Endpoint_IsSETUPReceived())
    4e20:	83 fd       	sbrc	r24, 3
    4e22:	30 c0       	rjmp	.+96     	; 0x4e84 <Endpoint_Write_Control_Stream_LE+0xb0>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    4e24:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		else if (Endpoint_IsOUTReceived())
    4e28:	82 fd       	sbrc	r24, 2
    4e2a:	ea cf       	rjmp	.-44     	; 0x4e00 <Endpoint_Write_Control_Stream_LE+0x2c>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    4e2c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		if (Endpoint_IsINReady())
    4e30:	80 ff       	sbrs	r24, 0
    4e32:	e1 cf       	rjmp	.-62     	; 0x4df6 <Endpoint_Write_Control_Stream_LE+0x22>
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    4e34:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    4e38:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    4e3c:	38 2f       	mov	r19, r24
			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    4e3e:	61 15       	cp	r22, r1
    4e40:	71 05       	cpc	r23, r1
    4e42:	19 f0       	breq	.+6      	; 0x4e4a <Endpoint_Write_Control_Stream_LE+0x76>
    4e44:	28 30       	cpi	r18, 0x08	; 8
    4e46:	31 05       	cpc	r19, r1
    4e48:	58 f0       	brcs	.+22     	; 0x4e60 <Endpoint_Write_Control_Stream_LE+0x8c>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    4e4a:	91 e0       	ldi	r25, 0x01	; 1
    4e4c:	28 30       	cpi	r18, 0x08	; 8
    4e4e:	31 05       	cpc	r19, r1
    4e50:	09 f0       	breq	.+2      	; 0x4e54 <Endpoint_Write_Control_Stream_LE+0x80>
    4e52:	90 e0       	ldi	r25, 0x00	; 0
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    4e54:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    4e58:	2e 77       	andi	r18, 0x7E	; 126
    4e5a:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    4e5e:	cb cf       	rjmp	.-106    	; 0x4df6 <Endpoint_Write_Control_Stream_LE+0x22>
				TEMPLATE_TRANSFER_BYTE(DataStream);
    4e60:	81 91       	ld	r24, Z+
				UEDATX = Data;
    4e62:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				Length--;
    4e66:	61 50       	subi	r22, 0x01	; 1
    4e68:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    4e6a:	2f 5f       	subi	r18, 0xFF	; 255
    4e6c:	3f 4f       	sbci	r19, 0xFF	; 255
    4e6e:	e7 cf       	rjmp	.-50     	; 0x4e3e <Endpoint_Write_Control_Stream_LE+0x6a>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    4e70:	80 91 69 09 	lds	r24, 0x0969	; 0x800969 <USB_DeviceState>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    4e74:	88 23       	and	r24, r24
    4e76:	41 f0       	breq	.+16     	; 0x4e88 <Endpoint_Write_Control_Stream_LE+0xb4>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    4e78:	85 30       	cpi	r24, 0x05	; 5
    4e7a:	41 f0       	breq	.+16     	; 0x4e8c <Endpoint_Write_Control_Stream_LE+0xb8>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    4e7c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		else if (Endpoint_IsSETUPReceived())
    4e80:	83 ff       	sbrs	r24, 3
    4e82:	be cf       	rjmp	.-132    	; 0x4e00 <Endpoint_Write_Control_Stream_LE+0x2c>
		  return ENDPOINT_RWCSTREAM_HostAborted;
    4e84:	81 e0       	ldi	r24, 0x01	; 1
}
    4e86:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    4e88:	82 e0       	ldi	r24, 0x02	; 2
    4e8a:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    4e8c:	83 e0       	ldi	r24, 0x03	; 3
    4e8e:	08 95       	ret

00004e90 <Endpoint_Read_Control_Stream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
    4e90:	fc 01       	movw	r30, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
    4e92:	61 15       	cp	r22, r1
    4e94:	71 05       	cpc	r23, r1
    4e96:	29 f4       	brne	.+10     	; 0x4ea2 <Endpoint_Read_Control_Stream_LE+0x12>
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    4e98:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    4e9c:	9b 77       	andi	r25, 0x7B	; 123
    4e9e:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	  Endpoint_ClearOUT();

	while (Length)
    4ea2:	61 15       	cp	r22, r1
    4ea4:	71 05       	cpc	r23, r1
    4ea6:	31 f4       	brne	.+12     	; 0x4eb4 <Endpoint_Read_Control_Stream_LE+0x24>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    4ea8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
    4eac:	80 ff       	sbrs	r24, 0
    4eae:	1e c0       	rjmp	.+60     	; 0x4eec <Endpoint_Read_Control_Stream_LE+0x5c>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    4eb0:	80 e0       	ldi	r24, 0x00	; 0
    4eb2:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    4eb4:	80 91 69 09 	lds	r24, 0x0969	; 0x800969 <USB_DeviceState>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    4eb8:	88 23       	and	r24, r24
    4eba:	11 f1       	breq	.+68     	; 0x4f00 <Endpoint_Read_Control_Stream_LE+0x70>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    4ebc:	85 30       	cpi	r24, 0x05	; 5
    4ebe:	e1 f0       	breq	.+56     	; 0x4ef8 <Endpoint_Read_Control_Stream_LE+0x68>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    4ec0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		else if (Endpoint_IsSETUPReceived())
    4ec4:	83 fd       	sbrc	r24, 3
    4ec6:	1a c0       	rjmp	.+52     	; 0x4efc <Endpoint_Read_Control_Stream_LE+0x6c>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    4ec8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		if (Endpoint_IsOUTReceived())
    4ecc:	82 ff       	sbrs	r24, 2
    4ece:	e9 cf       	rjmp	.-46     	; 0x4ea2 <Endpoint_Read_Control_Stream_LE+0x12>
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    4ed0:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    4ed4:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    4ed8:	38 2f       	mov	r19, r24
			while (Length && Endpoint_BytesInEndpoint())
    4eda:	23 2b       	or	r18, r19
    4edc:	e9 f2       	breq	.-70     	; 0x4e98 <Endpoint_Read_Control_Stream_LE+0x8>
				return UEDATX;
    4ede:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				TEMPLATE_TRANSFER_BYTE(DataStream);
    4ee2:	81 93       	st	Z+, r24
				Length--;
    4ee4:	61 50       	subi	r22, 0x01	; 1
    4ee6:	71 09       	sbc	r23, r1
			while (Length && Endpoint_BytesInEndpoint())
    4ee8:	99 f7       	brne	.-26     	; 0x4ed0 <Endpoint_Read_Control_Stream_LE+0x40>
    4eea:	d6 cf       	rjmp	.-84     	; 0x4e98 <Endpoint_Read_Control_Stream_LE+0x8>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    4eec:	80 91 69 09 	lds	r24, 0x0969	; 0x800969 <USB_DeviceState>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    4ef0:	88 23       	and	r24, r24
    4ef2:	31 f0       	breq	.+12     	; 0x4f00 <Endpoint_Read_Control_Stream_LE+0x70>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    4ef4:	85 30       	cpi	r24, 0x05	; 5
    4ef6:	c1 f6       	brne	.-80     	; 0x4ea8 <Endpoint_Read_Control_Stream_LE+0x18>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    4ef8:	83 e0       	ldi	r24, 0x03	; 3
}
    4efa:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_HostAborted;
    4efc:	81 e0       	ldi	r24, 0x01	; 1
    4efe:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    4f00:	82 e0       	ldi	r24, 0x02	; 2
    4f02:	08 95       	ret

00004f04 <Endpoint_Write_Control_PStream_LE>:
{
    4f04:	fc 01       	movw	r30, r24
	if (Length > USB_ControlRequest.wLength)
    4f06:	80 91 70 09 	lds	r24, 0x0970	; 0x800970 <USB_ControlRequest+0x6>
    4f0a:	90 91 71 09 	lds	r25, 0x0971	; 0x800971 <USB_ControlRequest+0x7>
    4f0e:	86 17       	cp	r24, r22
    4f10:	97 07       	cpc	r25, r23
    4f12:	a0 f0       	brcs	.+40     	; 0x4f3c <Endpoint_Write_Control_PStream_LE+0x38>
	else if (!(Length))
    4f14:	61 15       	cp	r22, r1
    4f16:	71 05       	cpc	r23, r1
    4f18:	29 f4       	brne	.+10     	; 0x4f24 <Endpoint_Write_Control_PStream_LE+0x20>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    4f1a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    4f1e:	8e 77       	andi	r24, 0x7E	; 126
    4f20:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    4f24:	90 e0       	ldi	r25, 0x00	; 0
	while (Length || LastPacketFull)
    4f26:	61 15       	cp	r22, r1
    4f28:	71 05       	cpc	r23, r1
    4f2a:	51 f4       	brne	.+20     	; 0x4f40 <Endpoint_Write_Control_PStream_LE+0x3c>
    4f2c:	91 11       	cpse	r25, r1
    4f2e:	08 c0       	rjmp	.+16     	; 0x4f40 <Endpoint_Write_Control_PStream_LE+0x3c>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    4f30:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	while (!(Endpoint_IsOUTReceived()))
    4f34:	82 ff       	sbrs	r24, 2
    4f36:	35 c0       	rjmp	.+106    	; 0x4fa2 <Endpoint_Write_Control_PStream_LE+0x9e>
	return ENDPOINT_RWCSTREAM_NoError;
    4f38:	80 e0       	ldi	r24, 0x00	; 0
    4f3a:	08 95       	ret
    4f3c:	bc 01       	movw	r22, r24
    4f3e:	f2 cf       	rjmp	.-28     	; 0x4f24 <Endpoint_Write_Control_PStream_LE+0x20>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    4f40:	80 91 69 09 	lds	r24, 0x0969	; 0x800969 <USB_DeviceState>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    4f44:	88 23       	and	r24, r24
    4f46:	c9 f1       	breq	.+114    	; 0x4fba <Endpoint_Write_Control_PStream_LE+0xb6>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    4f48:	85 30       	cpi	r24, 0x05	; 5
    4f4a:	c9 f1       	breq	.+114    	; 0x4fbe <Endpoint_Write_Control_PStream_LE+0xba>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    4f4c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		else if (Endpoint_IsSETUPReceived())
    4f50:	83 fd       	sbrc	r24, 3
    4f52:	31 c0       	rjmp	.+98     	; 0x4fb6 <Endpoint_Write_Control_PStream_LE+0xb2>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    4f54:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		else if (Endpoint_IsOUTReceived())
    4f58:	82 fd       	sbrc	r24, 2
    4f5a:	ea cf       	rjmp	.-44     	; 0x4f30 <Endpoint_Write_Control_PStream_LE+0x2c>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    4f5c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		if (Endpoint_IsINReady())
    4f60:	80 ff       	sbrs	r24, 0
    4f62:	e1 cf       	rjmp	.-62     	; 0x4f26 <Endpoint_Write_Control_PStream_LE+0x22>
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    4f64:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    4f68:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    4f6c:	38 2f       	mov	r19, r24
			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    4f6e:	61 15       	cp	r22, r1
    4f70:	71 05       	cpc	r23, r1
    4f72:	19 f0       	breq	.+6      	; 0x4f7a <Endpoint_Write_Control_PStream_LE+0x76>
    4f74:	28 30       	cpi	r18, 0x08	; 8
    4f76:	31 05       	cpc	r19, r1
    4f78:	58 f0       	brcs	.+22     	; 0x4f90 <Endpoint_Write_Control_PStream_LE+0x8c>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    4f7a:	91 e0       	ldi	r25, 0x01	; 1
    4f7c:	28 30       	cpi	r18, 0x08	; 8
    4f7e:	31 05       	cpc	r19, r1
    4f80:	09 f0       	breq	.+2      	; 0x4f84 <Endpoint_Write_Control_PStream_LE+0x80>
    4f82:	90 e0       	ldi	r25, 0x00	; 0
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    4f84:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    4f88:	8e 77       	andi	r24, 0x7E	; 126
    4f8a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    4f8e:	cb cf       	rjmp	.-106    	; 0x4f26 <Endpoint_Write_Control_PStream_LE+0x22>
				TEMPLATE_TRANSFER_BYTE(DataStream);
    4f90:	84 91       	lpm	r24, Z
				UEDATX = Data;
    4f92:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    4f96:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    4f98:	61 50       	subi	r22, 0x01	; 1
    4f9a:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    4f9c:	2f 5f       	subi	r18, 0xFF	; 255
    4f9e:	3f 4f       	sbci	r19, 0xFF	; 255
    4fa0:	e6 cf       	rjmp	.-52     	; 0x4f6e <Endpoint_Write_Control_PStream_LE+0x6a>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    4fa2:	80 91 69 09 	lds	r24, 0x0969	; 0x800969 <USB_DeviceState>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    4fa6:	88 23       	and	r24, r24
    4fa8:	41 f0       	breq	.+16     	; 0x4fba <Endpoint_Write_Control_PStream_LE+0xb6>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    4faa:	85 30       	cpi	r24, 0x05	; 5
    4fac:	41 f0       	breq	.+16     	; 0x4fbe <Endpoint_Write_Control_PStream_LE+0xba>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    4fae:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		else if (Endpoint_IsSETUPReceived())
    4fb2:	83 ff       	sbrs	r24, 3
    4fb4:	bd cf       	rjmp	.-134    	; 0x4f30 <Endpoint_Write_Control_PStream_LE+0x2c>
		  return ENDPOINT_RWCSTREAM_HostAborted;
    4fb6:	81 e0       	ldi	r24, 0x01	; 1
}
    4fb8:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    4fba:	82 e0       	ldi	r24, 0x02	; 2
    4fbc:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    4fbe:	83 e0       	ldi	r24, 0x03	; 3
    4fc0:	08 95       	ret

00004fc2 <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    4fc2:	98 2f       	mov	r25, r24
    4fc4:	97 30       	cpi	r25, 0x07	; 7
    4fc6:	28 f0       	brcs	.+10     	; 0x4fd2 <Endpoint_ConfigureEndpoint_Prv+0x10>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    4fc8:	8f 70       	andi	r24, 0x0F	; 15
    4fca:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
    4fce:	81 e0       	ldi	r24, 0x01	; 1
    4fd0:	08 95       	ret
    4fd2:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			UECFG1XTemp = UECFG1XData;
    4fd6:	24 2f       	mov	r18, r20
			UECFG0XTemp = UECFG0XData;
    4fd8:	76 2f       	mov	r23, r22
			UEIENXTemp  = 0;
    4fda:	50 e0       	ldi	r21, 0x00	; 0
		if (EPNum == Number)
    4fdc:	98 17       	cp	r25, r24
    4fde:	31 f0       	breq	.+12     	; 0x4fec <Endpoint_ConfigureEndpoint_Prv+0x2a>
			UECFG0XTemp = UECFG0X;
    4fe0:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
			UECFG1XTemp = UECFG1X;
    4fe4:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
			UEIENXTemp  = UEIENX;
    4fe8:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
		if (!(UECFG1XTemp & (1 << ALLOC)))
    4fec:	21 fd       	sbrc	r18, 1
    4fee:	02 c0       	rjmp	.+4      	; 0x4ff4 <Endpoint_ConfigureEndpoint_Prv+0x32>
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    4ff0:	9f 5f       	subi	r25, 0xFF	; 255
    4ff2:	e8 cf       	rjmp	.-48     	; 0x4fc4 <Endpoint_ConfigureEndpoint_Prv+0x2>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
    4ff4:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    4ff8:	3e 7f       	andi	r19, 0xFE	; 254
    4ffa:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		UECFG1X &= ~(1 << ALLOC);
    4ffe:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    5002:	3d 7f       	andi	r19, 0xFD	; 253
    5004:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
				UECONX |= (1 << EPEN);
    5008:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    500c:	31 60       	ori	r19, 0x01	; 1
    500e:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		UECFG0X = UECFG0XTemp;
    5012:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
		UECFG1X = UECFG1XTemp;
    5016:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		UEIENX  = UEIENXTemp;
    501a:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    501e:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
		if (!(Endpoint_IsConfigured()))
    5022:	27 fd       	sbrc	r18, 7
    5024:	e5 cf       	rjmp	.-54     	; 0x4ff0 <Endpoint_ConfigureEndpoint_Prv+0x2e>
		  return false;
    5026:	80 e0       	ldi	r24, 0x00	; 0
#endif
}
    5028:	08 95       	ret

0000502a <Endpoint_ConfigureEndpointTable>:
{
    502a:	0f 93       	push	r16
    502c:	1f 93       	push	r17
    502e:	cf 93       	push	r28
    5030:	df 93       	push	r29
    5032:	06 2f       	mov	r16, r22
	for (uint8_t i = 0; i < Entries; i++)
    5034:	ec 01       	movw	r28, r24
    5036:	10 e0       	ldi	r17, 0x00	; 0
    5038:	10 13       	cpse	r17, r16
    503a:	02 c0       	rjmp	.+4      	; 0x5040 <Endpoint_ConfigureEndpointTable+0x16>
	return true;
    503c:	81 e0       	ldi	r24, 0x01	; 1
    503e:	0b c0       	rjmp	.+22     	; 0x5056 <Endpoint_ConfigureEndpointTable+0x2c>
		if (!(Table[i].Address))
    5040:	98 81       	ld	r25, Y
    5042:	91 11       	cpse	r25, r1
    5044:	03 c0       	rjmp	.+6      	; 0x504c <Endpoint_ConfigureEndpointTable+0x22>
	for (uint8_t i = 0; i < Entries; i++)
    5046:	1f 5f       	subi	r17, 0xFF	; 255
    5048:	25 96       	adiw	r28, 0x05	; 5
    504a:	f6 cf       	rjmp	.-20     	; 0x5038 <Endpoint_ConfigureEndpointTable+0xe>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
    504c:	89 2f       	mov	r24, r25
    504e:	8f 70       	andi	r24, 0x0F	; 15
				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
    5050:	87 30       	cpi	r24, 0x07	; 7
    5052:	30 f0       	brcs	.+12     	; 0x5060 <Endpoint_ConfigureEndpointTable+0x36>
		  return false;
    5054:	80 e0       	ldi	r24, 0x00	; 0
}
    5056:	df 91       	pop	r29
    5058:	cf 91       	pop	r28
    505a:	1f 91       	pop	r17
    505c:	0f 91       	pop	r16
    505e:	08 95       	ret
				                                      ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Endpoint_BytesToEPSizeMask(Size)));
    5060:	2c 81       	ldd	r18, Y+4	; 0x04
    5062:	42 e0       	ldi	r20, 0x02	; 2
    5064:	22 30       	cpi	r18, 0x02	; 2
    5066:	08 f0       	brcs	.+2      	; 0x506a <Endpoint_ConfigureEndpointTable+0x40>
    5068:	46 e0       	ldi	r20, 0x06	; 6
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
    506a:	e9 81       	ldd	r30, Y+1	; 0x01
    506c:	fa 81       	ldd	r31, Y+2	; 0x02
				uint16_t CheckBytes = 8;
    506e:	68 e0       	ldi	r22, 0x08	; 8
    5070:	70 e0       	ldi	r23, 0x00	; 0
				uint8_t  MaskVal    = 0;
    5072:	20 e0       	ldi	r18, 0x00	; 0
				while (CheckBytes < Bytes)
    5074:	6e 17       	cp	r22, r30
    5076:	7f 07       	cpc	r23, r31
    5078:	80 f0       	brcs	.+32     	; 0x509a <Endpoint_ConfigureEndpointTable+0x70>
				return (MaskVal << EPSIZE0);
    507a:	22 95       	swap	r18
    507c:	20 7f       	andi	r18, 0xF0	; 240
				                                      ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Endpoint_BytesToEPSizeMask(Size)));
    507e:	42 2b       	or	r20, r18
				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 << EPDIR) : 0)),
    5080:	6b 81       	ldd	r22, Y+3	; 0x03
    5082:	20 e4       	ldi	r18, 0x40	; 64
    5084:	62 9f       	mul	r22, r18
    5086:	b0 01       	movw	r22, r0
    5088:	11 24       	eor	r1, r1
    508a:	99 1f       	adc	r25, r25
    508c:	99 27       	eor	r25, r25
    508e:	99 1f       	adc	r25, r25
    5090:	69 2b       	or	r22, r25
				return Endpoint_ConfigureEndpoint_Prv(Number,
    5092:	97 df       	rcall	.-210    	; 0x4fc2 <Endpoint_ConfigureEndpoint_Prv>
    5094:	81 11       	cpse	r24, r1
    5096:	d7 cf       	rjmp	.-82     	; 0x5046 <Endpoint_ConfigureEndpointTable+0x1c>
    5098:	dd cf       	rjmp	.-70     	; 0x5054 <Endpoint_ConfigureEndpointTable+0x2a>
					MaskVal++;
    509a:	2f 5f       	subi	r18, 0xFF	; 255
					CheckBytes <<= 1;
    509c:	66 0f       	add	r22, r22
    509e:	77 1f       	adc	r23, r23
    50a0:	e9 cf       	rjmp	.-46     	; 0x5074 <Endpoint_ConfigureEndpointTable+0x4a>

000050a2 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    50a2:	80 91 6a 09 	lds	r24, 0x096A	; 0x80096a <USB_ControlRequest>
    50a6:	87 ff       	sbrs	r24, 7
    50a8:	13 c0       	rjmp	.+38     	; 0x50d0 <Endpoint_ClearStatusStage+0x2e>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    50aa:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		while (!(Endpoint_IsOUTReceived()))
    50ae:	82 ff       	sbrs	r24, 2
    50b0:	06 c0       	rjmp	.+12     	; 0x50be <Endpoint_ClearStatusStage+0x1c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    50b2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    50b6:	8b 77       	andi	r24, 0x7B	; 123
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    50b8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    50bc:	04 c0       	rjmp	.+8      	; 0x50c6 <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    50be:	80 91 69 09 	lds	r24, 0x0969	; 0x800969 <USB_DeviceState>
    50c2:	81 11       	cpse	r24, r1
    50c4:	f2 cf       	rjmp	.-28     	; 0x50aa <Endpoint_ClearStatusStage+0x8>
			  return;
		}

		Endpoint_ClearIN();
	}
}
    50c6:	08 95       	ret
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    50c8:	80 91 69 09 	lds	r24, 0x0969	; 0x800969 <USB_DeviceState>
    50cc:	88 23       	and	r24, r24
    50ce:	d9 f3       	breq	.-10     	; 0x50c6 <Endpoint_ClearStatusStage+0x24>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    50d0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		while (!(Endpoint_IsINReady()))
    50d4:	80 ff       	sbrs	r24, 0
    50d6:	f8 cf       	rjmp	.-16     	; 0x50c8 <Endpoint_ClearStatusStage+0x26>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    50d8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    50dc:	8e 77       	andi	r24, 0x7E	; 126
    50de:	ec cf       	rjmp	.-40     	; 0x50b8 <Endpoint_ClearStatusStage+0x16>

000050e0 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    50e0:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    50e4:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
    50e8:	85 e6       	ldi	r24, 0x65	; 101
    50ea:	a9 01       	movw	r20, r18
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    50ec:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    50f0:	90 ff       	sbrs	r25, 0
    50f2:	06 c0       	rjmp	.+12     	; 0x5100 <Endpoint_WaitUntilReady+0x20>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    50f4:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    50f8:	90 ff       	sbrs	r25, 0
    50fa:	06 c0       	rjmp	.+12     	; 0x5108 <Endpoint_WaitUntilReady+0x28>
			  return ENDPOINT_READYWAIT_NoError;
    50fc:	80 e0       	ldi	r24, 0x00	; 0
    50fe:	08 95       	ret
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    5100:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    5104:	92 fd       	sbrc	r25, 2
    5106:	fa cf       	rjmp	.-12     	; 0x50fc <Endpoint_WaitUntilReady+0x1c>
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    5108:	90 91 69 09 	lds	r25, 0x0969	; 0x800969 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    510c:	99 23       	and	r25, r25
    510e:	89 f0       	breq	.+34     	; 0x5132 <Endpoint_WaitUntilReady+0x52>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    5110:	95 30       	cpi	r25, 0x05	; 5
    5112:	89 f0       	breq	.+34     	; 0x5136 <Endpoint_WaitUntilReady+0x56>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    5114:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    5118:	95 fd       	sbrc	r25, 5
    511a:	0f c0       	rjmp	.+30     	; 0x513a <Endpoint_WaitUntilReady+0x5a>
    511c:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    5120:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    5124:	42 17       	cp	r20, r18
    5126:	53 07       	cpc	r21, r19
    5128:	09 f3       	breq	.-62     	; 0x50ec <Endpoint_WaitUntilReady+0xc>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    512a:	81 50       	subi	r24, 0x01	; 1
    512c:	f1 f6       	brne	.-68     	; 0x50ea <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
    512e:	84 e0       	ldi	r24, 0x04	; 4
    5130:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    5132:	82 e0       	ldi	r24, 0x02	; 2
    5134:	08 95       	ret
		  return ENDPOINT_READYWAIT_BusSuspended;
    5136:	83 e0       	ldi	r24, 0x03	; 3
    5138:	08 95       	ret
		  return ENDPOINT_READYWAIT_EndpointStalled;
    513a:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
}
    513c:	08 95       	ret

0000513e <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
    513e:	0f 93       	push	r16
    5140:	1f 93       	push	r17
    5142:	cf 93       	push	r28
    5144:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    5146:	4b d0       	rcall	.+150    	; 0x51de <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    5148:	52 d0       	rcall	.+164    	; 0x51ee <USB_INT_ClearAllInterrupts>
    514a:	c8 ed       	ldi	r28, 0xD8	; 216
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    514c:	d0 e0       	ldi	r29, 0x00	; 0
    514e:	88 81       	ld	r24, Y
    5150:	8f 77       	andi	r24, 0x7F	; 127
    5152:	88 83       	st	Y, r24
    5154:	88 81       	ld	r24, Y
				USBCON |=  (1 << USBE);
    5156:	80 68       	ori	r24, 0x80	; 128
    5158:	88 83       	st	Y, r24
    515a:	88 81       	ld	r24, Y
				USBCON &= ~(1 << FRZCLK);
    515c:	8f 7d       	andi	r24, 0xDF	; 223
    515e:	88 83       	st	Y, r24
    5160:	19 bc       	out	0x29, r1	; 41
				PLLCSR = 0;
    5162:	10 92 69 09 	sts	0x0969, r1	; 0x800969 <USB_DeviceState>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    5166:	10 92 65 09 	sts	0x0965, r1	; 0x800965 <USB_Device_ConfigurationNumber>
	USB_Device_ConfigurationNumber  = 0;
    516a:	10 92 67 09 	sts	0x0967, r1	; 0x800967 <USB_Device_RemoteWakeupEnabled>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    516e:	10 92 66 09 	sts	0x0966, r1	; 0x800966 <USB_Device_CurrentlySelfPowered>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    5172:	00 ee       	ldi	r16, 0xE0	; 224
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    5174:	10 e0       	ldi	r17, 0x00	; 0
    5176:	f8 01       	movw	r30, r16
    5178:	80 81       	ld	r24, Z
    517a:	8b 7f       	andi	r24, 0xFB	; 251
    517c:	80 83       	st	Z, r24
    517e:	88 81       	ld	r24, Y
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    5180:	81 60       	ori	r24, 0x01	; 1
    5182:	88 83       	st	Y, r24
    5184:	42 e0       	ldi	r20, 0x02	; 2
				return Endpoint_ConfigureEndpoint_Prv(Number,
    5186:	60 e0       	ldi	r22, 0x00	; 0
    5188:	80 e0       	ldi	r24, 0x00	; 0
    518a:	1b df       	rcall	.-458    	; 0x4fc2 <Endpoint_ConfigureEndpoint_Prv>
    518c:	e1 ee       	ldi	r30, 0xE1	; 225
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    518e:	f0 e0       	ldi	r31, 0x00	; 0
    5190:	80 81       	ld	r24, Z
    5192:	8e 7f       	andi	r24, 0xFE	; 254
    5194:	80 83       	st	Z, r24
    5196:	e2 ee       	ldi	r30, 0xE2	; 226
						UDIEN  |= (1 << SUSPE);
    5198:	f0 e0       	ldi	r31, 0x00	; 0
    519a:	80 81       	ld	r24, Z
    519c:	81 60       	ori	r24, 0x01	; 1
    519e:	80 83       	st	Z, r24
    51a0:	80 81       	ld	r24, Z
						UDIEN  |= (1 << EORSTE);
    51a2:	88 60       	ori	r24, 0x08	; 8
    51a4:	80 83       	st	Z, r24
    51a6:	f8 01       	movw	r30, r16
				UDCON  &= ~(1 << DETACH);
    51a8:	80 81       	ld	r24, Z
    51aa:	8e 7f       	andi	r24, 0xFE	; 254
    51ac:	80 83       	st	Z, r24
    51ae:	88 81       	ld	r24, Y
				USBCON |=  (1 << OTGPADE);
    51b0:	80 61       	ori	r24, 0x10	; 16
    51b2:	88 83       	st	Y, r24
    51b4:	df 91       	pop	r29
}
    51b6:	cf 91       	pop	r28
    51b8:	1f 91       	pop	r17
    51ba:	0f 91       	pop	r16
    51bc:	08 95       	ret

000051be <USB_Init>:
    51be:	e8 ed       	ldi	r30, 0xD8	; 216
				USBCON &= ~(1 << OTGPADE);
    51c0:	f0 e0       	ldi	r31, 0x00	; 0
    51c2:	80 81       	ld	r24, Z
    51c4:	8f 7e       	andi	r24, 0xEF	; 239
    51c6:	80 83       	st	Z, r24
				UHWCON |=  (1 << UVREGE);
    51c8:	e7 ed       	ldi	r30, 0xD7	; 215
    51ca:	f0 e0       	ldi	r31, 0x00	; 0
    51cc:	80 81       	ld	r24, Z
    51ce:	81 60       	ori	r24, 0x01	; 1
    51d0:	80 83       	st	Z, r24
		PLLFRQ = (1 << PDIV2);
    51d2:	84 e0       	ldi	r24, 0x04	; 4
    51d4:	82 bf       	out	0x32, r24	; 50
	USB_IsInitialized = true;
    51d6:	81 e0       	ldi	r24, 0x01	; 1
    51d8:	80 93 68 09 	sts	0x0968, r24	; 0x800968 <USB_IsInitialized>
	USB_ResetInterface();
    51dc:	b0 cf       	rjmp	.-160    	; 0x513e <USB_ResetInterface>

000051de <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    51de:	e8 ed       	ldi	r30, 0xD8	; 216
    51e0:	f0 e0       	ldi	r31, 0x00	; 0
    51e2:	80 81       	ld	r24, Z
    51e4:	8e 7f       	andi	r24, 0xFE	; 254
    51e6:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    51e8:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
	#endif
}
    51ec:	08 95       	ret

000051ee <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    51ee:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    51f2:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	#endif
}
    51f6:	08 95       	ret

000051f8 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
    51f8:	1f 92       	push	r1
    51fa:	0f 92       	push	r0
    51fc:	0f b6       	in	r0, 0x3f	; 63
    51fe:	0f 92       	push	r0
    5200:	11 24       	eor	r1, r1
    5202:	2f 93       	push	r18
    5204:	3f 93       	push	r19
    5206:	4f 93       	push	r20
    5208:	5f 93       	push	r21
    520a:	6f 93       	push	r22
    520c:	7f 93       	push	r23
    520e:	8f 93       	push	r24
    5210:	9f 93       	push	r25
    5212:	af 93       	push	r26
    5214:	bf 93       	push	r27
    5216:	ef 93       	push	r30
    5218:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    521a:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    521e:	82 ff       	sbrs	r24, 2
    5220:	0a c0       	rjmp	.+20     	; 0x5236 <__vector_10+0x3e>
						return (UDIEN  & (1 << SOFE));
    5222:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    5226:	82 ff       	sbrs	r24, 2
    5228:	06 c0       	rjmp	.+12     	; 0x5236 <__vector_10+0x3e>
						UDINT  &= ~(1 << SOFI);
    522a:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    522e:	8b 7f       	andi	r24, 0xFB	; 251
    5230:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    5234:	25 dd       	rcall	.-1462   	; 0x4c80 <EVENT_USB_Device_StartOfFrame>
						return (USBINT & (1 << VBUSTI));
    5236:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    523a:	80 ff       	sbrs	r24, 0
    523c:	17 c0       	rjmp	.+46     	; 0x526c <__vector_10+0x74>
						return (USBCON & (1 << VBUSTE));
    523e:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    5242:	80 ff       	sbrs	r24, 0
    5244:	13 c0       	rjmp	.+38     	; 0x526c <__vector_10+0x74>
						USBINT &= ~(1 << VBUSTI);
    5246:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
    524a:	8e 7f       	andi	r24, 0xFE	; 254
    524c:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    5250:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    5254:	19 bc       	out	0x29, r1	; 41
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    5256:	80 ff       	sbrs	r24, 0
    5258:	8c c0       	rjmp	.+280    	; 0x5372 <__vector_10+0x17a>
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    525a:	82 e0       	ldi	r24, 0x02	; 2
    525c:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    525e:	09 b4       	in	r0, 0x29	; 41
    5260:	00 fe       	sbrs	r0, 0
    5262:	fd cf       	rjmp	.-6      	; 0x525e <__vector_10+0x66>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    5264:	81 e0       	ldi	r24, 0x01	; 1
    5266:	80 93 69 09 	sts	0x0969, r24	; 0x800969 <USB_DeviceState>
			EVENT_USB_Device_Connect();
    526a:	b7 dc       	rcall	.-1682   	; 0x4bda <EVENT_USB_Device_Connect>
						return (UDINT  & (1 << SUSPI));
    526c:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    5270:	80 ff       	sbrs	r24, 0
    5272:	18 c0       	rjmp	.+48     	; 0x52a4 <__vector_10+0xac>
						return (UDIEN  & (1 << SUSPE));
    5274:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    5278:	80 ff       	sbrs	r24, 0
    527a:	14 c0       	rjmp	.+40     	; 0x52a4 <__vector_10+0xac>
						UDIEN  &= ~(1 << SUSPE);
    527c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    5280:	8e 7f       	andi	r24, 0xFE	; 254
    5282:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						UDIEN  |= (1 << WAKEUPE);
    5286:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    528a:	80 61       	ori	r24, 0x10	; 16
    528c:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    5290:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    5294:	80 62       	ori	r24, 0x20	; 32
    5296:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
				PLLCSR = 0;
    529a:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    529c:	85 e0       	ldi	r24, 0x05	; 5
    529e:	80 93 69 09 	sts	0x0969, r24	; 0x800969 <USB_DeviceState>
		EVENT_USB_Device_Suspend();
    52a2:	09 d2       	rcall	.+1042   	; 0x56b6 <USB_Event_Stub>
						return (UDINT  & (1 << WAKEUPI));
    52a4:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    52a8:	84 ff       	sbrs	r24, 4
    52aa:	27 c0       	rjmp	.+78     	; 0x52fa <__vector_10+0x102>
						return (UDIEN  & (1 << WAKEUPE));
    52ac:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    52b0:	84 ff       	sbrs	r24, 4
    52b2:	23 c0       	rjmp	.+70     	; 0x52fa <__vector_10+0x102>
				PLLCSR = USB_PLL_PSC;
    52b4:	19 bc       	out	0x29, r1	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    52b6:	82 e0       	ldi	r24, 0x02	; 2
    52b8:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    52ba:	09 b4       	in	r0, 0x29	; 41
    52bc:	00 fe       	sbrs	r0, 0
    52be:	fd cf       	rjmp	.-6      	; 0x52ba <__vector_10+0xc2>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    52c0:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    52c4:	8f 7d       	andi	r24, 0xDF	; 223
    52c6:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
						UDINT  &= ~(1 << WAKEUPI);
    52ca:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    52ce:	8f 7e       	andi	r24, 0xEF	; 239
    52d0:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
						UDIEN  &= ~(1 << WAKEUPE);
    52d4:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    52d8:	8f 7e       	andi	r24, 0xEF	; 239
    52da:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						UDIEN  |= (1 << SUSPE);
    52de:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    52e2:	81 60       	ori	r24, 0x01	; 1
    52e4:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    52e8:	80 91 65 09 	lds	r24, 0x0965	; 0x800965 <USB_Device_ConfigurationNumber>
    52ec:	88 23       	and	r24, r24
    52ee:	09 f4       	brne	.+2      	; 0x52f2 <__vector_10+0xfa>
    52f0:	44 c0       	rjmp	.+136    	; 0x537a <__vector_10+0x182>
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    52f2:	84 e0       	ldi	r24, 0x04	; 4
    52f4:	80 93 69 09 	sts	0x0969, r24	; 0x800969 <USB_DeviceState>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    52f8:	de d1       	rcall	.+956    	; 0x56b6 <USB_Event_Stub>
						return (UDINT  & (1 << EORSTI));
    52fa:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    52fe:	83 ff       	sbrs	r24, 3
    5300:	27 c0       	rjmp	.+78     	; 0x5350 <__vector_10+0x158>
						return (UDIEN  & (1 << EORSTE));
    5302:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    5306:	83 ff       	sbrs	r24, 3
    5308:	23 c0       	rjmp	.+70     	; 0x5350 <__vector_10+0x158>
						UDINT  &= ~(1 << EORSTI);
    530a:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    530e:	87 7f       	andi	r24, 0xF7	; 247
    5310:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    5314:	82 e0       	ldi	r24, 0x02	; 2
    5316:	80 93 69 09 	sts	0x0969, r24	; 0x800969 <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
    531a:	10 92 65 09 	sts	0x0965, r1	; 0x800965 <USB_Device_ConfigurationNumber>
						UDINT  &= ~(1 << SUSPI);
    531e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    5322:	8e 7f       	andi	r24, 0xFE	; 254
    5324:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
						UDIEN  &= ~(1 << SUSPE);
    5328:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    532c:	8e 7f       	andi	r24, 0xFE	; 254
    532e:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						UDIEN  |= (1 << WAKEUPE);
    5332:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    5336:	80 61       	ori	r24, 0x10	; 16
    5338:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    533c:	42 e0       	ldi	r20, 0x02	; 2
    533e:	60 e0       	ldi	r22, 0x00	; 0
    5340:	80 e0       	ldi	r24, 0x00	; 0
    5342:	3f de       	rcall	.-898    	; 0x4fc2 <Endpoint_ConfigureEndpoint_Prv>
						UEIENX |= (1 << RXSTPE);
    5344:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    5348:	88 60       	ori	r24, 0x08	; 8
    534a:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    534e:	b3 d1       	rcall	.+870    	; 0x56b6 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    5350:	ff 91       	pop	r31
    5352:	ef 91       	pop	r30
    5354:	bf 91       	pop	r27
    5356:	af 91       	pop	r26
    5358:	9f 91       	pop	r25
    535a:	8f 91       	pop	r24
    535c:	7f 91       	pop	r23
    535e:	6f 91       	pop	r22
    5360:	5f 91       	pop	r21
    5362:	4f 91       	pop	r20
    5364:	3f 91       	pop	r19
    5366:	2f 91       	pop	r18
    5368:	0f 90       	pop	r0
    536a:	0f be       	out	0x3f, r0	; 63
    536c:	0f 90       	pop	r0
    536e:	1f 90       	pop	r1
			USB_DeviceState = DEVICE_STATE_Unattached;
    5370:	18 95       	reti
    5372:	10 92 69 09 	sts	0x0969, r1	; 0x800969 <USB_DeviceState>
			EVENT_USB_Device_Disconnect();
    5376:	32 dc       	rcall	.-1948   	; 0x4bdc <EVENT_USB_Device_Disconnect>
    5378:	79 cf       	rjmp	.-270    	; 0x526c <__vector_10+0x74>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    537a:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    537e:	87 fd       	sbrc	r24, 7
    5380:	02 c0       	rjmp	.+4      	; 0x5386 <__vector_10+0x18e>
    5382:	81 e0       	ldi	r24, 0x01	; 1
    5384:	b7 cf       	rjmp	.-146    	; 0x52f4 <__vector_10+0xfc>
    5386:	83 e0       	ldi	r24, 0x03	; 3
    5388:	b5 cf       	rjmp	.-150    	; 0x52f4 <__vector_10+0xfc>

0000538a <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    538a:	1f 92       	push	r1
    538c:	0f 92       	push	r0
    538e:	0f b6       	in	r0, 0x3f	; 63
    5390:	0f 92       	push	r0
    5392:	11 24       	eor	r1, r1
    5394:	2f 93       	push	r18
    5396:	3f 93       	push	r19
    5398:	4f 93       	push	r20
    539a:	5f 93       	push	r21
    539c:	6f 93       	push	r22
    539e:	7f 93       	push	r23
    53a0:	8f 93       	push	r24
    53a2:	9f 93       	push	r25
    53a4:	af 93       	push	r26
    53a6:	bf 93       	push	r27
    53a8:	cf 93       	push	r28
    53aa:	ef 93       	push	r30
    53ac:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    53ae:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    53b2:	cf 70       	andi	r28, 0x0F	; 15
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    53b4:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    53b8:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
						UEIENX &= ~(1 << RXSTPE);
    53bc:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    53c0:	87 7f       	andi	r24, 0xF7	; 247
    53c2:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    53c6:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    53c8:	1b d0       	rcall	.+54     	; 0x5400 <USB_Device_ProcessControlRequest>
    53ca:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
						UEIENX |= (1 << RXSTPE);
    53ce:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    53d2:	88 60       	ori	r24, 0x08	; 8
    53d4:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    53d8:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    53dc:	ff 91       	pop	r31
    53de:	ef 91       	pop	r30
    53e0:	cf 91       	pop	r28
    53e2:	bf 91       	pop	r27
    53e4:	af 91       	pop	r26
    53e6:	9f 91       	pop	r25
    53e8:	8f 91       	pop	r24
    53ea:	7f 91       	pop	r23
    53ec:	6f 91       	pop	r22
    53ee:	5f 91       	pop	r21
    53f0:	4f 91       	pop	r20
    53f2:	3f 91       	pop	r19
    53f4:	2f 91       	pop	r18
    53f6:	0f 90       	pop	r0
    53f8:	0f be       	out	0x3f, r0	; 63
    53fa:	0f 90       	pop	r0
    53fc:	1f 90       	pop	r1
    53fe:	18 95       	reti

00005400 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    5400:	1f 93       	push	r17
    5402:	cf 93       	push	r28
    5404:	df 93       	push	r29
    5406:	cd b7       	in	r28, 0x3d	; 61
    5408:	de b7       	in	r29, 0x3e	; 62
    540a:	aa 97       	sbiw	r28, 0x2a	; 42
    540c:	0f b6       	in	r0, 0x3f	; 63
    540e:	f8 94       	cli
    5410:	de bf       	out	0x3e, r29	; 62
    5412:	0f be       	out	0x3f, r0	; 63
    5414:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
    5416:	8a e6       	ldi	r24, 0x6A	; 106
    5418:	99 e0       	ldi	r25, 0x09	; 9
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    541a:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    541e:	fc 01       	movw	r30, r24
    5420:	21 93       	st	Z+, r18
    5422:	cf 01       	movw	r24, r30
	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    5424:	f9 e0       	ldi	r31, 0x09	; 9
    5426:	82 37       	cpi	r24, 0x72	; 114
    5428:	9f 07       	cpc	r25, r31
    542a:	b9 f7       	brne	.-18     	; 0x541a <USB_Device_ProcessControlRequest+0x1a>
	#endif

	EVENT_USB_Device_ControlRequest();
    542c:	e5 db       	rcall	.-2102   	; 0x4bf8 <EVENT_USB_Device_ControlRequest>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    542e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsSETUPReceived())
    5432:	83 ff       	sbrs	r24, 3
    5434:	11 c0       	rjmp	.+34     	; 0x5458 <USB_Device_ProcessControlRequest+0x58>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    5436:	90 91 6a 09 	lds	r25, 0x096A	; 0x80096a <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
    543a:	80 91 6b 09 	lds	r24, 0x096B	; 0x80096b <USB_ControlRequest+0x1>
    543e:	85 30       	cpi	r24, 0x05	; 5
    5440:	09 f4       	brne	.+2      	; 0x5444 <USB_Device_ProcessControlRequest+0x44>
    5442:	c3 c0       	rjmp	.+390    	; 0x55ca <USB_Device_ProcessControlRequest+0x1ca>
    5444:	08 f5       	brcc	.+66     	; 0x5488 <USB_Device_ProcessControlRequest+0x88>
    5446:	81 30       	cpi	r24, 0x01	; 1
    5448:	09 f4       	brne	.+2      	; 0x544c <USB_Device_ProcessControlRequest+0x4c>
    544a:	8c c0       	rjmp	.+280    	; 0x5564 <USB_Device_ProcessControlRequest+0x164>
    544c:	88 23       	and	r24, r24
    544e:	09 f4       	brne	.+2      	; 0x5452 <USB_Device_ProcessControlRequest+0x52>
    5450:	61 c0       	rjmp	.+194    	; 0x5514 <USB_Device_ProcessControlRequest+0x114>
    5452:	83 30       	cpi	r24, 0x03	; 3
    5454:	09 f4       	brne	.+2      	; 0x5458 <USB_Device_ProcessControlRequest+0x58>
    5456:	86 c0       	rjmp	.+268    	; 0x5564 <USB_Device_ProcessControlRequest+0x164>
    5458:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    545c:	83 ff       	sbrs	r24, 3
    545e:	0a c0       	rjmp	.+20     	; 0x5474 <USB_Device_ProcessControlRequest+0x74>
				UEINTX &= ~(1 << RXSTPI);
    5460:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    5464:	87 7f       	andi	r24, 0xF7	; 247
    5466:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				UECONX |= (1 << STALLRQ);
    546a:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    546e:	80 62       	ori	r24, 0x20	; 32
    5470:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    5474:	aa 96       	adiw	r28, 0x2a	; 42
    5476:	0f b6       	in	r0, 0x3f	; 63
    5478:	f8 94       	cli
    547a:	de bf       	out	0x3e, r29	; 62
    547c:	0f be       	out	0x3f, r0	; 63
    547e:	cd bf       	out	0x3d, r28	; 61
    5480:	df 91       	pop	r29
    5482:	cf 91       	pop	r28
    5484:	1f 91       	pop	r17
    5486:	08 95       	ret
    5488:	88 30       	cpi	r24, 0x08	; 8
    548a:	09 f4       	brne	.+2      	; 0x548e <USB_Device_ProcessControlRequest+0x8e>
    548c:	d5 c0       	rjmp	.+426    	; 0x5638 <USB_Device_ProcessControlRequest+0x238>
    548e:	89 30       	cpi	r24, 0x09	; 9
    5490:	09 f4       	brne	.+2      	; 0x5494 <USB_Device_ProcessControlRequest+0x94>
    5492:	df c0       	rjmp	.+446    	; 0x5652 <USB_Device_ProcessControlRequest+0x252>
    5494:	86 30       	cpi	r24, 0x06	; 6
    5496:	01 f7       	brne	.-64     	; 0x5458 <USB_Device_ProcessControlRequest+0x58>
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    5498:	90 58       	subi	r25, 0x80	; 128
    549a:	92 30       	cpi	r25, 0x02	; 2
    549c:	e8 f6       	brcc	.-70     	; 0x5458 <USB_Device_ProcessControlRequest+0x58>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    549e:	80 91 6c 09 	lds	r24, 0x096C	; 0x80096c <USB_ControlRequest+0x2>
    54a2:	90 91 6d 09 	lds	r25, 0x096D	; 0x80096d <USB_ControlRequest+0x3>
    54a6:	8c 3d       	cpi	r24, 0xDC	; 220
    54a8:	23 e0       	ldi	r18, 0x03	; 3
    54aa:	92 07       	cpc	r25, r18
    54ac:	09 f0       	breq	.+2      	; 0x54b0 <USB_Device_ProcessControlRequest+0xb0>
    54ae:	af c0       	rjmp	.+350    	; 0x560e <USB_Device_ProcessControlRequest+0x20e>
	SignatureDescriptor.Header.Type = DTYPE_String;
    54b0:	83 e0       	ldi	r24, 0x03	; 3
    54b2:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    54b4:	8a e2       	ldi	r24, 0x2A	; 42
    54b6:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    54b8:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    54ba:	f8 94       	cli
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    54bc:	de 01       	movw	r26, r28
    54be:	13 96       	adiw	r26, 0x03	; 3
    54c0:	20 e0       	ldi	r18, 0x00	; 0
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    54c2:	3e e0       	ldi	r19, 0x0E	; 14
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    54c4:	51 e2       	ldi	r21, 0x21	; 33
    54c6:	e3 2f       	mov	r30, r19
    54c8:	f0 e0       	ldi	r31, 0x00	; 0
    54ca:	50 93 57 00 	sts	0x0057, r21	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    54ce:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
    54d0:	20 ff       	sbrs	r18, 0
    54d2:	03 c0       	rjmp	.+6      	; 0x54da <USB_Device_ProcessControlRequest+0xda>
					{
						SerialByte >>= 4;
    54d4:	e2 95       	swap	r30
    54d6:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    54d8:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    54da:	ef 70       	andi	r30, 0x0F	; 15

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    54dc:	8e 2f       	mov	r24, r30
    54de:	90 e0       	ldi	r25, 0x00	; 0
    54e0:	ea 30       	cpi	r30, 0x0A	; 10
    54e2:	08 f4       	brcc	.+2      	; 0x54e6 <USB_Device_ProcessControlRequest+0xe6>
    54e4:	92 c0       	rjmp	.+292    	; 0x560a <USB_Device_ProcessControlRequest+0x20a>
    54e6:	c7 96       	adiw	r24, 0x37	; 55
    54e8:	8d 93       	st	X+, r24
    54ea:	9d 93       	st	X+, r25
				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    54ec:	2f 5f       	subi	r18, 0xFF	; 255
    54ee:	24 31       	cpi	r18, 0x14	; 20
    54f0:	51 f7       	brne	.-44     	; 0x54c6 <USB_Device_ProcessControlRequest+0xc6>
				SREG = GlobalIntState;
    54f2:	4f bf       	out	0x3f, r20	; 63
				UEINTX &= ~(1 << RXSTPI);
    54f4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    54f8:	87 7f       	andi	r24, 0xF7	; 247
    54fa:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    54fe:	6a e2       	ldi	r22, 0x2A	; 42
    5500:	70 e0       	ldi	r23, 0x00	; 0
    5502:	ce 01       	movw	r24, r28
    5504:	01 96       	adiw	r24, 0x01	; 1
    5506:	66 dc       	rcall	.-1844   	; 0x4dd4 <Endpoint_Write_Control_Stream_LE>
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    5508:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    550c:	8b 77       	andi	r24, 0x7B	; 123
    550e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    5512:	a2 cf       	rjmp	.-188    	; 0x5458 <USB_Device_ProcessControlRequest+0x58>
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    5514:	90 38       	cpi	r25, 0x80	; 128
    5516:	99 f0       	breq	.+38     	; 0x553e <USB_Device_ProcessControlRequest+0x13e>
    5518:	92 38       	cpi	r25, 0x82	; 130
    551a:	09 f0       	breq	.+2      	; 0x551e <USB_Device_ProcessControlRequest+0x11e>
    551c:	9d cf       	rjmp	.-198    	; 0x5458 <USB_Device_ProcessControlRequest+0x58>
			break;
		}
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
		{
			#if !defined(CONTROL_ONLY_DEVICE)
			uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    551e:	80 91 6e 09 	lds	r24, 0x096E	; 0x80096e <USB_ControlRequest+0x4>
    5522:	8f 70       	andi	r24, 0x0F	; 15

			if (EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
    5524:	87 30       	cpi	r24, 0x07	; 7
    5526:	08 f0       	brcs	.+2      	; 0x552a <USB_Device_ProcessControlRequest+0x12a>
    5528:	97 cf       	rjmp	.-210    	; 0x5458 <USB_Device_ProcessControlRequest+0x58>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    552a:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    552e:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    5532:	85 fb       	bst	r24, 5
    5534:	88 27       	eor	r24, r24
    5536:	80 f9       	bld	r24, 0
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    5538:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    553c:	06 c0       	rjmp	.+12     	; 0x554a <USB_Device_ProcessControlRequest+0x14a>
	uint8_t CurrentStatus = 0;
    553e:	80 91 66 09 	lds	r24, 0x0966	; 0x800966 <USB_Device_CurrentlySelfPowered>
			if (USB_Device_RemoteWakeupEnabled)
    5542:	90 91 67 09 	lds	r25, 0x0967	; 0x800967 <USB_Device_RemoteWakeupEnabled>
    5546:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    5548:	82 60       	ori	r24, 0x02	; 2
				UEINTX &= ~(1 << RXSTPI);
    554a:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    554e:	97 7f       	andi	r25, 0xF7	; 247
    5550:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    5554:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
    5558:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    555c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    5560:	8e 77       	andi	r24, 0x7E	; 126
    5562:	a5 c0       	rjmp	.+330    	; 0x56ae <USB_Device_ProcessControlRequest+0x2ae>
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    5564:	99 23       	and	r25, r25
    5566:	09 f4       	brne	.+2      	; 0x556a <USB_Device_ProcessControlRequest+0x16a>
    5568:	92 c0       	rjmp	.+292    	; 0x568e <USB_Device_ProcessControlRequest+0x28e>
    556a:	92 30       	cpi	r25, 0x02	; 2
    556c:	09 f0       	breq	.+2      	; 0x5570 <USB_Device_ProcessControlRequest+0x170>
    556e:	74 cf       	rjmp	.-280    	; 0x5458 <USB_Device_ProcessControlRequest+0x58>
		}
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    5570:	90 91 6c 09 	lds	r25, 0x096C	; 0x80096c <USB_ControlRequest+0x2>
    5574:	91 11       	cpse	r25, r1
    5576:	96 c0       	rjmp	.+300    	; 0x56a4 <USB_Device_ProcessControlRequest+0x2a4>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    5578:	90 91 6e 09 	lds	r25, 0x096E	; 0x80096e <USB_ControlRequest+0x4>
    557c:	9f 70       	andi	r25, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP || EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
    557e:	2f ef       	ldi	r18, 0xFF	; 255
    5580:	29 0f       	add	r18, r25
    5582:	26 30       	cpi	r18, 0x06	; 6
    5584:	08 f0       	brcs	.+2      	; 0x5588 <USB_Device_ProcessControlRequest+0x188>
    5586:	68 cf       	rjmp	.-304    	; 0x5458 <USB_Device_ProcessControlRequest+0x58>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    5588:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UECONX & (1 << EPEN)) ? true : false);
    558c:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    5590:	20 ff       	sbrs	r18, 0
    5592:	88 c0       	rjmp	.+272    	; 0x56a4 <USB_Device_ProcessControlRequest+0x2a4>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    5594:	83 30       	cpi	r24, 0x03	; 3
    5596:	31 f4       	brne	.+12     	; 0x55a4 <USB_Device_ProcessControlRequest+0x1a4>
				UECONX |= (1 << STALLRQ);
    5598:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    559c:	80 62       	ori	r24, 0x20	; 32
				UECONX |= (1 << RSTDT);
    559e:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    55a2:	80 c0       	rjmp	.+256    	; 0x56a4 <USB_Device_ProcessControlRequest+0x2a4>
				UECONX |= (1 << STALLRQC);
    55a4:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    55a8:	80 61       	ori	r24, 0x10	; 16
    55aa:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    55ae:	21 e0       	ldi	r18, 0x01	; 1
    55b0:	30 e0       	ldi	r19, 0x00	; 0
    55b2:	01 c0       	rjmp	.+2      	; 0x55b6 <USB_Device_ProcessControlRequest+0x1b6>
    55b4:	22 0f       	add	r18, r18
    55b6:	9a 95       	dec	r25
    55b8:	ea f7       	brpl	.-6      	; 0x55b4 <USB_Device_ProcessControlRequest+0x1b4>
    55ba:	20 93 ea 00 	sts	0x00EA, r18	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = 0;
    55be:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UECONX |= (1 << RSTDT);
    55c2:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    55c6:	88 60       	ori	r24, 0x08	; 8
    55c8:	ea cf       	rjmp	.-44     	; 0x559e <USB_Device_ProcessControlRequest+0x19e>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    55ca:	91 11       	cpse	r25, r1
    55cc:	45 cf       	rjmp	.-374    	; 0x5458 <USB_Device_ProcessControlRequest+0x58>
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    55ce:	10 91 6c 09 	lds	r17, 0x096C	; 0x80096c <USB_ControlRequest+0x2>
    55d2:	1f 77       	andi	r17, 0x7F	; 127
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    55d4:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    55d8:	80 78       	andi	r24, 0x80	; 128
    55da:	81 2b       	or	r24, r17
    55dc:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
				UEINTX &= ~(1 << RXSTPI);
    55e0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    55e4:	87 7f       	andi	r24, 0xF7	; 247
    55e6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_ClearStatusStage();
    55ea:	5b dd       	rcall	.-1354   	; 0x50a2 <Endpoint_ClearStatusStage>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    55ec:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	while (!(Endpoint_IsINReady()));
    55f0:	80 ff       	sbrs	r24, 0
    55f2:	fc cf       	rjmp	.-8      	; 0x55ec <USB_Device_ProcessControlRequest+0x1ec>
				UDADDR |= (1 << ADDEN);
    55f4:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    55f8:	80 68       	ori	r24, 0x80	; 128
    55fa:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    55fe:	82 e0       	ldi	r24, 0x02	; 2
    5600:	11 11       	cpse	r17, r1
    5602:	83 e0       	ldi	r24, 0x03	; 3
    5604:	80 93 69 09 	sts	0x0969, r24	; 0x800969 <USB_DeviceState>
    5608:	27 cf       	rjmp	.-434    	; 0x5458 <USB_Device_ProcessControlRequest+0x58>
					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    560a:	c0 96       	adiw	r24, 0x30	; 48
    560c:	6d cf       	rjmp	.-294    	; 0x54e8 <USB_Device_ProcessControlRequest+0xe8>
	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    560e:	60 91 6e 09 	lds	r22, 0x096E	; 0x80096e <USB_ControlRequest+0x4>
    5612:	70 91 6f 09 	lds	r23, 0x096F	; 0x80096f <USB_ControlRequest+0x5>
    5616:	ae 01       	movw	r20, r28
    5618:	4f 5f       	subi	r20, 0xFF	; 255
    561a:	5f 4f       	sbci	r21, 0xFF	; 255
    561c:	4c db       	rcall	.-2408   	; 0x4cb6 <CALLBACK_USB_GetDescriptor>
    561e:	bc 01       	movw	r22, r24
    5620:	89 2b       	or	r24, r25
    5622:	09 f4       	brne	.+2      	; 0x5626 <USB_Device_ProcessControlRequest+0x226>
    5624:	19 cf       	rjmp	.-462    	; 0x5458 <USB_Device_ProcessControlRequest+0x58>
				UEINTX &= ~(1 << RXSTPI);
    5626:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    562a:	97 7f       	andi	r25, 0xF7	; 247
    562c:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    5630:	89 81       	ldd	r24, Y+1	; 0x01
    5632:	9a 81       	ldd	r25, Y+2	; 0x02
    5634:	67 dc       	rcall	.-1842   	; 0x4f04 <Endpoint_Write_Control_PStream_LE>
    5636:	68 cf       	rjmp	.-304    	; 0x5508 <USB_Device_ProcessControlRequest+0x108>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    5638:	90 38       	cpi	r25, 0x80	; 128
    563a:	09 f0       	breq	.+2      	; 0x563e <USB_Device_ProcessControlRequest+0x23e>
    563c:	0d cf       	rjmp	.-486    	; 0x5458 <USB_Device_ProcessControlRequest+0x58>
    563e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    5642:	87 7f       	andi	r24, 0xF7	; 247
    5644:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    5648:	80 91 65 09 	lds	r24, 0x0965	; 0x800965 <USB_Device_ConfigurationNumber>
				UEDATX = Data;
    564c:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    5650:	85 cf       	rjmp	.-246    	; 0x555c <USB_Device_ProcessControlRequest+0x15c>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    5652:	91 11       	cpse	r25, r1
    5654:	01 cf       	rjmp	.-510    	; 0x5458 <USB_Device_ProcessControlRequest+0x58>
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    5656:	90 91 6c 09 	lds	r25, 0x096C	; 0x80096c <USB_ControlRequest+0x2>
    565a:	92 30       	cpi	r25, 0x02	; 2
    565c:	08 f0       	brcs	.+2      	; 0x5660 <USB_Device_ProcessControlRequest+0x260>
    565e:	fc ce       	rjmp	.-520    	; 0x5458 <USB_Device_ProcessControlRequest+0x58>
				UEINTX &= ~(1 << RXSTPI);
    5660:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    5664:	87 7f       	andi	r24, 0xF7	; 247
    5666:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    566a:	90 93 65 09 	sts	0x0965, r25	; 0x800965 <USB_Device_ConfigurationNumber>
	Endpoint_ClearStatusStage();
    566e:	19 dd       	rcall	.-1486   	; 0x50a2 <Endpoint_ClearStatusStage>
	if (USB_Device_ConfigurationNumber)
    5670:	80 91 65 09 	lds	r24, 0x0965	; 0x800965 <USB_Device_ConfigurationNumber>
    5674:	88 23       	and	r24, r24
    5676:	11 f0       	breq	.+4      	; 0x567c <USB_Device_ProcessControlRequest+0x27c>
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    5678:	84 e0       	ldi	r24, 0x04	; 4
    567a:	05 c0       	rjmp	.+10     	; 0x5686 <USB_Device_ProcessControlRequest+0x286>
				return (UDADDR & (1 << ADDEN));
    567c:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    5680:	87 fd       	sbrc	r24, 7
    5682:	fa cf       	rjmp	.-12     	; 0x5678 <USB_Device_ProcessControlRequest+0x278>
    5684:	81 e0       	ldi	r24, 0x01	; 1
    5686:	80 93 69 09 	sts	0x0969, r24	; 0x800969 <USB_DeviceState>
	EVENT_USB_Device_ConfigurationChanged();
    568a:	a9 da       	rcall	.-2734   	; 0x4bde <EVENT_USB_Device_ConfigurationChanged>
    568c:	e5 ce       	rjmp	.-566    	; 0x5458 <USB_Device_ProcessControlRequest+0x58>
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    568e:	90 91 6c 09 	lds	r25, 0x096C	; 0x80096c <USB_ControlRequest+0x2>
    5692:	91 30       	cpi	r25, 0x01	; 1
    5694:	09 f0       	breq	.+2      	; 0x5698 <USB_Device_ProcessControlRequest+0x298>
    5696:	e0 ce       	rjmp	.-576    	; 0x5458 <USB_Device_ProcessControlRequest+0x58>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    5698:	91 e0       	ldi	r25, 0x01	; 1
    569a:	83 30       	cpi	r24, 0x03	; 3
    569c:	09 f0       	breq	.+2      	; 0x56a0 <USB_Device_ProcessControlRequest+0x2a0>
    569e:	90 e0       	ldi	r25, 0x00	; 0
    56a0:	90 93 67 09 	sts	0x0967, r25	; 0x800967 <USB_Device_RemoteWakeupEnabled>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    56a4:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				UEINTX &= ~(1 << RXSTPI);
    56a8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    56ac:	87 7f       	andi	r24, 0xF7	; 247
    56ae:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    56b2:	f7 dc       	rcall	.-1554   	; 0x50a2 <Endpoint_ClearStatusStage>
    56b4:	d1 ce       	rjmp	.-606    	; 0x5458 <USB_Device_ProcessControlRequest+0x58>

000056b6 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    56b6:	08 95       	ret

000056b8 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    56b8:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    56ba:	80 91 69 09 	lds	r24, 0x0969	; 0x800969 <USB_DeviceState>
    56be:	88 23       	and	r24, r24
    56c0:	91 f0       	breq	.+36     	; 0x56e6 <USB_USBTask+0x2e>
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    56c2:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    56c6:	cf 70       	andi	r28, 0x0F	; 15
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    56c8:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    56cc:	80 fd       	sbrc	r24, 0
    56ce:	0d c0       	rjmp	.+26     	; 0x56ea <USB_USBTask+0x32>
    56d0:	80 e0       	ldi	r24, 0x00	; 0
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    56d2:	c8 2b       	or	r28, r24
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    56d4:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    56d8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    56dc:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
    56de:	90 de       	rcall	.-736    	; 0x5400 <USB_Device_ProcessControlRequest>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    56e0:	cf 70       	andi	r28, 0x0F	; 15
    56e2:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
}
    56e6:	cf 91       	pop	r28
    56e8:	08 95       	ret
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    56ea:	80 e8       	ldi	r24, 0x80	; 128
    56ec:	f2 cf       	rjmp	.-28     	; 0x56d2 <USB_USBTask+0x1a>

000056ee <CDC_Device_ConfigureEndpoints>:
			break;
	}
}

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    56ee:	cf 93       	push	r28
    56f0:	df 93       	push	r29
    56f2:	ec 01       	movw	r28, r24
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
    56f4:	fc 01       	movw	r30, r24
    56f6:	70 96       	adiw	r30, 0x10	; 16
    56f8:	8b e0       	ldi	r24, 0x0B	; 11
    56fa:	df 01       	movw	r26, r30
    56fc:	1d 92       	st	X+, r1
    56fe:	8a 95       	dec	r24
    5700:	e9 f7       	brne	.-6      	; 0x56fc <CDC_Device_ConfigureEndpoints+0xe>

	CDCInterfaceInfo->Config.DataINEndpoint.Type       = EP_TYPE_BULK;
    5702:	82 e0       	ldi	r24, 0x02	; 2
    5704:	8c 83       	std	Y+4, r24	; 0x04
	CDCInterfaceInfo->Config.DataOUTEndpoint.Type      = EP_TYPE_BULK;
    5706:	89 87       	std	Y+9, r24	; 0x09
	CDCInterfaceInfo->Config.NotificationEndpoint.Type = EP_TYPE_INTERRUPT;
    5708:	83 e0       	ldi	r24, 0x03	; 3
    570a:	8e 87       	std	Y+14, r24	; 0x0e

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
    570c:	61 e0       	ldi	r22, 0x01	; 1
    570e:	ce 01       	movw	r24, r28
    5710:	01 96       	adiw	r24, 0x01	; 1
    5712:	8b dc       	rcall	.-1770   	; 0x502a <Endpoint_ConfigureEndpointTable>
    5714:	88 23       	and	r24, r24
    5716:	61 f0       	breq	.+24     	; 0x5730 <CDC_Device_ConfigureEndpoints+0x42>
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
    5718:	61 e0       	ldi	r22, 0x01	; 1
    571a:	ce 01       	movw	r24, r28
    571c:	06 96       	adiw	r24, 0x06	; 6
    571e:	85 dc       	rcall	.-1782   	; 0x502a <Endpoint_ConfigureEndpointTable>
    5720:	88 23       	and	r24, r24
    5722:	31 f0       	breq	.+12     	; 0x5730 <CDC_Device_ConfigureEndpoints+0x42>
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
    5724:	61 e0       	ldi	r22, 0x01	; 1
    5726:	ce 01       	movw	r24, r28
    5728:	0b 96       	adiw	r24, 0x0b	; 11
	  return false;

	return true;
}
    572a:	df 91       	pop	r29
	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
    572c:	cf 91       	pop	r28
    572e:	7d cc       	rjmp	.-1798   	; 0x502a <Endpoint_ConfigureEndpointTable>
}
    5730:	80 e0       	ldi	r24, 0x00	; 0
    5732:	df 91       	pop	r29
    5734:	cf 91       	pop	r28
    5736:	08 95       	ret

00005738 <CDC_Device_SendByte>:
	}
#endif

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
    5738:	cf 93       	push	r28
    573a:	c6 2f       	mov	r28, r22
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    573c:	20 91 69 09 	lds	r18, 0x0969	; 0x800969 <USB_DeviceState>
    5740:	24 30       	cpi	r18, 0x04	; 4
    5742:	f9 f4       	brne	.+62     	; 0x5782 <CDC_Device_SendByte+0x4a>
    5744:	fc 01       	movw	r30, r24
    5746:	44 89       	ldd	r20, Z+20	; 0x14
    5748:	55 89       	ldd	r21, Z+21	; 0x15
    574a:	66 89       	ldd	r22, Z+22	; 0x16
    574c:	77 89       	ldd	r23, Z+23	; 0x17
    574e:	45 2b       	or	r20, r21
    5750:	46 2b       	or	r20, r22
    5752:	47 2b       	or	r20, r23
    5754:	b1 f0       	breq	.+44     	; 0x5782 <CDC_Device_SendByte+0x4a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    5756:	81 81       	ldd	r24, Z+1	; 0x01
    5758:	8f 70       	andi	r24, 0x0F	; 15
    575a:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    575e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_IsReadWriteAllowed()))
    5762:	85 ff       	sbrs	r24, 5
    5764:	05 c0       	rjmp	.+10     	; 0x5770 <CDC_Device_SendByte+0x38>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    5766:	c0 93 f1 00 	sts	0x00F1, r28	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
    576a:	80 e0       	ldi	r24, 0x00	; 0
}
    576c:	cf 91       	pop	r28
    576e:	08 95       	ret
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    5770:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    5774:	8e 77       	andi	r24, 0x7E	; 126
    5776:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
    577a:	b2 dc       	rcall	.-1692   	; 0x50e0 <Endpoint_WaitUntilReady>
    577c:	88 23       	and	r24, r24
    577e:	99 f3       	breq	.-26     	; 0x5766 <CDC_Device_SendByte+0x2e>
    5780:	f5 cf       	rjmp	.-22     	; 0x576c <CDC_Device_SendByte+0x34>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
    5782:	82 e0       	ldi	r24, 0x02	; 2
    5784:	f3 cf       	rjmp	.-26     	; 0x576c <CDC_Device_SendByte+0x34>

00005786 <CDC_Device_putchar>:
		fdev_set_udata(Stream, CDCInterfaceInfo);
	}

	static int CDC_Device_putchar(char c,
	                              FILE* Stream)
	{
    5786:	cf 93       	push	r28
    5788:	c8 2f       	mov	r28, r24
    578a:	fb 01       	movw	r30, r22
		return CDC_Device_SendByte((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream), c) ? _FDEV_ERR : c;
    578c:	68 2f       	mov	r22, r24
    578e:	84 85       	ldd	r24, Z+12	; 0x0c
    5790:	95 85       	ldd	r25, Z+13	; 0x0d
    5792:	d2 df       	rcall	.-92     	; 0x5738 <CDC_Device_SendByte>
    5794:	81 11       	cpse	r24, r1
    5796:	04 c0       	rjmp	.+8      	; 0x57a0 <CDC_Device_putchar+0x1a>
    5798:	8c 2f       	mov	r24, r28
    579a:	90 e0       	ldi	r25, 0x00	; 0
	}
    579c:	cf 91       	pop	r28
    579e:	08 95       	ret
		return CDC_Device_SendByte((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream), c) ? _FDEV_ERR : c;
    57a0:	8f ef       	ldi	r24, 0xFF	; 255
    57a2:	9f ef       	ldi	r25, 0xFF	; 255
    57a4:	fb cf       	rjmp	.-10     	; 0x579c <CDC_Device_putchar+0x16>

000057a6 <CDC_Device_Flush>:
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    57a6:	20 91 69 09 	lds	r18, 0x0969	; 0x800969 <USB_DeviceState>
    57aa:	24 30       	cpi	r18, 0x04	; 4
    57ac:	39 f5       	brne	.+78     	; 0x57fc <CDC_Device_Flush+0x56>
    57ae:	fc 01       	movw	r30, r24
    57b0:	44 89       	ldd	r20, Z+20	; 0x14
    57b2:	55 89       	ldd	r21, Z+21	; 0x15
    57b4:	66 89       	ldd	r22, Z+22	; 0x16
    57b6:	77 89       	ldd	r23, Z+23	; 0x17
    57b8:	45 2b       	or	r20, r21
    57ba:	46 2b       	or	r20, r22
    57bc:	47 2b       	or	r20, r23
    57be:	f1 f0       	breq	.+60     	; 0x57fc <CDC_Device_Flush+0x56>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    57c0:	81 81       	ldd	r24, Z+1	; 0x01
    57c2:	8f 70       	andi	r24, 0x0F	; 15
    57c4:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    57c8:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    57cc:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
	if (!(Endpoint_BytesInEndpoint()))
    57d0:	89 2b       	or	r24, r25
    57d2:	11 f4       	brne	.+4      	; 0x57d8 <CDC_Device_Flush+0x32>
	  return ENDPOINT_READYWAIT_NoError;
    57d4:	80 e0       	ldi	r24, 0x00	; 0
    57d6:	08 95       	ret
				return ((UEINTX & (1 << RWAL)) ? true : false);
    57d8:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    57dc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    57e0:	8e 77       	andi	r24, 0x7E	; 126
    57e2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	if (BankFull)
    57e6:	95 fd       	sbrc	r25, 5
    57e8:	f5 cf       	rjmp	.-22     	; 0x57d4 <CDC_Device_Flush+0x2e>
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
    57ea:	7a dc       	rcall	.-1804   	; 0x50e0 <Endpoint_WaitUntilReady>
    57ec:	81 11       	cpse	r24, r1
    57ee:	07 c0       	rjmp	.+14     	; 0x57fe <CDC_Device_Flush+0x58>
    57f0:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    57f4:	9e 77       	andi	r25, 0x7E	; 126
    57f6:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    57fa:	08 95       	ret
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
    57fc:	82 e0       	ldi	r24, 0x02	; 2
}
    57fe:	08 95       	ret

00005800 <CDC_Device_USBTask>:
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    5800:	20 91 69 09 	lds	r18, 0x0969	; 0x800969 <USB_DeviceState>
    5804:	24 30       	cpi	r18, 0x04	; 4
    5806:	89 f4       	brne	.+34     	; 0x582a <CDC_Device_USBTask+0x2a>
    5808:	fc 01       	movw	r30, r24
    580a:	44 89       	ldd	r20, Z+20	; 0x14
    580c:	55 89       	ldd	r21, Z+21	; 0x15
    580e:	66 89       	ldd	r22, Z+22	; 0x16
    5810:	77 89       	ldd	r23, Z+23	; 0x17
    5812:	45 2b       	or	r20, r21
    5814:	46 2b       	or	r20, r22
    5816:	47 2b       	or	r20, r23
    5818:	41 f0       	breq	.+16     	; 0x582a <CDC_Device_USBTask+0x2a>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    581a:	21 81       	ldd	r18, Z+1	; 0x01
    581c:	2f 70       	andi	r18, 0x0F	; 15
    581e:	20 93 e9 00 	sts	0x00E9, r18	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    5822:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	if (Endpoint_IsINReady())
    5826:	20 fd       	sbrc	r18, 0
	  CDC_Device_Flush(CDCInterfaceInfo);
    5828:	be cf       	rjmp	.-132    	; 0x57a6 <CDC_Device_Flush>
}
    582a:	08 95       	ret

0000582c <CDC_Device_ReceiveByte>:
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    582c:	20 91 69 09 	lds	r18, 0x0969	; 0x800969 <USB_DeviceState>
    5830:	24 30       	cpi	r18, 0x04	; 4
    5832:	19 f0       	breq	.+6      	; 0x583a <CDC_Device_ReceiveByte+0xe>
	  return -1;
    5834:	8f ef       	ldi	r24, 0xFF	; 255
    5836:	9f ef       	ldi	r25, 0xFF	; 255
    5838:	08 95       	ret
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    583a:	fc 01       	movw	r30, r24
    583c:	44 89       	ldd	r20, Z+20	; 0x14
    583e:	55 89       	ldd	r21, Z+21	; 0x15
    5840:	66 89       	ldd	r22, Z+22	; 0x16
    5842:	77 89       	ldd	r23, Z+23	; 0x17
    5844:	45 2b       	or	r20, r21
    5846:	46 2b       	or	r20, r22
    5848:	47 2b       	or	r20, r23
    584a:	a1 f3       	breq	.-24     	; 0x5834 <CDC_Device_ReceiveByte+0x8>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    584c:	86 81       	ldd	r24, Z+6	; 0x06
    584e:	8f 70       	andi	r24, 0x0F	; 15
    5850:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    5854:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	if (Endpoint_IsOUTReceived())
    5858:	82 ff       	sbrs	r24, 2
    585a:	ec cf       	rjmp	.-40     	; 0x5834 <CDC_Device_ReceiveByte+0x8>
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    585c:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    5860:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
		if (Endpoint_BytesInEndpoint())
    5864:	89 2b       	or	r24, r25
    5866:	79 f0       	breq	.+30     	; 0x5886 <CDC_Device_ReceiveByte+0x5a>
				return UEDATX;
    5868:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
		  ReceivedByte = Endpoint_Read_8();
    586c:	90 e0       	ldi	r25, 0x00	; 0
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    586e:	30 91 f3 00 	lds	r19, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    5872:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
		if (!(Endpoint_BytesInEndpoint()))
    5876:	23 2b       	or	r18, r19
    5878:	29 f4       	brne	.+10     	; 0x5884 <CDC_Device_ReceiveByte+0x58>
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    587a:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    587e:	2b 77       	andi	r18, 0x7B	; 123
    5880:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
}
    5884:	08 95       	ret
	int16_t ReceivedByte = -1;
    5886:	8f ef       	ldi	r24, 0xFF	; 255
    5888:	9f ef       	ldi	r25, 0xFF	; 255
    588a:	f1 cf       	rjmp	.-30     	; 0x586e <CDC_Device_ReceiveByte+0x42>

0000588c <CDC_Device_getchar>:

	static int CDC_Device_getchar(FILE* Stream)
	{
		int16_t ReceivedByte = CDC_Device_ReceiveByte((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream));
    588c:	fc 01       	movw	r30, r24
    588e:	84 85       	ldd	r24, Z+12	; 0x0c
    5890:	95 85       	ldd	r25, Z+13	; 0x0d
    5892:	cc df       	rcall	.-104    	; 0x582c <CDC_Device_ReceiveByte>

		if (ReceivedByte < 0)
    5894:	97 ff       	sbrs	r25, 7
    5896:	02 c0       	rjmp	.+4      	; 0x589c <CDC_Device_getchar+0x10>
		  return _FDEV_EOF;
    5898:	8e ef       	ldi	r24, 0xFE	; 254
    589a:	9f ef       	ldi	r25, 0xFF	; 255

		return ReceivedByte;
	}
    589c:	08 95       	ret

0000589e <CDC_Device_CreateStream>:
	{
    589e:	fb 01       	movw	r30, r22
		*Stream = (FILE)FDEV_SETUP_STREAM(CDC_Device_putchar, CDC_Device_getchar, _FDEV_SETUP_RW);
    58a0:	2e e0       	ldi	r18, 0x0E	; 14
    58a2:	db 01       	movw	r26, r22
    58a4:	1d 92       	st	X+, r1
    58a6:	2a 95       	dec	r18
    58a8:	e9 f7       	brne	.-6      	; 0x58a4 <CDC_Device_CreateStream+0x6>
    58aa:	23 e0       	ldi	r18, 0x03	; 3
    58ac:	23 83       	std	Z+3, r18	; 0x03
    58ae:	23 ec       	ldi	r18, 0xC3	; 195
    58b0:	3b e2       	ldi	r19, 0x2B	; 43
    58b2:	31 87       	std	Z+9, r19	; 0x09
    58b4:	20 87       	std	Z+8, r18	; 0x08
    58b6:	26 e4       	ldi	r18, 0x46	; 70
    58b8:	3c e2       	ldi	r19, 0x2C	; 44
    58ba:	33 87       	std	Z+11, r19	; 0x0b
    58bc:	22 87       	std	Z+10, r18	; 0x0a
		fdev_set_udata(Stream, CDCInterfaceInfo);
    58be:	95 87       	std	Z+13, r25	; 0x0d
    58c0:	84 87       	std	Z+12, r24	; 0x0c
	}
    58c2:	08 95       	ret

000058c4 <CDC_Device_Event_Stub>:
#endif

void CDC_Device_Event_Stub(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{

}
    58c4:	08 95       	ret

000058c6 <CDC_Device_Event_Stub_2>:

void CDC_Device_Event_Stub_2(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo, const uint8_t _1)
{
	CDC_Device_Event_Stub(CDCInterfaceInfo);
}
    58c6:	08 95       	ret

000058c8 <CDC_Device_ProcessControlRequest>:
{
    58c8:	cf 93       	push	r28
    58ca:	df 93       	push	r29
    58cc:	ec 01       	movw	r28, r24
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    58ce:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	if (!(Endpoint_IsSETUPReceived()))
    58d2:	83 ff       	sbrs	r24, 3
    58d4:	10 c0       	rjmp	.+32     	; 0x58f6 <CDC_Device_ProcessControlRequest+0x2e>
	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
    58d6:	28 81       	ld	r18, Y
    58d8:	80 91 6e 09 	lds	r24, 0x096E	; 0x80096e <USB_ControlRequest+0x4>
    58dc:	90 91 6f 09 	lds	r25, 0x096F	; 0x80096f <USB_ControlRequest+0x5>
    58e0:	28 17       	cp	r18, r24
    58e2:	19 06       	cpc	r1, r25
    58e4:	41 f4       	brne	.+16     	; 0x58f6 <CDC_Device_ProcessControlRequest+0x2e>
	switch (USB_ControlRequest.bRequest)
    58e6:	80 91 6b 09 	lds	r24, 0x096B	; 0x80096b <USB_ControlRequest+0x1>
    58ea:	81 32       	cpi	r24, 0x21	; 33
    58ec:	e1 f0       	breq	.+56     	; 0x5926 <CDC_Device_ProcessControlRequest+0x5e>
    58ee:	30 f4       	brcc	.+12     	; 0x58fc <CDC_Device_ProcessControlRequest+0x34>
    58f0:	80 32       	cpi	r24, 0x20	; 32
    58f2:	09 f4       	brne	.+2      	; 0x58f6 <CDC_Device_ProcessControlRequest+0x2e>
    58f4:	4d c0       	rjmp	.+154    	; 0x5990 <CDC_Device_ProcessControlRequest+0xc8>
}
    58f6:	df 91       	pop	r29
    58f8:	cf 91       	pop	r28
    58fa:	08 95       	ret
    58fc:	82 32       	cpi	r24, 0x22	; 34
    58fe:	09 f4       	brne	.+2      	; 0x5902 <CDC_Device_ProcessControlRequest+0x3a>
    5900:	79 c0       	rjmp	.+242    	; 0x59f4 <CDC_Device_ProcessControlRequest+0x12c>
    5902:	83 32       	cpi	r24, 0x23	; 35
    5904:	c1 f7       	brne	.-16     	; 0x58f6 <CDC_Device_ProcessControlRequest+0x2e>
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    5906:	80 91 6a 09 	lds	r24, 0x096A	; 0x80096a <USB_ControlRequest>
    590a:	81 32       	cpi	r24, 0x21	; 33
    590c:	a1 f7       	brne	.-24     	; 0x58f6 <CDC_Device_ProcessControlRequest+0x2e>
				UEINTX &= ~(1 << RXSTPI);
    590e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    5912:	87 7f       	andi	r24, 0xF7	; 247
    5914:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				Endpoint_ClearStatusStage();
    5918:	c4 db       	rcall	.-2168   	; 0x50a2 <Endpoint_ClearStatusStage>
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    591a:	60 91 6c 09 	lds	r22, 0x096C	; 0x80096c <USB_ControlRequest+0x2>
    591e:	ce 01       	movw	r24, r28
}
    5920:	df 91       	pop	r29
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    5922:	cf 91       	pop	r28
    5924:	d0 cf       	rjmp	.-96     	; 0x58c6 <CDC_Device_Event_Stub_2>
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    5926:	80 91 6a 09 	lds	r24, 0x096A	; 0x80096a <USB_ControlRequest>
    592a:	81 3a       	cpi	r24, 0xA1	; 161
    592c:	21 f7       	brne	.-56     	; 0x58f6 <CDC_Device_ProcessControlRequest+0x2e>
    592e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    5932:	87 7f       	andi	r24, 0xF7	; 247
    5934:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    5938:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				while (!(Endpoint_IsINReady()));
    593c:	80 ff       	sbrs	r24, 0
    593e:	fc cf       	rjmp	.-8      	; 0x5938 <CDC_Device_ProcessControlRequest+0x70>
				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
    5940:	8c 89       	ldd	r24, Y+20	; 0x14
    5942:	9d 89       	ldd	r25, Y+21	; 0x15
    5944:	ae 89       	ldd	r26, Y+22	; 0x16
    5946:	bf 89       	ldd	r27, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
    5948:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
    594c:	49 2f       	mov	r20, r25
    594e:	5a 2f       	mov	r21, r26
    5950:	6b 2f       	mov	r22, r27
    5952:	77 27       	eor	r23, r23
    5954:	40 93 f1 00 	sts	0x00F1, r20	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 16);
    5958:	ad 01       	movw	r20, r26
    595a:	66 27       	eor	r22, r22
    595c:	77 27       	eor	r23, r23
    595e:	40 93 f1 00 	sts	0x00F1, r20	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 24);
    5962:	8b 2f       	mov	r24, r27
    5964:	99 27       	eor	r25, r25
    5966:	aa 27       	eor	r26, r26
    5968:	bb 27       	eor	r27, r27
    596a:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
    596e:	88 8d       	ldd	r24, Y+24	; 0x18
				UEDATX = Data;
    5970:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
    5974:	89 8d       	ldd	r24, Y+25	; 0x19
    5976:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
    597a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    597c:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    5980:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    5984:	8e 77       	andi	r24, 0x7E	; 126
    5986:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
}
    598a:	df 91       	pop	r29
				Endpoint_ClearStatusStage();
    598c:	cf 91       	pop	r28
    598e:	89 cb       	rjmp	.-2286   	; 0x50a2 <Endpoint_ClearStatusStage>
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    5990:	80 91 6a 09 	lds	r24, 0x096A	; 0x80096a <USB_ControlRequest>
    5994:	81 32       	cpi	r24, 0x21	; 33
    5996:	09 f0       	breq	.+2      	; 0x599a <CDC_Device_ProcessControlRequest+0xd2>
    5998:	ae cf       	rjmp	.-164    	; 0x58f6 <CDC_Device_ProcessControlRequest+0x2e>
				UEINTX &= ~(1 << RXSTPI);
    599a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    599e:	87 7f       	andi	r24, 0xF7	; 247
    59a0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    59a4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				while (!(Endpoint_IsOUTReceived()))
    59a8:	82 ff       	sbrs	r24, 2
    59aa:	1f c0       	rjmp	.+62     	; 0x59ea <CDC_Device_ProcessControlRequest+0x122>
				Data.Bytes[0] = UEDATX;
    59ac:	30 91 f1 00 	lds	r19, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				Data.Bytes[1] = UEDATX;
    59b0:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				Data.Bytes[2] = UEDATX;
    59b4:	90 91 f1 00 	lds	r25, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				Data.Bytes[3] = UEDATX;
    59b8:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
    59bc:	3c 8b       	std	Y+20, r19	; 0x14
    59be:	2d 8b       	std	Y+21, r18	; 0x15
    59c0:	9e 8b       	std	Y+22, r25	; 0x16
    59c2:	8f 8b       	std	Y+23, r24	; 0x17
				return UEDATX;
    59c4:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
    59c8:	88 8f       	std	Y+24, r24	; 0x18
    59ca:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
    59ce:	89 8f       	std	Y+25, r24	; 0x19
    59d0:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
    59d4:	8a 8f       	std	Y+26, r24	; 0x1a
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    59d6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    59da:	8b 77       	andi	r24, 0x7B	; 123
    59dc:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    59e0:	60 db       	rcall	.-2368   	; 0x50a2 <Endpoint_ClearStatusStage>
}
    59e2:	ce 01       	movw	r24, r28
    59e4:	df 91       	pop	r29
				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    59e6:	cf 91       	pop	r28
    59e8:	6d cf       	rjmp	.-294    	; 0x58c4 <CDC_Device_Event_Stub>
					if (USB_DeviceState == DEVICE_STATE_Unattached)
    59ea:	80 91 69 09 	lds	r24, 0x0969	; 0x800969 <USB_DeviceState>
    59ee:	81 11       	cpse	r24, r1
    59f0:	d9 cf       	rjmp	.-78     	; 0x59a4 <CDC_Device_ProcessControlRequest+0xdc>
    59f2:	81 cf       	rjmp	.-254    	; 0x58f6 <CDC_Device_ProcessControlRequest+0x2e>
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    59f4:	80 91 6a 09 	lds	r24, 0x096A	; 0x80096a <USB_ControlRequest>
    59f8:	81 32       	cpi	r24, 0x21	; 33
    59fa:	09 f0       	breq	.+2      	; 0x59fe <CDC_Device_ProcessControlRequest+0x136>
    59fc:	7c cf       	rjmp	.-264    	; 0x58f6 <CDC_Device_ProcessControlRequest+0x2e>
				UEINTX &= ~(1 << RXSTPI);
    59fe:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    5a02:	87 7f       	andi	r24, 0xF7	; 247
    5a04:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				Endpoint_ClearStatusStage();
    5a08:	4c db       	rcall	.-2408   	; 0x50a2 <Endpoint_ClearStatusStage>
				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
    5a0a:	80 91 6c 09 	lds	r24, 0x096C	; 0x80096c <USB_ControlRequest+0x2>
    5a0e:	90 91 6d 09 	lds	r25, 0x096D	; 0x80096d <USB_ControlRequest+0x3>
    5a12:	99 8b       	std	Y+17, r25	; 0x11
				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    5a14:	88 8b       	std	Y+16, r24	; 0x10
}
    5a16:	ce 01       	movw	r24, r28
    5a18:	df 91       	pop	r29
				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    5a1a:	cf 91       	pop	r28
    5a1c:	3d c9       	rjmp	.-3462   	; 0x4c98 <EVENT_CDC_Device_ControLineStateChanged>

00005a1e <HID_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_HID_DRIVER
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    5a1e:	6f 92       	push	r6
    5a20:	7f 92       	push	r7
    5a22:	8f 92       	push	r8
    5a24:	9f 92       	push	r9
    5a26:	af 92       	push	r10
    5a28:	bf 92       	push	r11
    5a2a:	cf 92       	push	r12
    5a2c:	df 92       	push	r13
    5a2e:	ef 92       	push	r14
    5a30:	ff 92       	push	r15
    5a32:	0f 93       	push	r16
    5a34:	1f 93       	push	r17
    5a36:	cf 93       	push	r28
    5a38:	df 93       	push	r29
    5a3a:	00 d0       	rcall	.+0      	; 0x5a3c <HID_Device_ProcessControlRequest+0x1e>
    5a3c:	0f 92       	push	r0
    5a3e:	cd b7       	in	r28, 0x3d	; 61
    5a40:	de b7       	in	r29, 0x3e	; 62
    5a42:	7c 01       	movw	r14, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
    5a44:	cd b6       	in	r12, 0x3d	; 61
    5a46:	de b6       	in	r13, 0x3e	; 62
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    5a48:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	if (!(Endpoint_IsSETUPReceived()))
    5a4c:	83 ff       	sbrs	r24, 3
    5a4e:	15 c0       	rjmp	.+42     	; 0x5a7a <HID_Device_ProcessControlRequest+0x5c>
	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
    5a50:	f7 01       	movw	r30, r14
    5a52:	20 81       	ld	r18, Z
    5a54:	80 91 6e 09 	lds	r24, 0x096E	; 0x80096e <USB_ControlRequest+0x4>
    5a58:	90 91 6f 09 	lds	r25, 0x096F	; 0x80096f <USB_ControlRequest+0x5>
    5a5c:	28 17       	cp	r18, r24
    5a5e:	19 06       	cpc	r1, r25
    5a60:	61 f4       	brne	.+24     	; 0x5a7a <HID_Device_ProcessControlRequest+0x5c>
	switch (USB_ControlRequest.bRequest)
    5a62:	80 91 6b 09 	lds	r24, 0x096B	; 0x80096b <USB_ControlRequest+0x1>
    5a66:	83 30       	cpi	r24, 0x03	; 3
    5a68:	09 f4       	brne	.+2      	; 0x5a6c <HID_Device_ProcessControlRequest+0x4e>
    5a6a:	ad c0       	rjmp	.+346    	; 0x5bc6 <HID_Device_ProcessControlRequest+0x1a8>
    5a6c:	e8 f4       	brcc	.+58     	; 0x5aa8 <HID_Device_ProcessControlRequest+0x8a>
    5a6e:	81 30       	cpi	r24, 0x01	; 1
    5a70:	09 f4       	brne	.+2      	; 0x5a74 <HID_Device_ProcessControlRequest+0x56>
    5a72:	59 c0       	rjmp	.+178    	; 0x5b26 <HID_Device_ProcessControlRequest+0x108>
    5a74:	82 30       	cpi	r24, 0x02	; 2
    5a76:	09 f4       	brne	.+2      	; 0x5a7a <HID_Device_ProcessControlRequest+0x5c>
    5a78:	ed c0       	rjmp	.+474    	; 0x5c54 <HID_Device_ProcessControlRequest+0x236>
}
    5a7a:	0f b6       	in	r0, 0x3f	; 63
    5a7c:	f8 94       	cli
    5a7e:	de be       	out	0x3e, r13	; 62
    5a80:	0f be       	out	0x3f, r0	; 63
    5a82:	cd be       	out	0x3d, r12	; 61
    5a84:	0f 90       	pop	r0
    5a86:	0f 90       	pop	r0
    5a88:	0f 90       	pop	r0
    5a8a:	df 91       	pop	r29
    5a8c:	cf 91       	pop	r28
    5a8e:	1f 91       	pop	r17
    5a90:	0f 91       	pop	r16
    5a92:	ff 90       	pop	r15
    5a94:	ef 90       	pop	r14
    5a96:	df 90       	pop	r13
    5a98:	cf 90       	pop	r12
    5a9a:	bf 90       	pop	r11
    5a9c:	af 90       	pop	r10
    5a9e:	9f 90       	pop	r9
    5aa0:	8f 90       	pop	r8
    5aa2:	7f 90       	pop	r7
    5aa4:	6f 90       	pop	r6
    5aa6:	08 95       	ret
    5aa8:	8a 30       	cpi	r24, 0x0A	; 10
    5aaa:	09 f4       	brne	.+2      	; 0x5aae <HID_Device_ProcessControlRequest+0x90>
    5aac:	b9 c0       	rjmp	.+370    	; 0x5c20 <HID_Device_ProcessControlRequest+0x202>
    5aae:	8b 30       	cpi	r24, 0x0B	; 11
    5ab0:	09 f4       	brne	.+2      	; 0x5ab4 <HID_Device_ProcessControlRequest+0x96>
    5ab2:	a2 c0       	rjmp	.+324    	; 0x5bf8 <HID_Device_ProcessControlRequest+0x1da>
    5ab4:	89 30       	cpi	r24, 0x09	; 9
    5ab6:	09 f7       	brne	.-62     	; 0x5a7a <HID_Device_ProcessControlRequest+0x5c>
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    5ab8:	80 91 6a 09 	lds	r24, 0x096A	; 0x80096a <USB_ControlRequest>
    5abc:	81 32       	cpi	r24, 0x21	; 33
    5abe:	e9 f6       	brne	.-70     	; 0x5a7a <HID_Device_ProcessControlRequest+0x5c>
			{
    5ac0:	8d b6       	in	r8, 0x3d	; 61
    5ac2:	9e b6       	in	r9, 0x3e	; 62
				uint16_t ReportSize = USB_ControlRequest.wLength;
    5ac4:	00 91 70 09 	lds	r16, 0x0970	; 0x800970 <USB_ControlRequest+0x6>
    5ac8:	10 91 71 09 	lds	r17, 0x0971	; 0x800971 <USB_ControlRequest+0x7>
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    5acc:	70 90 6c 09 	lds	r7, 0x096C	; 0x80096c <USB_ControlRequest+0x2>
    5ad0:	60 90 6d 09 	lds	r6, 0x096D	; 0x80096d <USB_ControlRequest+0x3>
				uint8_t  ReportData[ReportSize];
    5ad4:	8d b7       	in	r24, 0x3d	; 61
    5ad6:	9e b7       	in	r25, 0x3e	; 62
    5ad8:	80 1b       	sub	r24, r16
    5ada:	91 0b       	sbc	r25, r17
    5adc:	0f b6       	in	r0, 0x3f	; 63
    5ade:	f8 94       	cli
    5ae0:	9e bf       	out	0x3e, r25	; 62
    5ae2:	0f be       	out	0x3f, r0	; 63
    5ae4:	8d bf       	out	0x3d, r24	; 61
    5ae6:	ed b7       	in	r30, 0x3d	; 61
    5ae8:	fe b7       	in	r31, 0x3e	; 62
    5aea:	31 96       	adiw	r30, 0x01	; 1
    5aec:	5f 01       	movw	r10, r30
				UEINTX &= ~(1 << RXSTPI);
    5aee:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    5af2:	87 7f       	andi	r24, 0xF7	; 247
    5af4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
    5af8:	b8 01       	movw	r22, r16
    5afa:	cf 01       	movw	r24, r30
    5afc:	c9 d9       	rcall	.-3182   	; 0x4e90 <Endpoint_Read_Control_Stream_LE>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    5afe:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    5b02:	8e 77       	andi	r24, 0x7E	; 126
    5b04:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
    5b08:	21 e0       	ldi	r18, 0x01	; 1
    5b0a:	71 10       	cpse	r7, r1
    5b0c:	01 c0       	rjmp	.+2      	; 0x5b10 <HID_Device_ProcessControlRequest+0xf2>
    5b0e:	20 e0       	ldi	r18, 0x00	; 0
    5b10:	30 e0       	ldi	r19, 0x00	; 0
				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    5b12:	02 1b       	sub	r16, r18
    5b14:	13 0b       	sbc	r17, r19
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
    5b16:	2a 0d       	add	r18, r10
    5b18:	3b 1d       	adc	r19, r11
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
    5b1a:	4f ef       	ldi	r20, 0xFF	; 255
    5b1c:	46 0d       	add	r20, r6
				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    5b1e:	67 2d       	mov	r22, r7
    5b20:	c7 01       	movw	r24, r14
    5b22:	ad d8       	rcall	.-3750   	; 0x4c7e <CALLBACK_HID_Device_ProcessHIDReport>
    5b24:	4a c0       	rjmp	.+148    	; 0x5bba <HID_Device_ProcessControlRequest+0x19c>
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    5b26:	80 91 6a 09 	lds	r24, 0x096A	; 0x80096a <USB_ControlRequest>
    5b2a:	81 3a       	cpi	r24, 0xA1	; 161
    5b2c:	09 f0       	breq	.+2      	; 0x5b30 <HID_Device_ProcessControlRequest+0x112>
    5b2e:	a5 cf       	rjmp	.-182    	; 0x5a7a <HID_Device_ProcessControlRequest+0x5c>
			{
    5b30:	8d b6       	in	r8, 0x3d	; 61
    5b32:	9e b6       	in	r9, 0x3e	; 62
				uint16_t ReportSize = 0;
    5b34:	1a 82       	std	Y+2, r1	; 0x02
    5b36:	19 82       	std	Y+1, r1	; 0x01
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    5b38:	80 91 6c 09 	lds	r24, 0x096C	; 0x80096c <USB_ControlRequest+0x2>
    5b3c:	10 91 6d 09 	lds	r17, 0x096D	; 0x80096d <USB_ControlRequest+0x3>
    5b40:	8b 83       	std	Y+3, r24	; 0x03
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    5b42:	80 85       	ldd	r24, Z+8	; 0x08
    5b44:	48 2f       	mov	r20, r24
    5b46:	50 e0       	ldi	r21, 0x00	; 0
    5b48:	8d b7       	in	r24, 0x3d	; 61
    5b4a:	9e b7       	in	r25, 0x3e	; 62
    5b4c:	84 1b       	sub	r24, r20
    5b4e:	95 0b       	sbc	r25, r21
    5b50:	0f b6       	in	r0, 0x3f	; 63
    5b52:	f8 94       	cli
    5b54:	9e bf       	out	0x3e, r25	; 62
    5b56:	0f be       	out	0x3f, r0	; 63
    5b58:	8d bf       	out	0x3d, r24	; 61
    5b5a:	ed b7       	in	r30, 0x3d	; 61
    5b5c:	fe b7       	in	r31, 0x3e	; 62
    5b5e:	31 96       	adiw	r30, 0x01	; 1
    5b60:	5f 01       	movw	r10, r30
				memset(ReportData, 0, sizeof(ReportData));
    5b62:	70 e0       	ldi	r23, 0x00	; 0
    5b64:	60 e0       	ldi	r22, 0x00	; 0
    5b66:	cf 01       	movw	r24, r30
    5b68:	ff d3       	rcall	.+2046   	; 0x6368 <memset>
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
    5b6a:	4f ef       	ldi	r20, 0xFF	; 255
    5b6c:	41 0f       	add	r20, r17
				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
    5b6e:	8e 01       	movw	r16, r28
    5b70:	0f 5f       	subi	r16, 0xFF	; 255
    5b72:	1f 4f       	sbci	r17, 0xFF	; 255
    5b74:	95 01       	movw	r18, r10
    5b76:	be 01       	movw	r22, r28
    5b78:	6d 5f       	subi	r22, 0xFD	; 253
    5b7a:	7f 4f       	sbci	r23, 0xFF	; 255
    5b7c:	c7 01       	movw	r24, r14
    5b7e:	42 d8       	rcall	.-3964   	; 0x4c04 <CALLBACK_HID_Device_CreateHIDReport>
				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    5b80:	f7 01       	movw	r30, r14
    5b82:	86 81       	ldd	r24, Z+6	; 0x06
    5b84:	97 81       	ldd	r25, Z+7	; 0x07
    5b86:	00 97       	sbiw	r24, 0x00	; 0
    5b88:	21 f0       	breq	.+8      	; 0x5b92 <HID_Device_ProcessControlRequest+0x174>
					memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
    5b8a:	40 85       	ldd	r20, Z+8	; 0x08
    5b8c:	50 e0       	ldi	r21, 0x00	; 0
    5b8e:	b5 01       	movw	r22, r10
    5b90:	e2 d3       	rcall	.+1988   	; 0x6356 <memcpy>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    5b92:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				UEINTX &= ~(1 << RXSTPI);
    5b96:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    5b9a:	87 7f       	andi	r24, 0xF7	; 247
    5b9c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				if (ReportID)
    5ba0:	8b 81       	ldd	r24, Y+3	; 0x03
    5ba2:	81 11       	cpse	r24, r1
				UEDATX = Data;
    5ba4:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    5ba8:	69 81       	ldd	r22, Y+1	; 0x01
    5baa:	7a 81       	ldd	r23, Y+2	; 0x02
    5bac:	c5 01       	movw	r24, r10
    5bae:	12 d9       	rcall	.-3548   	; 0x4dd4 <Endpoint_Write_Control_Stream_LE>
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    5bb0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    5bb4:	8b 77       	andi	r24, 0x7B	; 123
    5bb6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    5bba:	0f b6       	in	r0, 0x3f	; 63
    5bbc:	f8 94       	cli
    5bbe:	9e be       	out	0x3e, r9	; 62
    5bc0:	0f be       	out	0x3f, r0	; 63
    5bc2:	8d be       	out	0x3d, r8	; 61
    5bc4:	5a cf       	rjmp	.-332    	; 0x5a7a <HID_Device_ProcessControlRequest+0x5c>
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    5bc6:	80 91 6a 09 	lds	r24, 0x096A	; 0x80096a <USB_ControlRequest>
    5bca:	81 3a       	cpi	r24, 0xA1	; 161
    5bcc:	09 f0       	breq	.+2      	; 0x5bd0 <HID_Device_ProcessControlRequest+0x1b2>
    5bce:	55 cf       	rjmp	.-342    	; 0x5a7a <HID_Device_ProcessControlRequest+0x5c>
				UEINTX &= ~(1 << RXSTPI);
    5bd0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    5bd4:	87 7f       	andi	r24, 0xF7	; 247
    5bd6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    5bda:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				while (!(Endpoint_IsINReady()));
    5bde:	80 ff       	sbrs	r24, 0
    5be0:	fc cf       	rjmp	.-8      	; 0x5bda <HID_Device_ProcessControlRequest+0x1bc>
				Endpoint_Write_8(HIDInterfaceInfo->State.UsingReportProtocol);
    5be2:	f7 01       	movw	r30, r14
    5be4:	81 85       	ldd	r24, Z+9	; 0x09
				UEDATX = Data;
    5be6:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    5bea:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    5bee:	8e 77       	andi	r24, 0x7E	; 126
    5bf0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				Endpoint_ClearStatusStage();
    5bf4:	56 da       	rcall	.-2900   	; 0x50a2 <Endpoint_ClearStatusStage>
    5bf6:	41 cf       	rjmp	.-382    	; 0x5a7a <HID_Device_ProcessControlRequest+0x5c>
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    5bf8:	80 91 6a 09 	lds	r24, 0x096A	; 0x80096a <USB_ControlRequest>
    5bfc:	81 32       	cpi	r24, 0x21	; 33
    5bfe:	09 f0       	breq	.+2      	; 0x5c02 <HID_Device_ProcessControlRequest+0x1e4>
    5c00:	3c cf       	rjmp	.-392    	; 0x5a7a <HID_Device_ProcessControlRequest+0x5c>
				UEINTX &= ~(1 << RXSTPI);
    5c02:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    5c06:	87 7f       	andi	r24, 0xF7	; 247
    5c08:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				Endpoint_ClearStatusStage();
    5c0c:	4a da       	rcall	.-2924   	; 0x50a2 <Endpoint_ClearStatusStage>
				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
    5c0e:	90 91 6c 09 	lds	r25, 0x096C	; 0x80096c <USB_ControlRequest+0x2>
    5c12:	81 e0       	ldi	r24, 0x01	; 1
    5c14:	91 11       	cpse	r25, r1
    5c16:	01 c0       	rjmp	.+2      	; 0x5c1a <HID_Device_ProcessControlRequest+0x1fc>
    5c18:	80 e0       	ldi	r24, 0x00	; 0
    5c1a:	f7 01       	movw	r30, r14
    5c1c:	81 87       	std	Z+9, r24	; 0x09
    5c1e:	2d cf       	rjmp	.-422    	; 0x5a7a <HID_Device_ProcessControlRequest+0x5c>
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    5c20:	80 91 6a 09 	lds	r24, 0x096A	; 0x80096a <USB_ControlRequest>
    5c24:	81 32       	cpi	r24, 0x21	; 33
    5c26:	09 f0       	breq	.+2      	; 0x5c2a <HID_Device_ProcessControlRequest+0x20c>
    5c28:	28 cf       	rjmp	.-432    	; 0x5a7a <HID_Device_ProcessControlRequest+0x5c>
    5c2a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    5c2e:	87 7f       	andi	r24, 0xF7	; 247
    5c30:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				Endpoint_ClearStatusStage();
    5c34:	36 da       	rcall	.-2964   	; 0x50a2 <Endpoint_ClearStatusStage>
				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
    5c36:	80 91 6c 09 	lds	r24, 0x096C	; 0x80096c <USB_ControlRequest+0x2>
    5c3a:	90 91 6d 09 	lds	r25, 0x096D	; 0x80096d <USB_ControlRequest+0x3>
    5c3e:	36 e0       	ldi	r19, 0x06	; 6
    5c40:	96 95       	lsr	r25
    5c42:	87 95       	ror	r24
    5c44:	3a 95       	dec	r19
    5c46:	e1 f7       	brne	.-8      	; 0x5c40 <HID_Device_ProcessControlRequest+0x222>
    5c48:	8c 7f       	andi	r24, 0xFC	; 252
    5c4a:	93 70       	andi	r25, 0x03	; 3
    5c4c:	f7 01       	movw	r30, r14
    5c4e:	95 87       	std	Z+13, r25	; 0x0d
    5c50:	84 87       	std	Z+12, r24	; 0x0c
    5c52:	13 cf       	rjmp	.-474    	; 0x5a7a <HID_Device_ProcessControlRequest+0x5c>
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    5c54:	80 91 6a 09 	lds	r24, 0x096A	; 0x80096a <USB_ControlRequest>
    5c58:	81 3a       	cpi	r24, 0xA1	; 161
    5c5a:	09 f0       	breq	.+2      	; 0x5c5e <HID_Device_ProcessControlRequest+0x240>
    5c5c:	0e cf       	rjmp	.-484    	; 0x5a7a <HID_Device_ProcessControlRequest+0x5c>
    5c5e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    5c62:	87 7f       	andi	r24, 0xF7	; 247
    5c64:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    5c68:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				while (!(Endpoint_IsINReady()));
    5c6c:	80 ff       	sbrs	r24, 0
    5c6e:	fc cf       	rjmp	.-8      	; 0x5c68 <HID_Device_ProcessControlRequest+0x24a>
				Endpoint_Write_8(HIDInterfaceInfo->State.IdleCount >> 2);
    5c70:	f7 01       	movw	r30, r14
    5c72:	84 85       	ldd	r24, Z+12	; 0x0c
    5c74:	95 85       	ldd	r25, Z+13	; 0x0d
    5c76:	96 95       	lsr	r25
    5c78:	87 95       	ror	r24
    5c7a:	96 95       	lsr	r25
    5c7c:	87 95       	ror	r24
    5c7e:	b3 cf       	rjmp	.-154    	; 0x5be6 <HID_Device_ProcessControlRequest+0x1c8>

00005c80 <HID_Device_ConfigureEndpoints>:

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
    5c80:	fc 01       	movw	r30, r24
    5c82:	39 96       	adiw	r30, 0x09	; 9
    5c84:	27 e0       	ldi	r18, 0x07	; 7
    5c86:	df 01       	movw	r26, r30
    5c88:	1d 92       	st	X+, r1
    5c8a:	2a 95       	dec	r18
    5c8c:	e9 f7       	brne	.-6      	; 0x5c88 <HID_Device_ConfigureEndpoints+0x8>
	HIDInterfaceInfo->State.UsingReportProtocol = true;
    5c8e:	21 e0       	ldi	r18, 0x01	; 1
    5c90:	fc 01       	movw	r30, r24
    5c92:	21 87       	std	Z+9, r18	; 0x09
	HIDInterfaceInfo->State.IdleCount           = 500;
    5c94:	24 ef       	ldi	r18, 0xF4	; 244
    5c96:	31 e0       	ldi	r19, 0x01	; 1
    5c98:	35 87       	std	Z+13, r19	; 0x0d
    5c9a:	24 87       	std	Z+12, r18	; 0x0c

	HIDInterfaceInfo->Config.ReportINEndpoint.Type = EP_TYPE_INTERRUPT;
    5c9c:	23 e0       	ldi	r18, 0x03	; 3
    5c9e:	24 83       	std	Z+4, r18	; 0x04

	if (!(Endpoint_ConfigureEndpointTable(&HIDInterfaceInfo->Config.ReportINEndpoint, 1)))
    5ca0:	61 e0       	ldi	r22, 0x01	; 1
    5ca2:	01 96       	adiw	r24, 0x01	; 1
    5ca4:	c2 c9       	rjmp	.-3196   	; 0x502a <Endpoint_ConfigureEndpointTable>

00005ca6 <HID_Device_USBTask>:

	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    5ca6:	5f 92       	push	r5
    5ca8:	6f 92       	push	r6
    5caa:	7f 92       	push	r7
    5cac:	8f 92       	push	r8
    5cae:	9f 92       	push	r9
    5cb0:	af 92       	push	r10
    5cb2:	bf 92       	push	r11
    5cb4:	cf 92       	push	r12
    5cb6:	df 92       	push	r13
    5cb8:	ef 92       	push	r14
    5cba:	ff 92       	push	r15
    5cbc:	0f 93       	push	r16
    5cbe:	1f 93       	push	r17
    5cc0:	cf 93       	push	r28
    5cc2:	df 93       	push	r29
    5cc4:	00 d0       	rcall	.+0      	; 0x5cc6 <HID_Device_USBTask+0x20>
    5cc6:	0f 92       	push	r0
    5cc8:	cd b7       	in	r28, 0x3d	; 61
    5cca:	de b7       	in	r29, 0x3e	; 62
    5ccc:	7c 01       	movw	r14, r24
			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
	}
}
    5cce:	ad b6       	in	r10, 0x3d	; 61
    5cd0:	be b6       	in	r11, 0x3e	; 62
	if (USB_DeviceState != DEVICE_STATE_Configured)
    5cd2:	80 91 69 09 	lds	r24, 0x0969	; 0x800969 <USB_DeviceState>
    5cd6:	84 30       	cpi	r24, 0x04	; 4
    5cd8:	09 f0       	breq	.+2      	; 0x5cdc <HID_Device_USBTask+0x36>
    5cda:	87 c0       	rjmp	.+270    	; 0x5dea <HID_Device_USBTask+0x144>
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    5cdc:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    5ce0:	90 91 e5 00 	lds	r25, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
	if (HIDInterfaceInfo->State.PrevFrameNum == USB_Device_GetFrameNumber())
    5ce4:	f7 01       	movw	r30, r14
    5ce6:	22 85       	ldd	r18, Z+10	; 0x0a
    5ce8:	33 85       	ldd	r19, Z+11	; 0x0b
    5cea:	28 17       	cp	r18, r24
    5cec:	39 07       	cpc	r19, r25
    5cee:	09 f4       	brne	.+2      	; 0x5cf2 <HID_Device_USBTask+0x4c>
    5cf0:	7c c0       	rjmp	.+248    	; 0x5dea <HID_Device_USBTask+0x144>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    5cf2:	81 81       	ldd	r24, Z+1	; 0x01
    5cf4:	8f 70       	andi	r24, 0x0F	; 15
    5cf6:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UEINTX & (1 << RWAL)) ? true : false);
    5cfa:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	if (Endpoint_IsReadWriteAllowed())
    5cfe:	85 ff       	sbrs	r24, 5
    5d00:	74 c0       	rjmp	.+232    	; 0x5dea <HID_Device_USBTask+0x144>
	{
    5d02:	8d b6       	in	r8, 0x3d	; 61
    5d04:	9e b6       	in	r9, 0x3e	; 62
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    5d06:	40 85       	ldd	r20, Z+8	; 0x08
    5d08:	50 e0       	ldi	r21, 0x00	; 0
    5d0a:	8d b7       	in	r24, 0x3d	; 61
    5d0c:	9e b7       	in	r25, 0x3e	; 62
    5d0e:	84 1b       	sub	r24, r20
    5d10:	95 0b       	sbc	r25, r21
    5d12:	0f b6       	in	r0, 0x3f	; 63
    5d14:	f8 94       	cli
    5d16:	9e bf       	out	0x3e, r25	; 62
    5d18:	0f be       	out	0x3f, r0	; 63
    5d1a:	8d bf       	out	0x3d, r24	; 61
    5d1c:	ed b7       	in	r30, 0x3d	; 61
    5d1e:	fe b7       	in	r31, 0x3e	; 62
    5d20:	31 96       	adiw	r30, 0x01	; 1
    5d22:	6f 01       	movw	r12, r30
		uint8_t  ReportID     = 0;
    5d24:	1b 82       	std	Y+3, r1	; 0x03
		uint16_t ReportINSize = 0;
    5d26:	1a 82       	std	Y+2, r1	; 0x02
    5d28:	19 82       	std	Y+1, r1	; 0x01
		memset(ReportINData, 0, sizeof(ReportINData));
    5d2a:	70 e0       	ldi	r23, 0x00	; 0
    5d2c:	60 e0       	ldi	r22, 0x00	; 0
    5d2e:	cf 01       	movw	r24, r30
    5d30:	1b d3       	rcall	.+1590   	; 0x6368 <memset>
		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
    5d32:	8e 01       	movw	r16, r28
    5d34:	0f 5f       	subi	r16, 0xFF	; 255
    5d36:	1f 4f       	sbci	r17, 0xFF	; 255
    5d38:	96 01       	movw	r18, r12
    5d3a:	40 e0       	ldi	r20, 0x00	; 0
    5d3c:	be 01       	movw	r22, r28
    5d3e:	6d 5f       	subi	r22, 0xFD	; 253
    5d40:	7f 4f       	sbci	r23, 0xFF	; 255
    5d42:	c7 01       	movw	r24, r14
    5d44:	0e 94 02 26 	call	0x4c04	; 0x4c04 <CALLBACK_HID_Device_CreateHIDReport>
    5d48:	58 2e       	mov	r5, r24
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
    5d4a:	f7 01       	movw	r30, r14
    5d4c:	84 85       	ldd	r24, Z+12	; 0x0c
    5d4e:	95 85       	ldd	r25, Z+13	; 0x0d
    5d50:	89 2b       	or	r24, r25
    5d52:	29 f0       	breq	.+10     	; 0x5d5e <HID_Device_USBTask+0xb8>
    5d54:	11 e0       	ldi	r17, 0x01	; 1
    5d56:	86 85       	ldd	r24, Z+14	; 0x0e
    5d58:	97 85       	ldd	r25, Z+15	; 0x0f
    5d5a:	89 2b       	or	r24, r25
    5d5c:	09 f0       	breq	.+2      	; 0x5d60 <HID_Device_USBTask+0xba>
    5d5e:	10 e0       	ldi	r17, 0x00	; 0
		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    5d60:	f7 01       	movw	r30, r14
    5d62:	66 80       	ldd	r6, Z+6	; 0x06
    5d64:	77 80       	ldd	r7, Z+7	; 0x07
		bool StatesChanged     = false;
    5d66:	00 e0       	ldi	r16, 0x00	; 0
		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    5d68:	61 14       	cp	r6, r1
    5d6a:	71 04       	cpc	r7, r1
    5d6c:	79 f0       	breq	.+30     	; 0x5d8c <HID_Device_USBTask+0xe6>
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
    5d6e:	49 81       	ldd	r20, Y+1	; 0x01
    5d70:	5a 81       	ldd	r21, Y+2	; 0x02
    5d72:	b3 01       	movw	r22, r6
    5d74:	c6 01       	movw	r24, r12
    5d76:	e2 d2       	rcall	.+1476   	; 0x633c <memcmp>
    5d78:	01 e0       	ldi	r16, 0x01	; 1
    5d7a:	89 2b       	or	r24, r25
    5d7c:	09 f4       	brne	.+2      	; 0x5d80 <HID_Device_USBTask+0xda>
    5d7e:	00 e0       	ldi	r16, 0x00	; 0
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
    5d80:	f7 01       	movw	r30, r14
    5d82:	40 85       	ldd	r20, Z+8	; 0x08
    5d84:	50 e0       	ldi	r21, 0x00	; 0
    5d86:	b6 01       	movw	r22, r12
    5d88:	c3 01       	movw	r24, r6
    5d8a:	e5 d2       	rcall	.+1482   	; 0x6356 <memcpy>
		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
    5d8c:	89 81       	ldd	r24, Y+1	; 0x01
    5d8e:	9a 81       	ldd	r25, Y+2	; 0x02
    5d90:	89 2b       	or	r24, r25
    5d92:	f9 f0       	breq	.+62     	; 0x5dd2 <HID_Device_USBTask+0x12c>
    5d94:	51 10       	cpse	r5, r1
    5d96:	04 c0       	rjmp	.+8      	; 0x5da0 <HID_Device_USBTask+0xfa>
    5d98:	01 11       	cpse	r16, r1
    5d9a:	02 c0       	rjmp	.+4      	; 0x5da0 <HID_Device_USBTask+0xfa>
    5d9c:	10 ff       	sbrs	r17, 0
    5d9e:	19 c0       	rjmp	.+50     	; 0x5dd2 <HID_Device_USBTask+0x12c>
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
    5da0:	f7 01       	movw	r30, r14
    5da2:	84 85       	ldd	r24, Z+12	; 0x0c
    5da4:	95 85       	ldd	r25, Z+13	; 0x0d
    5da6:	97 87       	std	Z+15, r25	; 0x0f
    5da8:	86 87       	std	Z+14, r24	; 0x0e
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    5daa:	81 81       	ldd	r24, Z+1	; 0x01
    5dac:	8f 70       	andi	r24, 0x0F	; 15
    5dae:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			if (ReportID)
    5db2:	8b 81       	ldd	r24, Y+3	; 0x03
    5db4:	81 11       	cpse	r24, r1
				UEDATX = Data;
    5db6:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);
    5dba:	69 81       	ldd	r22, Y+1	; 0x01
    5dbc:	7a 81       	ldd	r23, Y+2	; 0x02
    5dbe:	50 e0       	ldi	r21, 0x00	; 0
    5dc0:	40 e0       	ldi	r20, 0x00	; 0
    5dc2:	c6 01       	movw	r24, r12
    5dc4:	0e 94 9d 26 	call	0x4d3a	; 0x4d3a <Endpoint_Write_Stream_LE>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    5dc8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    5dcc:	8e 77       	andi	r24, 0x7E	; 126
    5dce:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    5dd2:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    5dd6:	90 91 e5 00 	lds	r25, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
    5dda:	f7 01       	movw	r30, r14
    5ddc:	93 87       	std	Z+11, r25	; 0x0b
    5dde:	82 87       	std	Z+10, r24	; 0x0a
    5de0:	0f b6       	in	r0, 0x3f	; 63
    5de2:	f8 94       	cli
    5de4:	9e be       	out	0x3e, r9	; 62
    5de6:	0f be       	out	0x3f, r0	; 63
    5de8:	8d be       	out	0x3d, r8	; 61
}
    5dea:	0f b6       	in	r0, 0x3f	; 63
    5dec:	f8 94       	cli
    5dee:	be be       	out	0x3e, r11	; 62
    5df0:	0f be       	out	0x3f, r0	; 63
    5df2:	ad be       	out	0x3d, r10	; 61
    5df4:	0f 90       	pop	r0
    5df6:	0f 90       	pop	r0
    5df8:	0f 90       	pop	r0
    5dfa:	df 91       	pop	r29
    5dfc:	cf 91       	pop	r28
    5dfe:	1f 91       	pop	r17
    5e00:	0f 91       	pop	r16
    5e02:	ff 90       	pop	r15
    5e04:	ef 90       	pop	r14
    5e06:	df 90       	pop	r13
    5e08:	cf 90       	pop	r12
    5e0a:	bf 90       	pop	r11
    5e0c:	af 90       	pop	r10
    5e0e:	9f 90       	pop	r9
    5e10:	8f 90       	pop	r8
    5e12:	7f 90       	pop	r7
    5e14:	6f 90       	pop	r6
    5e16:	5f 90       	pop	r5
    5e18:	08 95       	ret

00005e1a <__udivmodsi4>:
    5e1a:	a1 e2       	ldi	r26, 0x21	; 33
    5e1c:	1a 2e       	mov	r1, r26
    5e1e:	aa 1b       	sub	r26, r26
    5e20:	bb 1b       	sub	r27, r27
    5e22:	fd 01       	movw	r30, r26
    5e24:	0d c0       	rjmp	.+26     	; 0x5e40 <__udivmodsi4_ep>

00005e26 <__udivmodsi4_loop>:
    5e26:	aa 1f       	adc	r26, r26
    5e28:	bb 1f       	adc	r27, r27
    5e2a:	ee 1f       	adc	r30, r30
    5e2c:	ff 1f       	adc	r31, r31
    5e2e:	a2 17       	cp	r26, r18
    5e30:	b3 07       	cpc	r27, r19
    5e32:	e4 07       	cpc	r30, r20
    5e34:	f5 07       	cpc	r31, r21
    5e36:	20 f0       	brcs	.+8      	; 0x5e40 <__udivmodsi4_ep>
    5e38:	a2 1b       	sub	r26, r18
    5e3a:	b3 0b       	sbc	r27, r19
    5e3c:	e4 0b       	sbc	r30, r20
    5e3e:	f5 0b       	sbc	r31, r21

00005e40 <__udivmodsi4_ep>:
    5e40:	66 1f       	adc	r22, r22
    5e42:	77 1f       	adc	r23, r23
    5e44:	88 1f       	adc	r24, r24
    5e46:	99 1f       	adc	r25, r25
    5e48:	1a 94       	dec	r1
    5e4a:	69 f7       	brne	.-38     	; 0x5e26 <__udivmodsi4_loop>
    5e4c:	60 95       	com	r22
    5e4e:	70 95       	com	r23
    5e50:	80 95       	com	r24
    5e52:	90 95       	com	r25
    5e54:	9b 01       	movw	r18, r22
    5e56:	ac 01       	movw	r20, r24
    5e58:	bd 01       	movw	r22, r26
    5e5a:	cf 01       	movw	r24, r30
    5e5c:	08 95       	ret

00005e5e <__tablejump2__>:
    5e5e:	ee 0f       	add	r30, r30
    5e60:	ff 1f       	adc	r31, r31
    5e62:	05 90       	lpm	r0, Z+
    5e64:	f4 91       	lpm	r31, Z
    5e66:	e0 2d       	mov	r30, r0
    5e68:	09 94       	ijmp

00005e6a <malloc>:
    5e6a:	0f 93       	push	r16
    5e6c:	1f 93       	push	r17
    5e6e:	cf 93       	push	r28
    5e70:	df 93       	push	r29
    5e72:	82 30       	cpi	r24, 0x02	; 2
    5e74:	91 05       	cpc	r25, r1
    5e76:	10 f4       	brcc	.+4      	; 0x5e7c <malloc+0x12>
    5e78:	82 e0       	ldi	r24, 0x02	; 2
    5e7a:	90 e0       	ldi	r25, 0x00	; 0
    5e7c:	e0 91 74 09 	lds	r30, 0x0974	; 0x800974 <__flp>
    5e80:	f0 91 75 09 	lds	r31, 0x0975	; 0x800975 <__flp+0x1>
    5e84:	30 e0       	ldi	r19, 0x00	; 0
    5e86:	20 e0       	ldi	r18, 0x00	; 0
    5e88:	b0 e0       	ldi	r27, 0x00	; 0
    5e8a:	a0 e0       	ldi	r26, 0x00	; 0
    5e8c:	30 97       	sbiw	r30, 0x00	; 0
    5e8e:	99 f4       	brne	.+38     	; 0x5eb6 <malloc+0x4c>
    5e90:	21 15       	cp	r18, r1
    5e92:	31 05       	cpc	r19, r1
    5e94:	09 f4       	brne	.+2      	; 0x5e98 <malloc+0x2e>
    5e96:	47 c0       	rjmp	.+142    	; 0x5f26 <malloc+0xbc>
    5e98:	28 1b       	sub	r18, r24
    5e9a:	39 0b       	sbc	r19, r25
    5e9c:	24 30       	cpi	r18, 0x04	; 4
    5e9e:	31 05       	cpc	r19, r1
    5ea0:	c0 f5       	brcc	.+112    	; 0x5f12 <malloc+0xa8>
    5ea2:	8a 81       	ldd	r24, Y+2	; 0x02
    5ea4:	9b 81       	ldd	r25, Y+3	; 0x03
    5ea6:	61 15       	cp	r22, r1
    5ea8:	71 05       	cpc	r23, r1
    5eaa:	71 f1       	breq	.+92     	; 0x5f08 <malloc+0x9e>
    5eac:	fb 01       	movw	r30, r22
    5eae:	93 83       	std	Z+3, r25	; 0x03
    5eb0:	82 83       	std	Z+2, r24	; 0x02
    5eb2:	fe 01       	movw	r30, r28
    5eb4:	11 c0       	rjmp	.+34     	; 0x5ed8 <malloc+0x6e>
    5eb6:	40 81       	ld	r20, Z
    5eb8:	51 81       	ldd	r21, Z+1	; 0x01
    5eba:	02 81       	ldd	r16, Z+2	; 0x02
    5ebc:	13 81       	ldd	r17, Z+3	; 0x03
    5ebe:	48 17       	cp	r20, r24
    5ec0:	59 07       	cpc	r21, r25
    5ec2:	f8 f0       	brcs	.+62     	; 0x5f02 <malloc+0x98>
    5ec4:	48 17       	cp	r20, r24
    5ec6:	59 07       	cpc	r21, r25
    5ec8:	99 f4       	brne	.+38     	; 0x5ef0 <malloc+0x86>
    5eca:	10 97       	sbiw	r26, 0x00	; 0
    5ecc:	61 f0       	breq	.+24     	; 0x5ee6 <malloc+0x7c>
    5ece:	12 96       	adiw	r26, 0x02	; 2
    5ed0:	0c 93       	st	X, r16
    5ed2:	12 97       	sbiw	r26, 0x02	; 2
    5ed4:	13 96       	adiw	r26, 0x03	; 3
    5ed6:	1c 93       	st	X, r17
    5ed8:	32 96       	adiw	r30, 0x02	; 2
    5eda:	cf 01       	movw	r24, r30
    5edc:	df 91       	pop	r29
    5ede:	cf 91       	pop	r28
    5ee0:	1f 91       	pop	r17
    5ee2:	0f 91       	pop	r16
    5ee4:	08 95       	ret
    5ee6:	00 93 74 09 	sts	0x0974, r16	; 0x800974 <__flp>
    5eea:	10 93 75 09 	sts	0x0975, r17	; 0x800975 <__flp+0x1>
    5eee:	f4 cf       	rjmp	.-24     	; 0x5ed8 <malloc+0x6e>
    5ef0:	21 15       	cp	r18, r1
    5ef2:	31 05       	cpc	r19, r1
    5ef4:	19 f0       	breq	.+6      	; 0x5efc <malloc+0x92>
    5ef6:	42 17       	cp	r20, r18
    5ef8:	53 07       	cpc	r21, r19
    5efa:	18 f4       	brcc	.+6      	; 0x5f02 <malloc+0x98>
    5efc:	9a 01       	movw	r18, r20
    5efe:	bd 01       	movw	r22, r26
    5f00:	ef 01       	movw	r28, r30
    5f02:	df 01       	movw	r26, r30
    5f04:	f8 01       	movw	r30, r16
    5f06:	c2 cf       	rjmp	.-124    	; 0x5e8c <malloc+0x22>
    5f08:	90 93 75 09 	sts	0x0975, r25	; 0x800975 <__flp+0x1>
    5f0c:	80 93 74 09 	sts	0x0974, r24	; 0x800974 <__flp>
    5f10:	d0 cf       	rjmp	.-96     	; 0x5eb2 <malloc+0x48>
    5f12:	fe 01       	movw	r30, r28
    5f14:	e2 0f       	add	r30, r18
    5f16:	f3 1f       	adc	r31, r19
    5f18:	81 93       	st	Z+, r24
    5f1a:	91 93       	st	Z+, r25
    5f1c:	22 50       	subi	r18, 0x02	; 2
    5f1e:	31 09       	sbc	r19, r1
    5f20:	39 83       	std	Y+1, r19	; 0x01
    5f22:	28 83       	st	Y, r18
    5f24:	da cf       	rjmp	.-76     	; 0x5eda <malloc+0x70>
    5f26:	20 91 72 09 	lds	r18, 0x0972	; 0x800972 <__brkval>
    5f2a:	30 91 73 09 	lds	r19, 0x0973	; 0x800973 <__brkval+0x1>
    5f2e:	23 2b       	or	r18, r19
    5f30:	41 f4       	brne	.+16     	; 0x5f42 <malloc+0xd8>
    5f32:	20 91 69 04 	lds	r18, 0x0469	; 0x800469 <__malloc_heap_start>
    5f36:	30 91 6a 04 	lds	r19, 0x046A	; 0x80046a <__malloc_heap_start+0x1>
    5f3a:	30 93 73 09 	sts	0x0973, r19	; 0x800973 <__brkval+0x1>
    5f3e:	20 93 72 09 	sts	0x0972, r18	; 0x800972 <__brkval>
    5f42:	20 91 67 04 	lds	r18, 0x0467	; 0x800467 <__malloc_heap_end>
    5f46:	30 91 68 04 	lds	r19, 0x0468	; 0x800468 <__malloc_heap_end+0x1>
    5f4a:	21 15       	cp	r18, r1
    5f4c:	31 05       	cpc	r19, r1
    5f4e:	41 f4       	brne	.+16     	; 0x5f60 <malloc+0xf6>
    5f50:	2d b7       	in	r18, 0x3d	; 61
    5f52:	3e b7       	in	r19, 0x3e	; 62
    5f54:	40 91 6b 04 	lds	r20, 0x046B	; 0x80046b <__malloc_margin>
    5f58:	50 91 6c 04 	lds	r21, 0x046C	; 0x80046c <__malloc_margin+0x1>
    5f5c:	24 1b       	sub	r18, r20
    5f5e:	35 0b       	sbc	r19, r21
    5f60:	e0 91 72 09 	lds	r30, 0x0972	; 0x800972 <__brkval>
    5f64:	f0 91 73 09 	lds	r31, 0x0973	; 0x800973 <__brkval+0x1>
    5f68:	e2 17       	cp	r30, r18
    5f6a:	f3 07       	cpc	r31, r19
    5f6c:	a0 f4       	brcc	.+40     	; 0x5f96 <malloc+0x12c>
    5f6e:	2e 1b       	sub	r18, r30
    5f70:	3f 0b       	sbc	r19, r31
    5f72:	28 17       	cp	r18, r24
    5f74:	39 07       	cpc	r19, r25
    5f76:	78 f0       	brcs	.+30     	; 0x5f96 <malloc+0x12c>
    5f78:	ac 01       	movw	r20, r24
    5f7a:	4e 5f       	subi	r20, 0xFE	; 254
    5f7c:	5f 4f       	sbci	r21, 0xFF	; 255
    5f7e:	24 17       	cp	r18, r20
    5f80:	35 07       	cpc	r19, r21
    5f82:	48 f0       	brcs	.+18     	; 0x5f96 <malloc+0x12c>
    5f84:	4e 0f       	add	r20, r30
    5f86:	5f 1f       	adc	r21, r31
    5f88:	50 93 73 09 	sts	0x0973, r21	; 0x800973 <__brkval+0x1>
    5f8c:	40 93 72 09 	sts	0x0972, r20	; 0x800972 <__brkval>
    5f90:	81 93       	st	Z+, r24
    5f92:	91 93       	st	Z+, r25
    5f94:	a2 cf       	rjmp	.-188    	; 0x5eda <malloc+0x70>
    5f96:	f0 e0       	ldi	r31, 0x00	; 0
    5f98:	e0 e0       	ldi	r30, 0x00	; 0
    5f9a:	9f cf       	rjmp	.-194    	; 0x5eda <malloc+0x70>

00005f9c <free>:
    5f9c:	cf 93       	push	r28
    5f9e:	df 93       	push	r29
    5fa0:	00 97       	sbiw	r24, 0x00	; 0
    5fa2:	e9 f0       	breq	.+58     	; 0x5fde <free+0x42>
    5fa4:	fc 01       	movw	r30, r24
    5fa6:	32 97       	sbiw	r30, 0x02	; 2
    5fa8:	13 82       	std	Z+3, r1	; 0x03
    5faa:	12 82       	std	Z+2, r1	; 0x02
    5fac:	c0 91 74 09 	lds	r28, 0x0974	; 0x800974 <__flp>
    5fb0:	d0 91 75 09 	lds	r29, 0x0975	; 0x800975 <__flp+0x1>
    5fb4:	de 01       	movw	r26, r28
    5fb6:	30 e0       	ldi	r19, 0x00	; 0
    5fb8:	20 e0       	ldi	r18, 0x00	; 0
    5fba:	20 97       	sbiw	r28, 0x00	; 0
    5fbc:	a1 f4       	brne	.+40     	; 0x5fe6 <free+0x4a>
    5fbe:	20 81       	ld	r18, Z
    5fc0:	31 81       	ldd	r19, Z+1	; 0x01
    5fc2:	82 0f       	add	r24, r18
    5fc4:	93 1f       	adc	r25, r19
    5fc6:	20 91 72 09 	lds	r18, 0x0972	; 0x800972 <__brkval>
    5fca:	30 91 73 09 	lds	r19, 0x0973	; 0x800973 <__brkval+0x1>
    5fce:	28 17       	cp	r18, r24
    5fd0:	39 07       	cpc	r19, r25
    5fd2:	09 f0       	breq	.+2      	; 0x5fd6 <free+0x3a>
    5fd4:	67 c0       	rjmp	.+206    	; 0x60a4 <free+0x108>
    5fd6:	f0 93 73 09 	sts	0x0973, r31	; 0x800973 <__brkval+0x1>
    5fda:	e0 93 72 09 	sts	0x0972, r30	; 0x800972 <__brkval>
    5fde:	df 91       	pop	r29
    5fe0:	cf 91       	pop	r28
    5fe2:	08 95       	ret
    5fe4:	da 01       	movw	r26, r20
    5fe6:	ae 17       	cp	r26, r30
    5fe8:	bf 07       	cpc	r27, r31
    5fea:	08 f0       	brcs	.+2      	; 0x5fee <free+0x52>
    5fec:	40 c0       	rjmp	.+128    	; 0x606e <free+0xd2>
    5fee:	12 96       	adiw	r26, 0x02	; 2
    5ff0:	4d 91       	ld	r20, X+
    5ff2:	5c 91       	ld	r21, X
    5ff4:	13 97       	sbiw	r26, 0x03	; 3
    5ff6:	9d 01       	movw	r18, r26
    5ff8:	41 15       	cp	r20, r1
    5ffa:	51 05       	cpc	r21, r1
    5ffc:	99 f7       	brne	.-26     	; 0x5fe4 <free+0x48>
    5ffe:	d9 01       	movw	r26, r18
    6000:	13 96       	adiw	r26, 0x03	; 3
    6002:	fc 93       	st	X, r31
    6004:	ee 93       	st	-X, r30
    6006:	12 97       	sbiw	r26, 0x02	; 2
    6008:	4d 91       	ld	r20, X+
    600a:	5d 91       	ld	r21, X+
    600c:	a4 0f       	add	r26, r20
    600e:	b5 1f       	adc	r27, r21
    6010:	ea 17       	cp	r30, r26
    6012:	fb 07       	cpc	r31, r27
    6014:	79 f4       	brne	.+30     	; 0x6034 <free+0x98>
    6016:	80 81       	ld	r24, Z
    6018:	91 81       	ldd	r25, Z+1	; 0x01
    601a:	02 96       	adiw	r24, 0x02	; 2
    601c:	84 0f       	add	r24, r20
    601e:	95 1f       	adc	r25, r21
    6020:	d9 01       	movw	r26, r18
    6022:	11 96       	adiw	r26, 0x01	; 1
    6024:	9c 93       	st	X, r25
    6026:	8e 93       	st	-X, r24
    6028:	82 81       	ldd	r24, Z+2	; 0x02
    602a:	93 81       	ldd	r25, Z+3	; 0x03
    602c:	13 96       	adiw	r26, 0x03	; 3
    602e:	9c 93       	st	X, r25
    6030:	8e 93       	st	-X, r24
    6032:	12 97       	sbiw	r26, 0x02	; 2
    6034:	b0 e0       	ldi	r27, 0x00	; 0
    6036:	a0 e0       	ldi	r26, 0x00	; 0
    6038:	8a 81       	ldd	r24, Y+2	; 0x02
    603a:	9b 81       	ldd	r25, Y+3	; 0x03
    603c:	00 97       	sbiw	r24, 0x00	; 0
    603e:	b9 f5       	brne	.+110    	; 0x60ae <free+0x112>
    6040:	fe 01       	movw	r30, r28
    6042:	81 91       	ld	r24, Z+
    6044:	91 91       	ld	r25, Z+
    6046:	e8 0f       	add	r30, r24
    6048:	f9 1f       	adc	r31, r25
    604a:	80 91 72 09 	lds	r24, 0x0972	; 0x800972 <__brkval>
    604e:	90 91 73 09 	lds	r25, 0x0973	; 0x800973 <__brkval+0x1>
    6052:	8e 17       	cp	r24, r30
    6054:	9f 07       	cpc	r25, r31
    6056:	19 f6       	brne	.-122    	; 0x5fde <free+0x42>
    6058:	10 97       	sbiw	r26, 0x00	; 0
    605a:	61 f5       	brne	.+88     	; 0x60b4 <free+0x118>
    605c:	10 92 75 09 	sts	0x0975, r1	; 0x800975 <__flp+0x1>
    6060:	10 92 74 09 	sts	0x0974, r1	; 0x800974 <__flp>
    6064:	d0 93 73 09 	sts	0x0973, r29	; 0x800973 <__brkval+0x1>
    6068:	c0 93 72 09 	sts	0x0972, r28	; 0x800972 <__brkval>
    606c:	b8 cf       	rjmp	.-144    	; 0x5fde <free+0x42>
    606e:	b3 83       	std	Z+3, r27	; 0x03
    6070:	a2 83       	std	Z+2, r26	; 0x02
    6072:	40 81       	ld	r20, Z
    6074:	51 81       	ldd	r21, Z+1	; 0x01
    6076:	84 0f       	add	r24, r20
    6078:	95 1f       	adc	r25, r21
    607a:	a8 17       	cp	r26, r24
    607c:	b9 07       	cpc	r27, r25
    607e:	71 f4       	brne	.+28     	; 0x609c <free+0x100>
    6080:	4e 5f       	subi	r20, 0xFE	; 254
    6082:	5f 4f       	sbci	r21, 0xFF	; 255
    6084:	8d 91       	ld	r24, X+
    6086:	9c 91       	ld	r25, X
    6088:	11 97       	sbiw	r26, 0x01	; 1
    608a:	48 0f       	add	r20, r24
    608c:	59 1f       	adc	r21, r25
    608e:	51 83       	std	Z+1, r21	; 0x01
    6090:	40 83       	st	Z, r20
    6092:	12 96       	adiw	r26, 0x02	; 2
    6094:	8d 91       	ld	r24, X+
    6096:	9c 91       	ld	r25, X
    6098:	93 83       	std	Z+3, r25	; 0x03
    609a:	82 83       	std	Z+2, r24	; 0x02
    609c:	21 15       	cp	r18, r1
    609e:	31 05       	cpc	r19, r1
    60a0:	09 f0       	breq	.+2      	; 0x60a4 <free+0x108>
    60a2:	ad cf       	rjmp	.-166    	; 0x5ffe <free+0x62>
    60a4:	f0 93 75 09 	sts	0x0975, r31	; 0x800975 <__flp+0x1>
    60a8:	e0 93 74 09 	sts	0x0974, r30	; 0x800974 <__flp>
    60ac:	98 cf       	rjmp	.-208    	; 0x5fde <free+0x42>
    60ae:	de 01       	movw	r26, r28
    60b0:	ec 01       	movw	r28, r24
    60b2:	c2 cf       	rjmp	.-124    	; 0x6038 <free+0x9c>
    60b4:	13 96       	adiw	r26, 0x03	; 3
    60b6:	1c 92       	st	X, r1
    60b8:	1e 92       	st	-X, r1
    60ba:	12 97       	sbiw	r26, 0x02	; 2
    60bc:	d3 cf       	rjmp	.-90     	; 0x6064 <free+0xc8>

000060be <strtol>:
    60be:	b0 e0       	ldi	r27, 0x00	; 0
    60c0:	a0 e0       	ldi	r26, 0x00	; 0
    60c2:	e4 e6       	ldi	r30, 0x64	; 100
    60c4:	f0 e3       	ldi	r31, 0x30	; 48
    60c6:	58 c4       	rjmp	.+2224   	; 0x6978 <__prologue_saves__+0x4>
    60c8:	5c 01       	movw	r10, r24
    60ca:	6b 01       	movw	r12, r22
    60cc:	8a 01       	movw	r16, r20
    60ce:	61 15       	cp	r22, r1
    60d0:	71 05       	cpc	r23, r1
    60d2:	19 f0       	breq	.+6      	; 0x60da <strtol+0x1c>
    60d4:	fb 01       	movw	r30, r22
    60d6:	91 83       	std	Z+1, r25	; 0x01
    60d8:	80 83       	st	Z, r24
    60da:	01 15       	cp	r16, r1
    60dc:	11 05       	cpc	r17, r1
    60de:	51 f0       	breq	.+20     	; 0x60f4 <strtol+0x36>
    60e0:	c8 01       	movw	r24, r16
    60e2:	02 97       	sbiw	r24, 0x02	; 2
    60e4:	83 97       	sbiw	r24, 0x23	; 35
    60e6:	30 f0       	brcs	.+12     	; 0x60f4 <strtol+0x36>
    60e8:	40 e0       	ldi	r20, 0x00	; 0
    60ea:	30 e0       	ldi	r19, 0x00	; 0
    60ec:	20 e0       	ldi	r18, 0x00	; 0
    60ee:	90 e0       	ldi	r25, 0x00	; 0
    60f0:	b3 c0       	rjmp	.+358    	; 0x6258 <strtol+0x19a>
    60f2:	5e 01       	movw	r10, r28
    60f4:	e5 01       	movw	r28, r10
    60f6:	f9 90       	ld	r15, Y+
    60f8:	8f 2d       	mov	r24, r15
    60fa:	90 e0       	ldi	r25, 0x00	; 0
    60fc:	17 d1       	rcall	.+558    	; 0x632c <isspace>
    60fe:	89 2b       	or	r24, r25
    6100:	c1 f7       	brne	.-16     	; 0x60f2 <strtol+0x34>
    6102:	fd e2       	ldi	r31, 0x2D	; 45
    6104:	ff 12       	cpse	r15, r31
    6106:	55 c0       	rjmp	.+170    	; 0x61b2 <strtol+0xf4>
    6108:	f8 80       	ld	r15, Y
    610a:	e5 01       	movw	r28, r10
    610c:	22 96       	adiw	r28, 0x02	; 2
    610e:	ee 24       	eor	r14, r14
    6110:	e3 94       	inc	r14
    6112:	01 15       	cp	r16, r1
    6114:	11 05       	cpc	r17, r1
    6116:	09 f4       	brne	.+2      	; 0x611a <strtol+0x5c>
    6118:	cf c0       	rjmp	.+414    	; 0x62b8 <strtol+0x1fa>
    611a:	00 31       	cpi	r16, 0x10	; 16
    611c:	11 05       	cpc	r17, r1
    611e:	09 f0       	breq	.+2      	; 0x6122 <strtol+0x64>
    6120:	50 c0       	rjmp	.+160    	; 0x61c2 <strtol+0x104>
    6122:	20 e3       	ldi	r18, 0x30	; 48
    6124:	f2 12       	cpse	r15, r18
    6126:	71 c0       	rjmp	.+226    	; 0x620a <strtol+0x14c>
    6128:	88 81       	ld	r24, Y
    612a:	8f 7d       	andi	r24, 0xDF	; 223
    612c:	88 35       	cpi	r24, 0x58	; 88
    612e:	09 f0       	breq	.+2      	; 0x6132 <strtol+0x74>
    6130:	b7 c0       	rjmp	.+366    	; 0x62a0 <strtol+0x1e2>
    6132:	f9 80       	ldd	r15, Y+1	; 0x01
    6134:	22 96       	adiw	r28, 0x02	; 2
    6136:	ee 2d       	mov	r30, r14
    6138:	e2 60       	ori	r30, 0x02	; 2
    613a:	00 e1       	ldi	r16, 0x10	; 16
    613c:	10 e0       	ldi	r17, 0x00	; 0
    613e:	81 2c       	mov	r8, r1
    6140:	91 2c       	mov	r9, r1
    6142:	a1 2c       	mov	r10, r1
    6144:	58 e0       	ldi	r21, 0x08	; 8
    6146:	b5 2e       	mov	r11, r21
    6148:	20 e0       	ldi	r18, 0x00	; 0
    614a:	60 e0       	ldi	r22, 0x00	; 0
    614c:	70 e0       	ldi	r23, 0x00	; 0
    614e:	cb 01       	movw	r24, r22
    6150:	28 01       	movw	r4, r16
    6152:	01 2e       	mov	r0, r17
    6154:	00 0c       	add	r0, r0
    6156:	66 08       	sbc	r6, r6
    6158:	77 08       	sbc	r7, r7
    615a:	f0 ed       	ldi	r31, 0xD0	; 208
    615c:	ff 0d       	add	r31, r15
    615e:	fa 30       	cpi	r31, 0x0A	; 10
    6160:	60 f0       	brcs	.+24     	; 0x617a <strtol+0xbc>
    6162:	3f eb       	ldi	r19, 0xBF	; 191
    6164:	3f 0d       	add	r19, r15
    6166:	f9 ec       	ldi	r31, 0xC9	; 201
    6168:	3a 31       	cpi	r19, 0x1A	; 26
    616a:	30 f0       	brcs	.+12     	; 0x6178 <strtol+0xba>
    616c:	3f e9       	ldi	r19, 0x9F	; 159
    616e:	3f 0d       	add	r19, r15
    6170:	3a 31       	cpi	r19, 0x1A	; 26
    6172:	08 f0       	brcs	.+2      	; 0x6176 <strtol+0xb8>
    6174:	53 c0       	rjmp	.+166    	; 0x621c <strtol+0x15e>
    6176:	f9 ea       	ldi	r31, 0xA9	; 169
    6178:	ff 0d       	add	r31, r15
    617a:	f0 17       	cp	r31, r16
    617c:	11 06       	cpc	r1, r17
    617e:	0c f0       	brlt	.+2      	; 0x6182 <strtol+0xc4>
    6180:	4d c0       	rjmp	.+154    	; 0x621c <strtol+0x15e>
    6182:	27 fd       	sbrc	r18, 7
    6184:	14 c0       	rjmp	.+40     	; 0x61ae <strtol+0xf0>
    6186:	86 16       	cp	r8, r22
    6188:	97 06       	cpc	r9, r23
    618a:	a8 06       	cpc	r10, r24
    618c:	b9 06       	cpc	r11, r25
    618e:	70 f0       	brcs	.+28     	; 0x61ac <strtol+0xee>
    6190:	a3 01       	movw	r20, r6
    6192:	92 01       	movw	r18, r4
    6194:	d6 d3       	rcall	.+1964   	; 0x6942 <__mulsi3>
    6196:	6f 0f       	add	r22, r31
    6198:	71 1d       	adc	r23, r1
    619a:	81 1d       	adc	r24, r1
    619c:	91 1d       	adc	r25, r1
    619e:	21 e0       	ldi	r18, 0x01	; 1
    61a0:	61 30       	cpi	r22, 0x01	; 1
    61a2:	71 05       	cpc	r23, r1
    61a4:	81 05       	cpc	r24, r1
    61a6:	f0 e8       	ldi	r31, 0x80	; 128
    61a8:	9f 07       	cpc	r25, r31
    61aa:	08 f0       	brcs	.+2      	; 0x61ae <strtol+0xf0>
    61ac:	2f ef       	ldi	r18, 0xFF	; 255
    61ae:	f9 90       	ld	r15, Y+
    61b0:	d4 cf       	rjmp	.-88     	; 0x615a <strtol+0x9c>
    61b2:	2b e2       	ldi	r18, 0x2B	; 43
    61b4:	f2 12       	cpse	r15, r18
    61b6:	03 c0       	rjmp	.+6      	; 0x61be <strtol+0x100>
    61b8:	f8 80       	ld	r15, Y
    61ba:	e5 01       	movw	r28, r10
    61bc:	22 96       	adiw	r28, 0x02	; 2
    61be:	e1 2c       	mov	r14, r1
    61c0:	a8 cf       	rjmp	.-176    	; 0x6112 <strtol+0x54>
    61c2:	08 30       	cpi	r16, 0x08	; 8
    61c4:	11 05       	cpc	r17, r1
    61c6:	19 f1       	breq	.+70     	; 0x620e <strtol+0x150>
    61c8:	c4 f4       	brge	.+48     	; 0x61fa <strtol+0x13c>
    61ca:	ee 2d       	mov	r30, r14
    61cc:	81 2c       	mov	r8, r1
    61ce:	91 2c       	mov	r9, r1
    61d0:	a1 2c       	mov	r10, r1
    61d2:	40 e4       	ldi	r20, 0x40	; 64
    61d4:	b4 2e       	mov	r11, r20
    61d6:	02 30       	cpi	r16, 0x02	; 2
    61d8:	11 05       	cpc	r17, r1
    61da:	09 f4       	brne	.+2      	; 0x61de <strtol+0x120>
    61dc:	b5 cf       	rjmp	.-150    	; 0x6148 <strtol+0x8a>
    61de:	60 e0       	ldi	r22, 0x00	; 0
    61e0:	70 e0       	ldi	r23, 0x00	; 0
    61e2:	80 e0       	ldi	r24, 0x00	; 0
    61e4:	90 e8       	ldi	r25, 0x80	; 128
    61e6:	98 01       	movw	r18, r16
    61e8:	01 2e       	mov	r0, r17
    61ea:	00 0c       	add	r0, r0
    61ec:	44 0b       	sbc	r20, r20
    61ee:	55 0b       	sbc	r21, r21
    61f0:	14 de       	rcall	.-984    	; 0x5e1a <__udivmodsi4>
    61f2:	49 01       	movw	r8, r18
    61f4:	5a 01       	movw	r10, r20
    61f6:	ee 2d       	mov	r30, r14
    61f8:	a7 cf       	rjmp	.-178    	; 0x6148 <strtol+0x8a>
    61fa:	ee 2d       	mov	r30, r14
    61fc:	0a 30       	cpi	r16, 0x0A	; 10
    61fe:	11 05       	cpc	r17, r1
    6200:	09 f4       	brne	.+2      	; 0x6204 <strtol+0x146>
    6202:	61 c0       	rjmp	.+194    	; 0x62c6 <strtol+0x208>
    6204:	00 31       	cpi	r16, 0x10	; 16
    6206:	11 05       	cpc	r17, r1
    6208:	51 f7       	brne	.-44     	; 0x61de <strtol+0x120>
    620a:	ee 2d       	mov	r30, r14
    620c:	96 cf       	rjmp	.-212    	; 0x613a <strtol+0x7c>
    620e:	ee 2d       	mov	r30, r14
    6210:	81 2c       	mov	r8, r1
    6212:	91 2c       	mov	r9, r1
    6214:	a1 2c       	mov	r10, r1
    6216:	20 e1       	ldi	r18, 0x10	; 16
    6218:	b2 2e       	mov	r11, r18
    621a:	96 cf       	rjmp	.-212    	; 0x6148 <strtol+0x8a>
    621c:	c1 14       	cp	r12, r1
    621e:	d1 04       	cpc	r13, r1
    6220:	31 f0       	breq	.+12     	; 0x622e <strtol+0x170>
    6222:	22 23       	and	r18, r18
    6224:	01 f1       	breq	.+64     	; 0x6266 <strtol+0x1a8>
    6226:	21 97       	sbiw	r28, 0x01	; 1
    6228:	f6 01       	movw	r30, r12
    622a:	d1 83       	std	Z+1, r29	; 0x01
    622c:	c0 83       	st	Z, r28
    622e:	27 ff       	sbrs	r18, 7
    6230:	20 c0       	rjmp	.+64     	; 0x6272 <strtol+0x1b4>
    6232:	6f ef       	ldi	r22, 0xFF	; 255
    6234:	7f ef       	ldi	r23, 0xFF	; 255
    6236:	8f ef       	ldi	r24, 0xFF	; 255
    6238:	9f e7       	ldi	r25, 0x7F	; 127
    623a:	ee 20       	and	r14, r14
    623c:	21 f0       	breq	.+8      	; 0x6246 <strtol+0x188>
    623e:	60 e0       	ldi	r22, 0x00	; 0
    6240:	70 e0       	ldi	r23, 0x00	; 0
    6242:	80 e0       	ldi	r24, 0x00	; 0
    6244:	90 e8       	ldi	r25, 0x80	; 128
    6246:	22 e2       	ldi	r18, 0x22	; 34
    6248:	30 e0       	ldi	r19, 0x00	; 0
    624a:	30 93 77 09 	sts	0x0977, r19	; 0x800977 <errno+0x1>
    624e:	20 93 76 09 	sts	0x0976, r18	; 0x800976 <errno>
    6252:	46 2f       	mov	r20, r22
    6254:	37 2f       	mov	r19, r23
    6256:	28 2f       	mov	r18, r24
    6258:	64 2f       	mov	r22, r20
    625a:	73 2f       	mov	r23, r19
    625c:	82 2f       	mov	r24, r18
    625e:	cd b7       	in	r28, 0x3d	; 61
    6260:	de b7       	in	r29, 0x3e	; 62
    6262:	e0 e1       	ldi	r30, 0x10	; 16
    6264:	a5 c3       	rjmp	.+1866   	; 0x69b0 <__epilogue_restores__+0x4>
    6266:	e1 ff       	sbrs	r30, 1
    6268:	04 c0       	rjmp	.+8      	; 0x6272 <strtol+0x1b4>
    626a:	22 97       	sbiw	r28, 0x02	; 2
    626c:	f6 01       	movw	r30, r12
    626e:	d1 83       	std	Z+1, r29	; 0x01
    6270:	c0 83       	st	Z, r28
    6272:	ee 20       	and	r14, r14
    6274:	41 f0       	breq	.+16     	; 0x6286 <strtol+0x1c8>
    6276:	90 95       	com	r25
    6278:	80 95       	com	r24
    627a:	70 95       	com	r23
    627c:	61 95       	neg	r22
    627e:	7f 4f       	sbci	r23, 0xFF	; 255
    6280:	8f 4f       	sbci	r24, 0xFF	; 255
    6282:	9f 4f       	sbci	r25, 0xFF	; 255
    6284:	e6 cf       	rjmp	.-52     	; 0x6252 <strtol+0x194>
    6286:	97 ff       	sbrs	r25, 7
    6288:	e4 cf       	rjmp	.-56     	; 0x6252 <strtol+0x194>
    628a:	82 e2       	ldi	r24, 0x22	; 34
    628c:	90 e0       	ldi	r25, 0x00	; 0
    628e:	90 93 77 09 	sts	0x0977, r25	; 0x800977 <errno+0x1>
    6292:	80 93 76 09 	sts	0x0976, r24	; 0x800976 <errno>
    6296:	6f ef       	ldi	r22, 0xFF	; 255
    6298:	7f ef       	ldi	r23, 0xFF	; 255
    629a:	8f ef       	ldi	r24, 0xFF	; 255
    629c:	9f e7       	ldi	r25, 0x7F	; 127
    629e:	d9 cf       	rjmp	.-78     	; 0x6252 <strtol+0x194>
    62a0:	90 e3       	ldi	r25, 0x30	; 48
    62a2:	f9 2e       	mov	r15, r25
    62a4:	01 15       	cp	r16, r1
    62a6:	11 05       	cpc	r17, r1
    62a8:	09 f0       	breq	.+2      	; 0x62ac <strtol+0x1ee>
    62aa:	8b cf       	rjmp	.-234    	; 0x61c2 <strtol+0x104>
    62ac:	ee 2d       	mov	r30, r14
    62ae:	30 e3       	ldi	r19, 0x30	; 48
    62b0:	f3 2e       	mov	r15, r19
    62b2:	08 e0       	ldi	r16, 0x08	; 8
    62b4:	10 e0       	ldi	r17, 0x00	; 0
    62b6:	ac cf       	rjmp	.-168    	; 0x6210 <strtol+0x152>
    62b8:	f0 e3       	ldi	r31, 0x30	; 48
    62ba:	ff 16       	cp	r15, r31
    62bc:	09 f4       	brne	.+2      	; 0x62c0 <strtol+0x202>
    62be:	34 cf       	rjmp	.-408    	; 0x6128 <strtol+0x6a>
    62c0:	ee 2d       	mov	r30, r14
    62c2:	0a e0       	ldi	r16, 0x0A	; 10
    62c4:	10 e0       	ldi	r17, 0x00	; 0
    62c6:	8c ec       	ldi	r24, 0xCC	; 204
    62c8:	88 2e       	mov	r8, r24
    62ca:	98 2c       	mov	r9, r8
    62cc:	a8 2c       	mov	r10, r8
    62ce:	8c e0       	ldi	r24, 0x0C	; 12
    62d0:	b8 2e       	mov	r11, r24
    62d2:	3a cf       	rjmp	.-396    	; 0x6148 <strtol+0x8a>

000062d4 <abort>:
    62d4:	81 e0       	ldi	r24, 0x01	; 1
    62d6:	90 e0       	ldi	r25, 0x00	; 0
    62d8:	f8 94       	cli
    62da:	92 c3       	rjmp	.+1828   	; 0x6a00 <_exit>

000062dc <atoi>:
    62dc:	fc 01       	movw	r30, r24
    62de:	88 27       	eor	r24, r24
    62e0:	99 27       	eor	r25, r25
    62e2:	e8 94       	clt
    62e4:	21 91       	ld	r18, Z+
    62e6:	20 32       	cpi	r18, 0x20	; 32
    62e8:	e9 f3       	breq	.-6      	; 0x62e4 <atoi+0x8>
    62ea:	29 30       	cpi	r18, 0x09	; 9
    62ec:	10 f0       	brcs	.+4      	; 0x62f2 <atoi+0x16>
    62ee:	2e 30       	cpi	r18, 0x0E	; 14
    62f0:	c8 f3       	brcs	.-14     	; 0x62e4 <atoi+0x8>
    62f2:	2b 32       	cpi	r18, 0x2B	; 43
    62f4:	39 f0       	breq	.+14     	; 0x6304 <atoi+0x28>
    62f6:	2d 32       	cpi	r18, 0x2D	; 45
    62f8:	31 f4       	brne	.+12     	; 0x6306 <atoi+0x2a>
    62fa:	68 94       	set
    62fc:	03 c0       	rjmp	.+6      	; 0x6304 <atoi+0x28>
    62fe:	3b d0       	rcall	.+118    	; 0x6376 <__mulhi_const_10>
    6300:	82 0f       	add	r24, r18
    6302:	91 1d       	adc	r25, r1
    6304:	21 91       	ld	r18, Z+
    6306:	20 53       	subi	r18, 0x30	; 48
    6308:	2a 30       	cpi	r18, 0x0A	; 10
    630a:	c8 f3       	brcs	.-14     	; 0x62fe <atoi+0x22>
    630c:	1e f4       	brtc	.+6      	; 0x6314 <atoi+0x38>
    630e:	90 95       	com	r25
    6310:	81 95       	neg	r24
    6312:	9f 4f       	sbci	r25, 0xFF	; 255
    6314:	08 95       	ret

00006316 <isxdigit>:
    6316:	91 11       	cpse	r25, r1
    6318:	7b c2       	rjmp	.+1270   	; 0x6810 <__ctype_isfalse>
    631a:	80 53       	subi	r24, 0x30	; 48
    631c:	8a 50       	subi	r24, 0x0A	; 10
    631e:	28 f0       	brcs	.+10     	; 0x632a <isxdigit+0x14>
    6320:	86 5c       	subi	r24, 0xC6	; 198
    6322:	80 62       	ori	r24, 0x20	; 32
    6324:	81 56       	subi	r24, 0x61	; 97
    6326:	86 50       	subi	r24, 0x06	; 6
    6328:	b8 f7       	brcc	.-18     	; 0x6318 <isxdigit+0x2>
    632a:	08 95       	ret

0000632c <isspace>:
    632c:	91 11       	cpse	r25, r1
    632e:	70 c2       	rjmp	.+1248   	; 0x6810 <__ctype_isfalse>
    6330:	80 32       	cpi	r24, 0x20	; 32
    6332:	19 f0       	breq	.+6      	; 0x633a <isspace+0xe>
    6334:	89 50       	subi	r24, 0x09	; 9
    6336:	85 50       	subi	r24, 0x05	; 5
    6338:	d0 f7       	brcc	.-12     	; 0x632e <isspace+0x2>
    633a:	08 95       	ret

0000633c <memcmp>:
    633c:	fb 01       	movw	r30, r22
    633e:	dc 01       	movw	r26, r24
    6340:	04 c0       	rjmp	.+8      	; 0x634a <memcmp+0xe>
    6342:	8d 91       	ld	r24, X+
    6344:	01 90       	ld	r0, Z+
    6346:	80 19       	sub	r24, r0
    6348:	21 f4       	brne	.+8      	; 0x6352 <memcmp+0x16>
    634a:	41 50       	subi	r20, 0x01	; 1
    634c:	50 40       	sbci	r21, 0x00	; 0
    634e:	c8 f7       	brcc	.-14     	; 0x6342 <memcmp+0x6>
    6350:	88 1b       	sub	r24, r24
    6352:	99 0b       	sbc	r25, r25
    6354:	08 95       	ret

00006356 <memcpy>:
    6356:	fb 01       	movw	r30, r22
    6358:	dc 01       	movw	r26, r24
    635a:	02 c0       	rjmp	.+4      	; 0x6360 <memcpy+0xa>
    635c:	01 90       	ld	r0, Z+
    635e:	0d 92       	st	X+, r0
    6360:	41 50       	subi	r20, 0x01	; 1
    6362:	50 40       	sbci	r21, 0x00	; 0
    6364:	d8 f7       	brcc	.-10     	; 0x635c <memcpy+0x6>
    6366:	08 95       	ret

00006368 <memset>:
    6368:	dc 01       	movw	r26, r24
    636a:	01 c0       	rjmp	.+2      	; 0x636e <memset+0x6>
    636c:	6d 93       	st	X+, r22
    636e:	41 50       	subi	r20, 0x01	; 1
    6370:	50 40       	sbci	r21, 0x00	; 0
    6372:	e0 f7       	brcc	.-8      	; 0x636c <memset+0x4>
    6374:	08 95       	ret

00006376 <__mulhi_const_10>:
    6376:	7a e0       	ldi	r23, 0x0A	; 10
    6378:	97 9f       	mul	r25, r23
    637a:	90 2d       	mov	r25, r0
    637c:	87 9f       	mul	r24, r23
    637e:	80 2d       	mov	r24, r0
    6380:	91 0d       	add	r25, r1
    6382:	11 24       	eor	r1, r1
    6384:	08 95       	ret

00006386 <fputc>:
    6386:	0f 93       	push	r16
    6388:	1f 93       	push	r17
    638a:	cf 93       	push	r28
    638c:	df 93       	push	r29
    638e:	18 2f       	mov	r17, r24
    6390:	09 2f       	mov	r16, r25
    6392:	eb 01       	movw	r28, r22
    6394:	8b 81       	ldd	r24, Y+3	; 0x03
    6396:	81 fd       	sbrc	r24, 1
    6398:	09 c0       	rjmp	.+18     	; 0x63ac <fputc+0x26>
    639a:	1f ef       	ldi	r17, 0xFF	; 255
    639c:	0f ef       	ldi	r16, 0xFF	; 255
    639e:	81 2f       	mov	r24, r17
    63a0:	90 2f       	mov	r25, r16
    63a2:	df 91       	pop	r29
    63a4:	cf 91       	pop	r28
    63a6:	1f 91       	pop	r17
    63a8:	0f 91       	pop	r16
    63aa:	08 95       	ret
    63ac:	82 ff       	sbrs	r24, 2
    63ae:	14 c0       	rjmp	.+40     	; 0x63d8 <fputc+0x52>
    63b0:	2e 81       	ldd	r18, Y+6	; 0x06
    63b2:	3f 81       	ldd	r19, Y+7	; 0x07
    63b4:	8c 81       	ldd	r24, Y+4	; 0x04
    63b6:	9d 81       	ldd	r25, Y+5	; 0x05
    63b8:	28 17       	cp	r18, r24
    63ba:	39 07       	cpc	r19, r25
    63bc:	3c f4       	brge	.+14     	; 0x63cc <fputc+0x46>
    63be:	e8 81       	ld	r30, Y
    63c0:	f9 81       	ldd	r31, Y+1	; 0x01
    63c2:	cf 01       	movw	r24, r30
    63c4:	01 96       	adiw	r24, 0x01	; 1
    63c6:	99 83       	std	Y+1, r25	; 0x01
    63c8:	88 83       	st	Y, r24
    63ca:	10 83       	st	Z, r17
    63cc:	8e 81       	ldd	r24, Y+6	; 0x06
    63ce:	9f 81       	ldd	r25, Y+7	; 0x07
    63d0:	01 96       	adiw	r24, 0x01	; 1
    63d2:	9f 83       	std	Y+7, r25	; 0x07
    63d4:	8e 83       	std	Y+6, r24	; 0x06
    63d6:	e3 cf       	rjmp	.-58     	; 0x639e <fputc+0x18>
    63d8:	e8 85       	ldd	r30, Y+8	; 0x08
    63da:	f9 85       	ldd	r31, Y+9	; 0x09
    63dc:	81 2f       	mov	r24, r17
    63de:	09 95       	icall
    63e0:	89 2b       	or	r24, r25
    63e2:	a1 f3       	breq	.-24     	; 0x63cc <fputc+0x46>
    63e4:	da cf       	rjmp	.-76     	; 0x639a <fputc+0x14>

000063e6 <fputs>:
    63e6:	ef 92       	push	r14
    63e8:	ff 92       	push	r15
    63ea:	0f 93       	push	r16
    63ec:	1f 93       	push	r17
    63ee:	cf 93       	push	r28
    63f0:	df 93       	push	r29
    63f2:	7b 01       	movw	r14, r22
    63f4:	db 01       	movw	r26, r22
    63f6:	13 96       	adiw	r26, 0x03	; 3
    63f8:	2c 91       	ld	r18, X
    63fa:	10 e0       	ldi	r17, 0x00	; 0
    63fc:	00 e0       	ldi	r16, 0x00	; 0
    63fe:	21 fd       	sbrc	r18, 1
    6400:	0e c0       	rjmp	.+28     	; 0x641e <fputs+0x38>
    6402:	0f ef       	ldi	r16, 0xFF	; 255
    6404:	1f ef       	ldi	r17, 0xFF	; 255
    6406:	0f c0       	rjmp	.+30     	; 0x6426 <fputs+0x40>
    6408:	d7 01       	movw	r26, r14
    640a:	18 96       	adiw	r26, 0x08	; 8
    640c:	ed 91       	ld	r30, X+
    640e:	fc 91       	ld	r31, X
    6410:	b7 01       	movw	r22, r14
    6412:	09 95       	icall
    6414:	89 2b       	or	r24, r25
    6416:	11 f0       	breq	.+4      	; 0x641c <fputs+0x36>
    6418:	0f ef       	ldi	r16, 0xFF	; 255
    641a:	1f ef       	ldi	r17, 0xFF	; 255
    641c:	ce 01       	movw	r24, r28
    641e:	ec 01       	movw	r28, r24
    6420:	89 91       	ld	r24, Y+
    6422:	81 11       	cpse	r24, r1
    6424:	f1 cf       	rjmp	.-30     	; 0x6408 <fputs+0x22>
    6426:	c8 01       	movw	r24, r16
    6428:	cd b7       	in	r28, 0x3d	; 61
    642a:	de b7       	in	r29, 0x3e	; 62
    642c:	e6 e0       	ldi	r30, 0x06	; 6
    642e:	ca c2       	rjmp	.+1428   	; 0x69c4 <__epilogue_restores__+0x18>

00006430 <vsprintf>:
    6430:	ae e0       	ldi	r26, 0x0E	; 14
    6432:	b0 e0       	ldi	r27, 0x00	; 0
    6434:	ed e1       	ldi	r30, 0x1D	; 29
    6436:	f2 e3       	ldi	r31, 0x32	; 50
    6438:	ab c2       	rjmp	.+1366   	; 0x6990 <__prologue_saves__+0x1c>
    643a:	8c 01       	movw	r16, r24
    643c:	86 e0       	ldi	r24, 0x06	; 6
    643e:	8c 83       	std	Y+4, r24	; 0x04
    6440:	1a 83       	std	Y+2, r17	; 0x02
    6442:	09 83       	std	Y+1, r16	; 0x01
    6444:	8f ef       	ldi	r24, 0xFF	; 255
    6446:	9f e7       	ldi	r25, 0x7F	; 127
    6448:	9e 83       	std	Y+6, r25	; 0x06
    644a:	8d 83       	std	Y+5, r24	; 0x05
    644c:	ce 01       	movw	r24, r28
    644e:	01 96       	adiw	r24, 0x01	; 1
    6450:	23 d0       	rcall	.+70     	; 0x6498 <vfprintf>
    6452:	2f 81       	ldd	r18, Y+7	; 0x07
    6454:	38 85       	ldd	r19, Y+8	; 0x08
    6456:	02 0f       	add	r16, r18
    6458:	13 1f       	adc	r17, r19
    645a:	f8 01       	movw	r30, r16
    645c:	10 82       	st	Z, r1
    645e:	2e 96       	adiw	r28, 0x0e	; 14
    6460:	e4 e0       	ldi	r30, 0x04	; 4
    6462:	b2 c2       	rjmp	.+1380   	; 0x69c8 <__epilogue_restores__+0x1c>

00006464 <vsprintf_P>:
    6464:	ae e0       	ldi	r26, 0x0E	; 14
    6466:	b0 e0       	ldi	r27, 0x00	; 0
    6468:	e7 e3       	ldi	r30, 0x37	; 55
    646a:	f2 e3       	ldi	r31, 0x32	; 50
    646c:	91 c2       	rjmp	.+1314   	; 0x6990 <__prologue_saves__+0x1c>
    646e:	8c 01       	movw	r16, r24
    6470:	8e e0       	ldi	r24, 0x0E	; 14
    6472:	8c 83       	std	Y+4, r24	; 0x04
    6474:	1a 83       	std	Y+2, r17	; 0x02
    6476:	09 83       	std	Y+1, r16	; 0x01
    6478:	8f ef       	ldi	r24, 0xFF	; 255
    647a:	9f e7       	ldi	r25, 0x7F	; 127
    647c:	9e 83       	std	Y+6, r25	; 0x06
    647e:	8d 83       	std	Y+5, r24	; 0x05
    6480:	ce 01       	movw	r24, r28
    6482:	01 96       	adiw	r24, 0x01	; 1
    6484:	09 d0       	rcall	.+18     	; 0x6498 <vfprintf>
    6486:	2f 81       	ldd	r18, Y+7	; 0x07
    6488:	38 85       	ldd	r19, Y+8	; 0x08
    648a:	02 0f       	add	r16, r18
    648c:	13 1f       	adc	r17, r19
    648e:	f8 01       	movw	r30, r16
    6490:	10 82       	st	Z, r1
    6492:	2e 96       	adiw	r28, 0x0e	; 14
    6494:	e4 e0       	ldi	r30, 0x04	; 4
    6496:	98 c2       	rjmp	.+1328   	; 0x69c8 <__epilogue_restores__+0x1c>

00006498 <vfprintf>:
    6498:	ab e0       	ldi	r26, 0x0B	; 11
    649a:	b0 e0       	ldi	r27, 0x00	; 0
    649c:	e1 e5       	ldi	r30, 0x51	; 81
    649e:	f2 e3       	ldi	r31, 0x32	; 50
    64a0:	69 c2       	rjmp	.+1234   	; 0x6974 <__prologue_saves__>
    64a2:	7c 01       	movw	r14, r24
    64a4:	3b 01       	movw	r6, r22
    64a6:	8a 01       	movw	r16, r20
    64a8:	fc 01       	movw	r30, r24
    64aa:	17 82       	std	Z+7, r1	; 0x07
    64ac:	16 82       	std	Z+6, r1	; 0x06
    64ae:	83 81       	ldd	r24, Z+3	; 0x03
    64b0:	81 ff       	sbrs	r24, 1
    64b2:	ab c1       	rjmp	.+854    	; 0x680a <vfprintf+0x372>
    64b4:	9a e0       	ldi	r25, 0x0A	; 10
    64b6:	29 2e       	mov	r2, r25
    64b8:	ce 01       	movw	r24, r28
    64ba:	01 96       	adiw	r24, 0x01	; 1
    64bc:	5c 01       	movw	r10, r24
    64be:	f7 01       	movw	r30, r14
    64c0:	93 81       	ldd	r25, Z+3	; 0x03
    64c2:	f3 01       	movw	r30, r6
    64c4:	93 fd       	sbrc	r25, 3
    64c6:	85 91       	lpm	r24, Z+
    64c8:	93 ff       	sbrs	r25, 3
    64ca:	81 91       	ld	r24, Z+
    64cc:	3f 01       	movw	r6, r30
    64ce:	88 23       	and	r24, r24
    64d0:	09 f4       	brne	.+2      	; 0x64d4 <vfprintf+0x3c>
    64d2:	3c c1       	rjmp	.+632    	; 0x674c <vfprintf+0x2b4>
    64d4:	85 32       	cpi	r24, 0x25	; 37
    64d6:	39 f4       	brne	.+14     	; 0x64e6 <vfprintf+0x4e>
    64d8:	93 fd       	sbrc	r25, 3
    64da:	85 91       	lpm	r24, Z+
    64dc:	93 ff       	sbrs	r25, 3
    64de:	81 91       	ld	r24, Z+
    64e0:	3f 01       	movw	r6, r30
    64e2:	85 32       	cpi	r24, 0x25	; 37
    64e4:	21 f4       	brne	.+8      	; 0x64ee <vfprintf+0x56>
    64e6:	b7 01       	movw	r22, r14
    64e8:	90 e0       	ldi	r25, 0x00	; 0
    64ea:	4d df       	rcall	.-358    	; 0x6386 <fputc>
    64ec:	e8 cf       	rjmp	.-48     	; 0x64be <vfprintf+0x26>
    64ee:	91 2c       	mov	r9, r1
    64f0:	41 2c       	mov	r4, r1
    64f2:	51 2c       	mov	r5, r1
    64f4:	ff e1       	ldi	r31, 0x1F	; 31
    64f6:	f5 15       	cp	r31, r5
    64f8:	38 f0       	brcs	.+14     	; 0x6508 <vfprintf+0x70>
    64fa:	8b 32       	cpi	r24, 0x2B	; 43
    64fc:	09 f1       	breq	.+66     	; 0x6540 <vfprintf+0xa8>
    64fe:	88 f4       	brcc	.+34     	; 0x6522 <vfprintf+0x8a>
    6500:	80 32       	cpi	r24, 0x20	; 32
    6502:	01 f1       	breq	.+64     	; 0x6544 <vfprintf+0xac>
    6504:	83 32       	cpi	r24, 0x23	; 35
    6506:	21 f1       	breq	.+72     	; 0x6550 <vfprintf+0xb8>
    6508:	57 fc       	sbrc	r5, 7
    650a:	3a c0       	rjmp	.+116    	; 0x6580 <vfprintf+0xe8>
    650c:	20 ed       	ldi	r18, 0xD0	; 208
    650e:	28 0f       	add	r18, r24
    6510:	2a 30       	cpi	r18, 0x0A	; 10
    6512:	40 f5       	brcc	.+80     	; 0x6564 <vfprintf+0xcc>
    6514:	56 fe       	sbrs	r5, 6
    6516:	1f c0       	rjmp	.+62     	; 0x6556 <vfprintf+0xbe>
    6518:	92 9c       	mul	r9, r2
    651a:	20 0d       	add	r18, r0
    651c:	11 24       	eor	r1, r1
    651e:	92 2e       	mov	r9, r18
    6520:	06 c0       	rjmp	.+12     	; 0x652e <vfprintf+0x96>
    6522:	8d 32       	cpi	r24, 0x2D	; 45
    6524:	91 f0       	breq	.+36     	; 0x654a <vfprintf+0xb2>
    6526:	80 33       	cpi	r24, 0x30	; 48
    6528:	79 f7       	brne	.-34     	; 0x6508 <vfprintf+0x70>
    652a:	68 94       	set
    652c:	50 f8       	bld	r5, 0
    652e:	f3 01       	movw	r30, r6
    6530:	93 fd       	sbrc	r25, 3
    6532:	85 91       	lpm	r24, Z+
    6534:	93 ff       	sbrs	r25, 3
    6536:	81 91       	ld	r24, Z+
    6538:	3f 01       	movw	r6, r30
    653a:	81 11       	cpse	r24, r1
    653c:	db cf       	rjmp	.-74     	; 0x64f4 <vfprintf+0x5c>
    653e:	20 c0       	rjmp	.+64     	; 0x6580 <vfprintf+0xe8>
    6540:	68 94       	set
    6542:	51 f8       	bld	r5, 1
    6544:	68 94       	set
    6546:	52 f8       	bld	r5, 2
    6548:	f2 cf       	rjmp	.-28     	; 0x652e <vfprintf+0x96>
    654a:	68 94       	set
    654c:	53 f8       	bld	r5, 3
    654e:	ef cf       	rjmp	.-34     	; 0x652e <vfprintf+0x96>
    6550:	68 94       	set
    6552:	54 f8       	bld	r5, 4
    6554:	ec cf       	rjmp	.-40     	; 0x652e <vfprintf+0x96>
    6556:	42 9c       	mul	r4, r2
    6558:	20 0d       	add	r18, r0
    655a:	11 24       	eor	r1, r1
    655c:	42 2e       	mov	r4, r18
    655e:	68 94       	set
    6560:	55 f8       	bld	r5, 5
    6562:	e5 cf       	rjmp	.-54     	; 0x652e <vfprintf+0x96>
    6564:	8e 32       	cpi	r24, 0x2E	; 46
    6566:	29 f4       	brne	.+10     	; 0x6572 <vfprintf+0xda>
    6568:	56 fc       	sbrc	r5, 6
    656a:	f0 c0       	rjmp	.+480    	; 0x674c <vfprintf+0x2b4>
    656c:	68 94       	set
    656e:	56 f8       	bld	r5, 6
    6570:	de cf       	rjmp	.-68     	; 0x652e <vfprintf+0x96>
    6572:	8c 36       	cpi	r24, 0x6C	; 108
    6574:	19 f4       	brne	.+6      	; 0x657c <vfprintf+0xe4>
    6576:	68 94       	set
    6578:	57 f8       	bld	r5, 7
    657a:	d9 cf       	rjmp	.-78     	; 0x652e <vfprintf+0x96>
    657c:	88 36       	cpi	r24, 0x68	; 104
    657e:	b9 f2       	breq	.-82     	; 0x652e <vfprintf+0x96>
    6580:	98 2f       	mov	r25, r24
    6582:	9f 7d       	andi	r25, 0xDF	; 223
    6584:	95 54       	subi	r25, 0x45	; 69
    6586:	93 30       	cpi	r25, 0x03	; 3
    6588:	b8 f0       	brcs	.+46     	; 0x65b8 <vfprintf+0x120>
    658a:	83 36       	cpi	r24, 0x63	; 99
    658c:	91 f1       	breq	.+100    	; 0x65f2 <vfprintf+0x15a>
    658e:	83 37       	cpi	r24, 0x73	; 115
    6590:	b1 f1       	breq	.+108    	; 0x65fe <vfprintf+0x166>
    6592:	83 35       	cpi	r24, 0x53	; 83
    6594:	09 f0       	breq	.+2      	; 0x6598 <vfprintf+0x100>
    6596:	56 c0       	rjmp	.+172    	; 0x6644 <vfprintf+0x1ac>
    6598:	f8 01       	movw	r30, r16
    659a:	c1 90       	ld	r12, Z+
    659c:	d1 90       	ld	r13, Z+
    659e:	8f 01       	movw	r16, r30
    65a0:	69 2d       	mov	r22, r9
    65a2:	70 e0       	ldi	r23, 0x00	; 0
    65a4:	56 fc       	sbrc	r5, 6
    65a6:	02 c0       	rjmp	.+4      	; 0x65ac <vfprintf+0x114>
    65a8:	6f ef       	ldi	r22, 0xFF	; 255
    65aa:	7f ef       	ldi	r23, 0xFF	; 255
    65ac:	c6 01       	movw	r24, r12
    65ae:	33 d1       	rcall	.+614    	; 0x6816 <strnlen_P>
    65b0:	4c 01       	movw	r8, r24
    65b2:	68 94       	set
    65b4:	57 f8       	bld	r5, 7
    65b6:	0a c0       	rjmp	.+20     	; 0x65cc <vfprintf+0x134>
    65b8:	0c 5f       	subi	r16, 0xFC	; 252
    65ba:	1f 4f       	sbci	r17, 0xFF	; 255
    65bc:	2f e3       	ldi	r18, 0x3F	; 63
    65be:	29 83       	std	Y+1, r18	; 0x01
    65c0:	88 24       	eor	r8, r8
    65c2:	83 94       	inc	r8
    65c4:	91 2c       	mov	r9, r1
    65c6:	65 01       	movw	r12, r10
    65c8:	e8 94       	clt
    65ca:	57 f8       	bld	r5, 7
    65cc:	53 fc       	sbrc	r5, 3
    65ce:	04 c0       	rjmp	.+8      	; 0x65d8 <vfprintf+0x140>
    65d0:	48 14       	cp	r4, r8
    65d2:	19 04       	cpc	r1, r9
    65d4:	09 f0       	breq	.+2      	; 0x65d8 <vfprintf+0x140>
    65d6:	08 f5       	brcc	.+66     	; 0x661a <vfprintf+0x182>
    65d8:	34 2c       	mov	r3, r4
    65da:	81 14       	cp	r8, r1
    65dc:	91 04       	cpc	r9, r1
    65de:	19 f5       	brne	.+70     	; 0x6626 <vfprintf+0x18e>
    65e0:	33 20       	and	r3, r3
    65e2:	09 f4       	brne	.+2      	; 0x65e6 <vfprintf+0x14e>
    65e4:	6c cf       	rjmp	.-296    	; 0x64be <vfprintf+0x26>
    65e6:	b7 01       	movw	r22, r14
    65e8:	80 e2       	ldi	r24, 0x20	; 32
    65ea:	90 e0       	ldi	r25, 0x00	; 0
    65ec:	cc de       	rcall	.-616    	; 0x6386 <fputc>
    65ee:	3a 94       	dec	r3
    65f0:	f7 cf       	rjmp	.-18     	; 0x65e0 <vfprintf+0x148>
    65f2:	f8 01       	movw	r30, r16
    65f4:	80 81       	ld	r24, Z
    65f6:	89 83       	std	Y+1, r24	; 0x01
    65f8:	0e 5f       	subi	r16, 0xFE	; 254
    65fa:	1f 4f       	sbci	r17, 0xFF	; 255
    65fc:	e1 cf       	rjmp	.-62     	; 0x65c0 <vfprintf+0x128>
    65fe:	f8 01       	movw	r30, r16
    6600:	c1 90       	ld	r12, Z+
    6602:	d1 90       	ld	r13, Z+
    6604:	8f 01       	movw	r16, r30
    6606:	69 2d       	mov	r22, r9
    6608:	70 e0       	ldi	r23, 0x00	; 0
    660a:	56 fc       	sbrc	r5, 6
    660c:	02 c0       	rjmp	.+4      	; 0x6612 <vfprintf+0x17a>
    660e:	6f ef       	ldi	r22, 0xFF	; 255
    6610:	7f ef       	ldi	r23, 0xFF	; 255
    6612:	c6 01       	movw	r24, r12
    6614:	0b d1       	rcall	.+534    	; 0x682c <strnlen>
    6616:	4c 01       	movw	r8, r24
    6618:	d7 cf       	rjmp	.-82     	; 0x65c8 <vfprintf+0x130>
    661a:	b7 01       	movw	r22, r14
    661c:	80 e2       	ldi	r24, 0x20	; 32
    661e:	90 e0       	ldi	r25, 0x00	; 0
    6620:	b2 de       	rcall	.-668    	; 0x6386 <fputc>
    6622:	4a 94       	dec	r4
    6624:	d5 cf       	rjmp	.-86     	; 0x65d0 <vfprintf+0x138>
    6626:	f6 01       	movw	r30, r12
    6628:	57 fc       	sbrc	r5, 7
    662a:	85 91       	lpm	r24, Z+
    662c:	57 fe       	sbrs	r5, 7
    662e:	81 91       	ld	r24, Z+
    6630:	6f 01       	movw	r12, r30
    6632:	b7 01       	movw	r22, r14
    6634:	90 e0       	ldi	r25, 0x00	; 0
    6636:	a7 de       	rcall	.-690    	; 0x6386 <fputc>
    6638:	31 10       	cpse	r3, r1
    663a:	3a 94       	dec	r3
    663c:	f1 e0       	ldi	r31, 0x01	; 1
    663e:	8f 1a       	sub	r8, r31
    6640:	91 08       	sbc	r9, r1
    6642:	cb cf       	rjmp	.-106    	; 0x65da <vfprintf+0x142>
    6644:	84 36       	cpi	r24, 0x64	; 100
    6646:	19 f0       	breq	.+6      	; 0x664e <vfprintf+0x1b6>
    6648:	89 36       	cpi	r24, 0x69	; 105
    664a:	09 f0       	breq	.+2      	; 0x664e <vfprintf+0x1b6>
    664c:	70 c0       	rjmp	.+224    	; 0x672e <vfprintf+0x296>
    664e:	f8 01       	movw	r30, r16
    6650:	57 fe       	sbrs	r5, 7
    6652:	66 c0       	rjmp	.+204    	; 0x6720 <vfprintf+0x288>
    6654:	61 91       	ld	r22, Z+
    6656:	71 91       	ld	r23, Z+
    6658:	81 91       	ld	r24, Z+
    665a:	91 91       	ld	r25, Z+
    665c:	8f 01       	movw	r16, r30
    665e:	25 2d       	mov	r18, r5
    6660:	2f 76       	andi	r18, 0x6F	; 111
    6662:	d2 2e       	mov	r13, r18
    6664:	97 ff       	sbrs	r25, 7
    6666:	09 c0       	rjmp	.+18     	; 0x667a <vfprintf+0x1e2>
    6668:	90 95       	com	r25
    666a:	80 95       	com	r24
    666c:	70 95       	com	r23
    666e:	61 95       	neg	r22
    6670:	7f 4f       	sbci	r23, 0xFF	; 255
    6672:	8f 4f       	sbci	r24, 0xFF	; 255
    6674:	9f 4f       	sbci	r25, 0xFF	; 255
    6676:	68 94       	set
    6678:	d7 f8       	bld	r13, 7
    667a:	2a e0       	ldi	r18, 0x0A	; 10
    667c:	30 e0       	ldi	r19, 0x00	; 0
    667e:	a5 01       	movw	r20, r10
    6680:	e0 d0       	rcall	.+448    	; 0x6842 <__ultoa_invert>
    6682:	c8 2e       	mov	r12, r24
    6684:	ca 18       	sub	r12, r10
    6686:	8c 2c       	mov	r8, r12
    6688:	5d 2c       	mov	r5, r13
    668a:	d6 fe       	sbrs	r13, 6
    668c:	0c c0       	rjmp	.+24     	; 0x66a6 <vfprintf+0x20e>
    668e:	e8 94       	clt
    6690:	50 f8       	bld	r5, 0
    6692:	c9 14       	cp	r12, r9
    6694:	40 f4       	brcc	.+16     	; 0x66a6 <vfprintf+0x20e>
    6696:	d4 fe       	sbrs	r13, 4
    6698:	05 c0       	rjmp	.+10     	; 0x66a4 <vfprintf+0x20c>
    669a:	d2 fc       	sbrc	r13, 2
    669c:	03 c0       	rjmp	.+6      	; 0x66a4 <vfprintf+0x20c>
    669e:	fd 2d       	mov	r31, r13
    66a0:	fe 7e       	andi	r31, 0xEE	; 238
    66a2:	5f 2e       	mov	r5, r31
    66a4:	89 2c       	mov	r8, r9
    66a6:	54 fe       	sbrs	r5, 4
    66a8:	8a c0       	rjmp	.+276    	; 0x67be <vfprintf+0x326>
    66aa:	fe 01       	movw	r30, r28
    66ac:	ec 0d       	add	r30, r12
    66ae:	f1 1d       	adc	r31, r1
    66b0:	80 81       	ld	r24, Z
    66b2:	80 33       	cpi	r24, 0x30	; 48
    66b4:	09 f0       	breq	.+2      	; 0x66b8 <vfprintf+0x220>
    66b6:	7c c0       	rjmp	.+248    	; 0x67b0 <vfprintf+0x318>
    66b8:	25 2d       	mov	r18, r5
    66ba:	29 7e       	andi	r18, 0xE9	; 233
    66bc:	52 2e       	mov	r5, r18
    66be:	85 2d       	mov	r24, r5
    66c0:	88 70       	andi	r24, 0x08	; 8
    66c2:	38 2e       	mov	r3, r24
    66c4:	53 fc       	sbrc	r5, 3
    66c6:	89 c0       	rjmp	.+274    	; 0x67da <vfprintf+0x342>
    66c8:	50 fe       	sbrs	r5, 0
    66ca:	83 c0       	rjmp	.+262    	; 0x67d2 <vfprintf+0x33a>
    66cc:	9c 2c       	mov	r9, r12
    66ce:	84 14       	cp	r8, r4
    66d0:	18 f4       	brcc	.+6      	; 0x66d8 <vfprintf+0x240>
    66d2:	4c 0c       	add	r4, r12
    66d4:	94 2c       	mov	r9, r4
    66d6:	98 18       	sub	r9, r8
    66d8:	54 fe       	sbrs	r5, 4
    66da:	85 c0       	rjmp	.+266    	; 0x67e6 <vfprintf+0x34e>
    66dc:	b7 01       	movw	r22, r14
    66de:	80 e3       	ldi	r24, 0x30	; 48
    66e0:	90 e0       	ldi	r25, 0x00	; 0
    66e2:	51 de       	rcall	.-862    	; 0x6386 <fputc>
    66e4:	52 fe       	sbrs	r5, 2
    66e6:	08 c0       	rjmp	.+16     	; 0x66f8 <vfprintf+0x260>
    66e8:	88 e7       	ldi	r24, 0x78	; 120
    66ea:	90 e0       	ldi	r25, 0x00	; 0
    66ec:	51 fe       	sbrs	r5, 1
    66ee:	02 c0       	rjmp	.+4      	; 0x66f4 <vfprintf+0x25c>
    66f0:	88 e5       	ldi	r24, 0x58	; 88
    66f2:	90 e0       	ldi	r25, 0x00	; 0
    66f4:	b7 01       	movw	r22, r14
    66f6:	47 de       	rcall	.-882    	; 0x6386 <fputc>
    66f8:	c9 14       	cp	r12, r9
    66fa:	08 f4       	brcc	.+2      	; 0x66fe <vfprintf+0x266>
    66fc:	80 c0       	rjmp	.+256    	; 0x67fe <vfprintf+0x366>
    66fe:	ca 94       	dec	r12
    6700:	d1 2c       	mov	r13, r1
    6702:	9f ef       	ldi	r25, 0xFF	; 255
    6704:	c9 1a       	sub	r12, r25
    6706:	d9 0a       	sbc	r13, r25
    6708:	ca 0c       	add	r12, r10
    670a:	db 1c       	adc	r13, r11
    670c:	f6 01       	movw	r30, r12
    670e:	82 91       	ld	r24, -Z
    6710:	6f 01       	movw	r12, r30
    6712:	b7 01       	movw	r22, r14
    6714:	90 e0       	ldi	r25, 0x00	; 0
    6716:	37 de       	rcall	.-914    	; 0x6386 <fputc>
    6718:	ac 14       	cp	r10, r12
    671a:	bd 04       	cpc	r11, r13
    671c:	b9 f7       	brne	.-18     	; 0x670c <vfprintf+0x274>
    671e:	60 cf       	rjmp	.-320    	; 0x65e0 <vfprintf+0x148>
    6720:	61 91       	ld	r22, Z+
    6722:	71 91       	ld	r23, Z+
    6724:	07 2e       	mov	r0, r23
    6726:	00 0c       	add	r0, r0
    6728:	88 0b       	sbc	r24, r24
    672a:	99 0b       	sbc	r25, r25
    672c:	97 cf       	rjmp	.-210    	; 0x665c <vfprintf+0x1c4>
    672e:	d5 2c       	mov	r13, r5
    6730:	e8 94       	clt
    6732:	d4 f8       	bld	r13, 4
    6734:	2a e0       	ldi	r18, 0x0A	; 10
    6736:	30 e0       	ldi	r19, 0x00	; 0
    6738:	85 37       	cpi	r24, 0x75	; 117
    673a:	31 f1       	breq	.+76     	; 0x6788 <vfprintf+0x2f0>
    673c:	95 2d       	mov	r25, r5
    673e:	99 7f       	andi	r25, 0xF9	; 249
    6740:	d9 2e       	mov	r13, r25
    6742:	8f 36       	cpi	r24, 0x6F	; 111
    6744:	f9 f0       	breq	.+62     	; 0x6784 <vfprintf+0x2ec>
    6746:	40 f4       	brcc	.+16     	; 0x6758 <vfprintf+0x2c0>
    6748:	88 35       	cpi	r24, 0x58	; 88
    674a:	a1 f0       	breq	.+40     	; 0x6774 <vfprintf+0x2dc>
    674c:	f7 01       	movw	r30, r14
    674e:	86 81       	ldd	r24, Z+6	; 0x06
    6750:	97 81       	ldd	r25, Z+7	; 0x07
    6752:	2b 96       	adiw	r28, 0x0b	; 11
    6754:	e2 e1       	ldi	r30, 0x12	; 18
    6756:	2a c1       	rjmp	.+596    	; 0x69ac <__epilogue_restores__>
    6758:	80 37       	cpi	r24, 0x70	; 112
    675a:	49 f0       	breq	.+18     	; 0x676e <vfprintf+0x2d6>
    675c:	88 37       	cpi	r24, 0x78	; 120
    675e:	b1 f7       	brne	.-20     	; 0x674c <vfprintf+0x2b4>
    6760:	d4 fe       	sbrs	r13, 4
    6762:	02 c0       	rjmp	.+4      	; 0x6768 <vfprintf+0x2d0>
    6764:	68 94       	set
    6766:	d2 f8       	bld	r13, 2
    6768:	20 e1       	ldi	r18, 0x10	; 16
    676a:	30 e0       	ldi	r19, 0x00	; 0
    676c:	0d c0       	rjmp	.+26     	; 0x6788 <vfprintf+0x2f0>
    676e:	68 94       	set
    6770:	d4 f8       	bld	r13, 4
    6772:	f6 cf       	rjmp	.-20     	; 0x6760 <vfprintf+0x2c8>
    6774:	54 fe       	sbrs	r5, 4
    6776:	03 c0       	rjmp	.+6      	; 0x677e <vfprintf+0x2e6>
    6778:	e9 2f       	mov	r30, r25
    677a:	e6 60       	ori	r30, 0x06	; 6
    677c:	de 2e       	mov	r13, r30
    677e:	20 e1       	ldi	r18, 0x10	; 16
    6780:	32 e0       	ldi	r19, 0x02	; 2
    6782:	02 c0       	rjmp	.+4      	; 0x6788 <vfprintf+0x2f0>
    6784:	28 e0       	ldi	r18, 0x08	; 8
    6786:	30 e0       	ldi	r19, 0x00	; 0
    6788:	f8 01       	movw	r30, r16
    678a:	d7 fe       	sbrs	r13, 7
    678c:	0c c0       	rjmp	.+24     	; 0x67a6 <vfprintf+0x30e>
    678e:	61 91       	ld	r22, Z+
    6790:	71 91       	ld	r23, Z+
    6792:	81 91       	ld	r24, Z+
    6794:	91 91       	ld	r25, Z+
    6796:	8f 01       	movw	r16, r30
    6798:	a5 01       	movw	r20, r10
    679a:	53 d0       	rcall	.+166    	; 0x6842 <__ultoa_invert>
    679c:	c8 2e       	mov	r12, r24
    679e:	ca 18       	sub	r12, r10
    67a0:	e8 94       	clt
    67a2:	d7 f8       	bld	r13, 7
    67a4:	70 cf       	rjmp	.-288    	; 0x6686 <vfprintf+0x1ee>
    67a6:	61 91       	ld	r22, Z+
    67a8:	71 91       	ld	r23, Z+
    67aa:	90 e0       	ldi	r25, 0x00	; 0
    67ac:	80 e0       	ldi	r24, 0x00	; 0
    67ae:	f3 cf       	rjmp	.-26     	; 0x6796 <vfprintf+0x2fe>
    67b0:	52 fc       	sbrc	r5, 2
    67b2:	02 c0       	rjmp	.+4      	; 0x67b8 <vfprintf+0x320>
    67b4:	83 94       	inc	r8
    67b6:	83 cf       	rjmp	.-250    	; 0x66be <vfprintf+0x226>
    67b8:	83 94       	inc	r8
    67ba:	83 94       	inc	r8
    67bc:	80 cf       	rjmp	.-256    	; 0x66be <vfprintf+0x226>
    67be:	85 2d       	mov	r24, r5
    67c0:	86 78       	andi	r24, 0x86	; 134
    67c2:	09 f4       	brne	.+2      	; 0x67c6 <vfprintf+0x32e>
    67c4:	7c cf       	rjmp	.-264    	; 0x66be <vfprintf+0x226>
    67c6:	f6 cf       	rjmp	.-20     	; 0x67b4 <vfprintf+0x31c>
    67c8:	b7 01       	movw	r22, r14
    67ca:	80 e2       	ldi	r24, 0x20	; 32
    67cc:	90 e0       	ldi	r25, 0x00	; 0
    67ce:	db dd       	rcall	.-1098   	; 0x6386 <fputc>
    67d0:	83 94       	inc	r8
    67d2:	84 14       	cp	r8, r4
    67d4:	c8 f3       	brcs	.-14     	; 0x67c8 <vfprintf+0x330>
    67d6:	31 2c       	mov	r3, r1
    67d8:	7f cf       	rjmp	.-258    	; 0x66d8 <vfprintf+0x240>
    67da:	34 2c       	mov	r3, r4
    67dc:	38 18       	sub	r3, r8
    67de:	84 14       	cp	r8, r4
    67e0:	08 f4       	brcc	.+2      	; 0x67e4 <vfprintf+0x34c>
    67e2:	7a cf       	rjmp	.-268    	; 0x66d8 <vfprintf+0x240>
    67e4:	f8 cf       	rjmp	.-16     	; 0x67d6 <vfprintf+0x33e>
    67e6:	85 2d       	mov	r24, r5
    67e8:	86 78       	andi	r24, 0x86	; 134
    67ea:	09 f4       	brne	.+2      	; 0x67ee <vfprintf+0x356>
    67ec:	85 cf       	rjmp	.-246    	; 0x66f8 <vfprintf+0x260>
    67ee:	8b e2       	ldi	r24, 0x2B	; 43
    67f0:	51 fe       	sbrs	r5, 1
    67f2:	80 e2       	ldi	r24, 0x20	; 32
    67f4:	57 fc       	sbrc	r5, 7
    67f6:	8d e2       	ldi	r24, 0x2D	; 45
    67f8:	b7 01       	movw	r22, r14
    67fa:	90 e0       	ldi	r25, 0x00	; 0
    67fc:	7c cf       	rjmp	.-264    	; 0x66f6 <vfprintf+0x25e>
    67fe:	b7 01       	movw	r22, r14
    6800:	80 e3       	ldi	r24, 0x30	; 48
    6802:	90 e0       	ldi	r25, 0x00	; 0
    6804:	c0 dd       	rcall	.-1152   	; 0x6386 <fputc>
    6806:	9a 94       	dec	r9
    6808:	77 cf       	rjmp	.-274    	; 0x66f8 <vfprintf+0x260>
    680a:	8f ef       	ldi	r24, 0xFF	; 255
    680c:	9f ef       	ldi	r25, 0xFF	; 255
    680e:	a1 cf       	rjmp	.-190    	; 0x6752 <vfprintf+0x2ba>

00006810 <__ctype_isfalse>:
    6810:	99 27       	eor	r25, r25
    6812:	88 27       	eor	r24, r24

00006814 <__ctype_istrue>:
    6814:	08 95       	ret

00006816 <strnlen_P>:
    6816:	fc 01       	movw	r30, r24
    6818:	05 90       	lpm	r0, Z+
    681a:	61 50       	subi	r22, 0x01	; 1
    681c:	70 40       	sbci	r23, 0x00	; 0
    681e:	01 10       	cpse	r0, r1
    6820:	d8 f7       	brcc	.-10     	; 0x6818 <strnlen_P+0x2>
    6822:	80 95       	com	r24
    6824:	90 95       	com	r25
    6826:	8e 0f       	add	r24, r30
    6828:	9f 1f       	adc	r25, r31
    682a:	08 95       	ret

0000682c <strnlen>:
    682c:	fc 01       	movw	r30, r24
    682e:	61 50       	subi	r22, 0x01	; 1
    6830:	70 40       	sbci	r23, 0x00	; 0
    6832:	01 90       	ld	r0, Z+
    6834:	01 10       	cpse	r0, r1
    6836:	d8 f7       	brcc	.-10     	; 0x682e <strnlen+0x2>
    6838:	80 95       	com	r24
    683a:	90 95       	com	r25
    683c:	8e 0f       	add	r24, r30
    683e:	9f 1f       	adc	r25, r31
    6840:	08 95       	ret

00006842 <__ultoa_invert>:
    6842:	fa 01       	movw	r30, r20
    6844:	aa 27       	eor	r26, r26
    6846:	28 30       	cpi	r18, 0x08	; 8
    6848:	51 f1       	breq	.+84     	; 0x689e <__ultoa_invert+0x5c>
    684a:	20 31       	cpi	r18, 0x10	; 16
    684c:	81 f1       	breq	.+96     	; 0x68ae <__ultoa_invert+0x6c>
    684e:	e8 94       	clt
    6850:	6f 93       	push	r22
    6852:	6e 7f       	andi	r22, 0xFE	; 254
    6854:	6e 5f       	subi	r22, 0xFE	; 254
    6856:	7f 4f       	sbci	r23, 0xFF	; 255
    6858:	8f 4f       	sbci	r24, 0xFF	; 255
    685a:	9f 4f       	sbci	r25, 0xFF	; 255
    685c:	af 4f       	sbci	r26, 0xFF	; 255
    685e:	b1 e0       	ldi	r27, 0x01	; 1
    6860:	3e d0       	rcall	.+124    	; 0x68de <__ultoa_invert+0x9c>
    6862:	b4 e0       	ldi	r27, 0x04	; 4
    6864:	3c d0       	rcall	.+120    	; 0x68de <__ultoa_invert+0x9c>
    6866:	67 0f       	add	r22, r23
    6868:	78 1f       	adc	r23, r24
    686a:	89 1f       	adc	r24, r25
    686c:	9a 1f       	adc	r25, r26
    686e:	a1 1d       	adc	r26, r1
    6870:	68 0f       	add	r22, r24
    6872:	79 1f       	adc	r23, r25
    6874:	8a 1f       	adc	r24, r26
    6876:	91 1d       	adc	r25, r1
    6878:	a1 1d       	adc	r26, r1
    687a:	6a 0f       	add	r22, r26
    687c:	71 1d       	adc	r23, r1
    687e:	81 1d       	adc	r24, r1
    6880:	91 1d       	adc	r25, r1
    6882:	a1 1d       	adc	r26, r1
    6884:	20 d0       	rcall	.+64     	; 0x68c6 <__ultoa_invert+0x84>
    6886:	09 f4       	brne	.+2      	; 0x688a <__ultoa_invert+0x48>
    6888:	68 94       	set
    688a:	3f 91       	pop	r19
    688c:	2a e0       	ldi	r18, 0x0A	; 10
    688e:	26 9f       	mul	r18, r22
    6890:	11 24       	eor	r1, r1
    6892:	30 19       	sub	r19, r0
    6894:	30 5d       	subi	r19, 0xD0	; 208
    6896:	31 93       	st	Z+, r19
    6898:	de f6       	brtc	.-74     	; 0x6850 <__ultoa_invert+0xe>
    689a:	cf 01       	movw	r24, r30
    689c:	08 95       	ret
    689e:	46 2f       	mov	r20, r22
    68a0:	47 70       	andi	r20, 0x07	; 7
    68a2:	40 5d       	subi	r20, 0xD0	; 208
    68a4:	41 93       	st	Z+, r20
    68a6:	b3 e0       	ldi	r27, 0x03	; 3
    68a8:	0f d0       	rcall	.+30     	; 0x68c8 <__ultoa_invert+0x86>
    68aa:	c9 f7       	brne	.-14     	; 0x689e <__ultoa_invert+0x5c>
    68ac:	f6 cf       	rjmp	.-20     	; 0x689a <__ultoa_invert+0x58>
    68ae:	46 2f       	mov	r20, r22
    68b0:	4f 70       	andi	r20, 0x0F	; 15
    68b2:	40 5d       	subi	r20, 0xD0	; 208
    68b4:	4a 33       	cpi	r20, 0x3A	; 58
    68b6:	18 f0       	brcs	.+6      	; 0x68be <__ultoa_invert+0x7c>
    68b8:	49 5d       	subi	r20, 0xD9	; 217
    68ba:	31 fd       	sbrc	r19, 1
    68bc:	40 52       	subi	r20, 0x20	; 32
    68be:	41 93       	st	Z+, r20
    68c0:	02 d0       	rcall	.+4      	; 0x68c6 <__ultoa_invert+0x84>
    68c2:	a9 f7       	brne	.-22     	; 0x68ae <__ultoa_invert+0x6c>
    68c4:	ea cf       	rjmp	.-44     	; 0x689a <__ultoa_invert+0x58>
    68c6:	b4 e0       	ldi	r27, 0x04	; 4
    68c8:	a6 95       	lsr	r26
    68ca:	97 95       	ror	r25
    68cc:	87 95       	ror	r24
    68ce:	77 95       	ror	r23
    68d0:	67 95       	ror	r22
    68d2:	ba 95       	dec	r27
    68d4:	c9 f7       	brne	.-14     	; 0x68c8 <__ultoa_invert+0x86>
    68d6:	00 97       	sbiw	r24, 0x00	; 0
    68d8:	61 05       	cpc	r22, r1
    68da:	71 05       	cpc	r23, r1
    68dc:	08 95       	ret
    68de:	9b 01       	movw	r18, r22
    68e0:	ac 01       	movw	r20, r24
    68e2:	0a 2e       	mov	r0, r26
    68e4:	06 94       	lsr	r0
    68e6:	57 95       	ror	r21
    68e8:	47 95       	ror	r20
    68ea:	37 95       	ror	r19
    68ec:	27 95       	ror	r18
    68ee:	ba 95       	dec	r27
    68f0:	c9 f7       	brne	.-14     	; 0x68e4 <__ultoa_invert+0xa2>
    68f2:	62 0f       	add	r22, r18
    68f4:	73 1f       	adc	r23, r19
    68f6:	84 1f       	adc	r24, r20
    68f8:	95 1f       	adc	r25, r21
    68fa:	a0 1d       	adc	r26, r0
    68fc:	08 95       	ret

000068fe <eeprom_read_block>:
    68fe:	dc 01       	movw	r26, r24
    6900:	cb 01       	movw	r24, r22

00006902 <eeprom_read_blraw>:
    6902:	fc 01       	movw	r30, r24
    6904:	f9 99       	sbic	0x1f, 1	; 31
    6906:	fe cf       	rjmp	.-4      	; 0x6904 <eeprom_read_blraw+0x2>
    6908:	06 c0       	rjmp	.+12     	; 0x6916 <eeprom_read_blraw+0x14>
    690a:	f2 bd       	out	0x22, r31	; 34
    690c:	e1 bd       	out	0x21, r30	; 33
    690e:	f8 9a       	sbi	0x1f, 0	; 31
    6910:	31 96       	adiw	r30, 0x01	; 1
    6912:	00 b4       	in	r0, 0x20	; 32
    6914:	0d 92       	st	X+, r0
    6916:	41 50       	subi	r20, 0x01	; 1
    6918:	50 40       	sbci	r21, 0x00	; 0
    691a:	b8 f7       	brcc	.-18     	; 0x690a <eeprom_read_blraw+0x8>
    691c:	08 95       	ret

0000691e <eeprom_update_byte>:
    691e:	26 2f       	mov	r18, r22

00006920 <eeprom_update_r18>:
    6920:	f9 99       	sbic	0x1f, 1	; 31
    6922:	fe cf       	rjmp	.-4      	; 0x6920 <eeprom_update_r18>
    6924:	92 bd       	out	0x22, r25	; 34
    6926:	81 bd       	out	0x21, r24	; 33
    6928:	f8 9a       	sbi	0x1f, 0	; 31
    692a:	01 97       	sbiw	r24, 0x01	; 1
    692c:	00 b4       	in	r0, 0x20	; 32
    692e:	02 16       	cp	r0, r18
    6930:	39 f0       	breq	.+14     	; 0x6940 <eeprom_update_r18+0x20>
    6932:	1f ba       	out	0x1f, r1	; 31
    6934:	20 bd       	out	0x20, r18	; 32
    6936:	0f b6       	in	r0, 0x3f	; 63
    6938:	f8 94       	cli
    693a:	fa 9a       	sbi	0x1f, 2	; 31
    693c:	f9 9a       	sbi	0x1f, 1	; 31
    693e:	0f be       	out	0x3f, r0	; 63
    6940:	08 95       	ret

00006942 <__mulsi3>:
    6942:	db 01       	movw	r26, r22
    6944:	8f 93       	push	r24
    6946:	9f 93       	push	r25
    6948:	0b d0       	rcall	.+22     	; 0x6960 <__muluhisi3>
    694a:	bf 91       	pop	r27
    694c:	af 91       	pop	r26
    694e:	a2 9f       	mul	r26, r18
    6950:	80 0d       	add	r24, r0
    6952:	91 1d       	adc	r25, r1
    6954:	a3 9f       	mul	r26, r19
    6956:	90 0d       	add	r25, r0
    6958:	b2 9f       	mul	r27, r18
    695a:	90 0d       	add	r25, r0
    695c:	11 24       	eor	r1, r1
    695e:	08 95       	ret

00006960 <__muluhisi3>:
    6960:	40 d0       	rcall	.+128    	; 0x69e2 <__umulhisi3>
    6962:	a5 9f       	mul	r26, r21
    6964:	90 0d       	add	r25, r0
    6966:	b4 9f       	mul	r27, r20
    6968:	90 0d       	add	r25, r0
    696a:	a4 9f       	mul	r26, r20
    696c:	80 0d       	add	r24, r0
    696e:	91 1d       	adc	r25, r1
    6970:	11 24       	eor	r1, r1
    6972:	08 95       	ret

00006974 <__prologue_saves__>:
    6974:	2f 92       	push	r2
    6976:	3f 92       	push	r3
    6978:	4f 92       	push	r4
    697a:	5f 92       	push	r5
    697c:	6f 92       	push	r6
    697e:	7f 92       	push	r7
    6980:	8f 92       	push	r8
    6982:	9f 92       	push	r9
    6984:	af 92       	push	r10
    6986:	bf 92       	push	r11
    6988:	cf 92       	push	r12
    698a:	df 92       	push	r13
    698c:	ef 92       	push	r14
    698e:	ff 92       	push	r15
    6990:	0f 93       	push	r16
    6992:	1f 93       	push	r17
    6994:	cf 93       	push	r28
    6996:	df 93       	push	r29
    6998:	cd b7       	in	r28, 0x3d	; 61
    699a:	de b7       	in	r29, 0x3e	; 62
    699c:	ca 1b       	sub	r28, r26
    699e:	db 0b       	sbc	r29, r27
    69a0:	0f b6       	in	r0, 0x3f	; 63
    69a2:	f8 94       	cli
    69a4:	de bf       	out	0x3e, r29	; 62
    69a6:	0f be       	out	0x3f, r0	; 63
    69a8:	cd bf       	out	0x3d, r28	; 61
    69aa:	09 94       	ijmp

000069ac <__epilogue_restores__>:
    69ac:	2a 88       	ldd	r2, Y+18	; 0x12
    69ae:	39 88       	ldd	r3, Y+17	; 0x11
    69b0:	48 88       	ldd	r4, Y+16	; 0x10
    69b2:	5f 84       	ldd	r5, Y+15	; 0x0f
    69b4:	6e 84       	ldd	r6, Y+14	; 0x0e
    69b6:	7d 84       	ldd	r7, Y+13	; 0x0d
    69b8:	8c 84       	ldd	r8, Y+12	; 0x0c
    69ba:	9b 84       	ldd	r9, Y+11	; 0x0b
    69bc:	aa 84       	ldd	r10, Y+10	; 0x0a
    69be:	b9 84       	ldd	r11, Y+9	; 0x09
    69c0:	c8 84       	ldd	r12, Y+8	; 0x08
    69c2:	df 80       	ldd	r13, Y+7	; 0x07
    69c4:	ee 80       	ldd	r14, Y+6	; 0x06
    69c6:	fd 80       	ldd	r15, Y+5	; 0x05
    69c8:	0c 81       	ldd	r16, Y+4	; 0x04
    69ca:	1b 81       	ldd	r17, Y+3	; 0x03
    69cc:	aa 81       	ldd	r26, Y+2	; 0x02
    69ce:	b9 81       	ldd	r27, Y+1	; 0x01
    69d0:	ce 0f       	add	r28, r30
    69d2:	d1 1d       	adc	r29, r1
    69d4:	0f b6       	in	r0, 0x3f	; 63
    69d6:	f8 94       	cli
    69d8:	de bf       	out	0x3e, r29	; 62
    69da:	0f be       	out	0x3f, r0	; 63
    69dc:	cd bf       	out	0x3d, r28	; 61
    69de:	ed 01       	movw	r28, r26
    69e0:	08 95       	ret

000069e2 <__umulhisi3>:
    69e2:	a2 9f       	mul	r26, r18
    69e4:	b0 01       	movw	r22, r0
    69e6:	b3 9f       	mul	r27, r19
    69e8:	c0 01       	movw	r24, r0
    69ea:	a3 9f       	mul	r26, r19
    69ec:	70 0d       	add	r23, r0
    69ee:	81 1d       	adc	r24, r1
    69f0:	11 24       	eor	r1, r1
    69f2:	91 1d       	adc	r25, r1
    69f4:	b2 9f       	mul	r27, r18
    69f6:	70 0d       	add	r23, r0
    69f8:	81 1d       	adc	r24, r1
    69fa:	11 24       	eor	r1, r1
    69fc:	91 1d       	adc	r25, r1
    69fe:	08 95       	ret

00006a00 <_exit>:
    6a00:	f8 94       	cli

00006a02 <__stop_program>:
    6a02:	ff cf       	rjmp	.-2      	; 0x6a02 <__stop_program>
